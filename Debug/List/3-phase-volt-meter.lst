
AVRASM ver. 2.1.30  D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm Thu Nov 15 15:53:41 2018

D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1086): warning: Register r5 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1087): warning: Register r4 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1088): warning: Register r7 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1089): warning: Register r8 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1090): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8A
                 ;Program type           : Application
                 ;Clock frequency        : 11,059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Speed
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8A
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _led_cnt=R5
                 	.DEF _data_led=R4
                 	.DEF _data_single_led=R7
                 	.DEF _data=R8
                 	.DEF _data_msb=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c01e      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c042      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000013 0001
000014 00ff      	.DB  0x1,0x0,0xFF,0x0
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1122): warning: .cseg .db misalignment - padding zero byte
000015 0000      	.DB  0x0
                 
                 _0x3:
000016 81f9
000017 abba
000018 6bc3
000019 a17b      	.DB  0xF9,0x81,0xBA,0xAB,0xC3,0x6B,0x7B,0xA1
00001a ebfb      	.DB  0xFB,0xEB
                 
                 __GLOBAL_INI_TBL:
00001b 0005      	.DW  0x05
00001c 0005      	.DW  0x05
00001d 0026      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00001e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00001f 94f8      	CLI
000020 27ee      	CLR  R30
000021 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000022 e0f1      	LDI  R31,1
000023 bffb      	OUT  GICR,R31
000024 bfeb      	OUT  GICR,R30
000025 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000026 e08d      	LDI  R24,(14-2)+1
000027 e0a2      	LDI  R26,2
000028 27bb      	CLR  R27
                 __CLEAR_REG:
000029 93ed      	ST   X+,R30
00002a 958a      	DEC  R24
00002b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00002c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00002d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00002e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00002f 93ed      	ST   X+,R30
000030 9701      	SBIW R24,1
000031 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000032 e3e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000033 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000034 9185      	LPM  R24,Z+
000035 9195      	LPM  R25,Z+
000036 9700      	SBIW R24,0
000037 f061      	BREQ __GLOBAL_INI_END
000038 91a5      	LPM  R26,Z+
000039 91b5      	LPM  R27,Z+
00003a 9005      	LPM  R0,Z+
00003b 9015      	LPM  R1,Z+
00003c 01bf      	MOVW R22,R30
00003d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00003e 9005      	LPM  R0,Z+
00003f 920d      	ST   X+,R0
000040 9701      	SBIW R24,1
000041 f7e1      	BRNE __GLOBAL_INI_LOOP
000042 01fb      	MOVW R30,R22
000043 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000044 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000045 bfed      	OUT  SPL,R30
000046 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000047 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000048 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000049 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004a c103      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : 3 phase Volt Meter
                 ;Version : 1.0
                 ;Date    : 15/11/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega8L
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 11,059200 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include "delay.h"
                 ;#include "SPI_SOFTWARE.h"
                 ;
                 ;#define     RS    1
                 ;#define     ST    2
                 ;#define     TR    3
                 ;#define     RN    4
                 ;#define     SN    5
                 ;#define     TN    6
                 ;
                 ;#define     RS_INPUT    PINC.0
                 ;#define     ST_INPUT    PINC.1
                 ;#define     TR_INPUT    PINC.2
                 ;#define     RN_INPUT    PINC.3
                 ;#define     SN_INPUT    PINC.4
                 ;#define     TN_INPUT    PINC.5
                 ;
                 ;unsigned char     led_cnt = 1;
                 ;unsigned char     data_led;
                 ;unsigned char     data_single_led =0xff;
                 ;unsigned int      data = 0;
                 ;// Declare your global variables here
                 ;unsigned char led_data[] = {0xF9,0x81,0xBA,0xAB,0xC3,0x6B,0x7B,0xA1,0xFB,0xEB};
                 
                 	.DSEG
                 ;
                 ;void    SCAN_LED(unsigned char num_led,unsigned char    data);
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0034 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
00004b 920a      	ST   -Y,R0
00004c 921a      	ST   -Y,R1
00004d 92fa      	ST   -Y,R15
00004e 936a      	ST   -Y,R22
00004f 937a      	ST   -Y,R23
000050 938a      	ST   -Y,R24
000051 939a      	ST   -Y,R25
000052 93aa      	ST   -Y,R26
000053 93ba      	ST   -Y,R27
000054 93ea      	ST   -Y,R30
000055 93fa      	ST   -Y,R31
000056 b7ef      	IN   R30,SREG
000057 93ea      	ST   -Y,R30
                 ; 0000 0035 // Reinitialize Timer1 value
                 ; 0000 0036       TCNT1H=0xE800 >> 8;
000058 eee8      	LDI  R30,LOW(232)
000059 bded      	OUT  0x2D,R30
                 ; 0000 0037       TCNT1L=0xE800 & 0xff;
00005a e0e0      	LDI  R30,LOW(0)
00005b bdec      	OUT  0x2C,R30
                 ; 0000 0038 
                 ; 0000 0039       if(led_cnt == 1)  data_led = data/1000;
00005c e0e1      	LDI  R30,LOW(1)
00005d 15e5      	CP   R30,R5
00005e f431      	BRNE _0x4
00005f 01d4      	MOVW R26,R8
000060 eee8      	LDI  R30,LOW(1000)
000061 e0f3      	LDI  R31,HIGH(1000)
000062 d13a      	RCALL __DIVW21U
000063 2e4e      	MOV  R4,R30
                 ; 0000 003A       else if(led_cnt == 2)  data_led = data%1000/100;
000064 c027      	RJMP _0x5
                 _0x4:
000065 e0e2      	LDI  R30,LOW(2)
000066 15e5      	CP   R30,R5
000067 f451      	BRNE _0x6
000068 01d4      	MOVW R26,R8
000069 eee8      	LDI  R30,LOW(1000)
00006a e0f3      	LDI  R31,HIGH(1000)
00006b d144      	RCALL __MODW21U
00006c 01df      	MOVW R26,R30
00006d e6e4      	LDI  R30,LOW(100)
00006e e0f0      	LDI  R31,HIGH(100)
00006f d12d      	RCALL __DIVW21U
000070 2e4e      	MOV  R4,R30
                 ; 0000 003B       else if(led_cnt == 3)  data_led = data%100/10;
000071 c01a      	RJMP _0x7
                 _0x6:
000072 e0e3      	LDI  R30,LOW(3)
000073 15e5      	CP   R30,R5
000074 f451      	BRNE _0x8
000075 01d4      	MOVW R26,R8
000076 e6e4      	LDI  R30,LOW(100)
000077 e0f0      	LDI  R31,HIGH(100)
000078 d137      	RCALL __MODW21U
000079 01df      	MOVW R26,R30
00007a e0ea      	LDI  R30,LOW(10)
00007b e0f0      	LDI  R31,HIGH(10)
00007c d120      	RCALL __DIVW21U
00007d 2e4e      	MOV  R4,R30
                 ; 0000 003C       else if(led_cnt == 4)  data_led = data%10;
00007e c00d      	RJMP _0x9
                 _0x8:
00007f e0e4      	LDI  R30,LOW(4)
000080 15e5      	CP   R30,R5
000081 f431      	BRNE _0xA
000082 01d4      	MOVW R26,R8
000083 e0ea      	LDI  R30,LOW(10)
000084 e0f0      	LDI  R31,HIGH(10)
000085 d12a      	RCALL __MODW21U
000086 2e4e      	MOV  R4,R30
                 ; 0000 003D       else if(led_cnt == 5)   data_led = data_single_led;
000087 c004      	RJMP _0xB
                 _0xA:
000088 e0e5      	LDI  R30,LOW(5)
000089 15e5      	CP   R30,R5
00008a f409      	BRNE _0xC
00008b 2c47      	MOV  R4,R7
                 ; 0000 003E 
                 ; 0000 003F       SCAN_LED(led_cnt,data_led);
                 _0xC:
                 _0xB:
                 _0x9:
                 _0x7:
                 _0x5:
00008c 925a      	ST   -Y,R5
00008d 2da4      	MOV  R26,R4
00008e d014      	RCALL _SCAN_LED
                 ; 0000 0040       led_cnt++;
00008f 9453      	INC  R5
                 ; 0000 0041       if(led_cnt > 5)   led_cnt = 1;
000090 e0e5      	LDI  R30,LOW(5)
000091 15e5      	CP   R30,R5
000092 f410      	BRSH _0xD
000093 e0e1      	LDI  R30,LOW(1)
000094 2e5e      	MOV  R5,R30
                 ; 0000 0042 }
                 _0xD:
000095 91e9      	LD   R30,Y+
000096 bfef      	OUT  SREG,R30
000097 91f9      	LD   R31,Y+
000098 91e9      	LD   R30,Y+
000099 91b9      	LD   R27,Y+
00009a 91a9      	LD   R26,Y+
00009b 9199      	LD   R25,Y+
00009c 9189      	LD   R24,Y+
00009d 9179      	LD   R23,Y+
00009e 9169      	LD   R22,Y+
00009f 90f9      	LD   R15,Y+
0000a0 9019      	LD   R1,Y+
0000a1 9009      	LD   R0,Y+
0000a2 9518      	RETI
                 ; .FEND
                 ;
                 ;void    SCAN_LED(unsigned char num_led,unsigned char    data)
                 ; 0000 0045 {
                 _SCAN_LED:
                 ; .FSTART _SCAN_LED
                 ; 0000 0046     unsigned char   byte1,byte2;
                 ; 0000 0047     byte1 = 0xFF;
0000a3 93aa      	ST   -Y,R26
0000a4 d10e      	RCALL __SAVELOCR2
                 ;	num_led -> Y+3
                 ;	data -> Y+2
                 ;	byte1 -> R17
                 ;	byte2 -> R16
0000a5 ef1f      	LDI  R17,LOW(255)
                 ; 0000 0048     byte2 = 0;
0000a6 e000      	LDI  R16,LOW(0)
                 ; 0000 0049 
                 ; 0000 004A       switch(data)
0000a7 81ea      	LDD  R30,Y+2
0000a8 e0f0      	LDI  R31,0
                 ; 0000 004B       {
                 ; 0000 004C         case    0:
0000a9 9730      	SBIW R30,0
0000aa f411      	BRNE _0x11
                 ; 0000 004D         {
                 ; 0000 004E             byte1 = 0x05;
0000ab e015      	LDI  R17,LOW(5)
                 ; 0000 004F             break;
0000ac c035      	RJMP _0x10
                 ; 0000 0050         }
                 ; 0000 0051         case    1:
                 _0x11:
0000ad 30e1      	CPI  R30,LOW(0x1)
0000ae e0a0      	LDI  R26,HIGH(0x1)
0000af 07fa      	CPC  R31,R26
0000b0 f411      	BRNE _0x12
                 ; 0000 0052         {
                 ; 0000 0053             byte1 = 0x7D;
0000b1 e71d      	LDI  R17,LOW(125)
                 ; 0000 0054             break;
0000b2 c02f      	RJMP _0x10
                 ; 0000 0055         }
                 ; 0000 0056         case    2:
                 _0x12:
0000b3 30e2      	CPI  R30,LOW(0x2)
0000b4 e0a0      	LDI  R26,HIGH(0x2)
0000b5 07fa      	CPC  R31,R26
0000b6 f411      	BRNE _0x13
                 ; 0000 0057         {
                 ; 0000 0058             byte1 = 0x46;
0000b7 e416      	LDI  R17,LOW(70)
                 ; 0000 0059             break;
0000b8 c029      	RJMP _0x10
                 ; 0000 005A         }
                 ; 0000 005B         case    3:
                 _0x13:
0000b9 30e3      	CPI  R30,LOW(0x3)
0000ba e0a0      	LDI  R26,HIGH(0x3)
0000bb 07fa      	CPC  R31,R26
0000bc f411      	BRNE _0x14
                 ; 0000 005C         {
                 ; 0000 005D             byte1 = 0x54;
0000bd e514      	LDI  R17,LOW(84)
                 ; 0000 005E             break;
0000be c023      	RJMP _0x10
                 ; 0000 005F         }
                 ; 0000 0060         case    4:
                 _0x14:
0000bf 30e4      	CPI  R30,LOW(0x4)
0000c0 e0a0      	LDI  R26,HIGH(0x4)
0000c1 07fa      	CPC  R31,R26
0000c2 f411      	BRNE _0x15
                 ; 0000 0061         {
                 ; 0000 0062             byte1 = 0x3C;
0000c3 e31c      	LDI  R17,LOW(60)
                 ; 0000 0063             break;
0000c4 c01d      	RJMP _0x10
                 ; 0000 0064         }
                 ; 0000 0065         case    5:
                 _0x15:
0000c5 30e5      	CPI  R30,LOW(0x5)
0000c6 e0a0      	LDI  R26,HIGH(0x5)
0000c7 07fa      	CPC  R31,R26
0000c8 f411      	BRNE _0x16
                 ; 0000 0066         {
                 ; 0000 0067             byte1 = 0x94;
0000c9 e914      	LDI  R17,LOW(148)
                 ; 0000 0068             break;
0000ca c017      	RJMP _0x10
                 ; 0000 0069         }
                 ; 0000 006A         case    6:
                 _0x16:
0000cb 30e6      	CPI  R30,LOW(0x6)
0000cc e0a0      	LDI  R26,HIGH(0x6)
0000cd 07fa      	CPC  R31,R26
0000ce f411      	BRNE _0x17
                 ; 0000 006B         {
                 ; 0000 006C             byte1 = 0x84;
0000cf e814      	LDI  R17,LOW(132)
                 ; 0000 006D             break;
0000d0 c011      	RJMP _0x10
                 ; 0000 006E         }
                 ; 0000 006F         case    7:
                 _0x17:
0000d1 30e7      	CPI  R30,LOW(0x7)
0000d2 e0a0      	LDI  R26,HIGH(0x7)
0000d3 07fa      	CPC  R31,R26
0000d4 f411      	BRNE _0x18
                 ; 0000 0070         {
                 ; 0000 0071             byte1 = 0x5D;
0000d5 e51d      	LDI  R17,LOW(93)
                 ; 0000 0072             break;
0000d6 c00b      	RJMP _0x10
                 ; 0000 0073         }
                 ; 0000 0074         case    8:
                 _0x18:
0000d7 30e8      	CPI  R30,LOW(0x8)
0000d8 e0a0      	LDI  R26,HIGH(0x8)
0000d9 07fa      	CPC  R31,R26
0000da f411      	BRNE _0x19
                 ; 0000 0075         {
                 ; 0000 0076             byte1 = 0x04;
0000db e014      	LDI  R17,LOW(4)
                 ; 0000 0077             break;
0000dc c005      	RJMP _0x10
                 ; 0000 0078         }
                 ; 0000 0079         case    9:
                 _0x19:
0000dd 30e9      	CPI  R30,LOW(0x9)
0000de e0a0      	LDI  R26,HIGH(0x9)
0000df 07fa      	CPC  R31,R26
0000e0 f409      	BRNE _0x10
                 ; 0000 007A         {
                 ; 0000 007B             byte1 = 0x14;
0000e1 e114      	LDI  R17,LOW(20)
                 ; 0000 007C             break;
                 ; 0000 007D         }
                 ; 0000 007E     }
                 _0x10:
                 ; 0000 007F 
                 ; 0000 0080 
                 ; 0000 0081     switch(num_led)
0000e2 81eb      	LDD  R30,Y+3
0000e3 e0f0      	LDI  R31,0
                 ; 0000 0082     {
                 ; 0000 0083         case    1:
0000e4 30e1      	CPI  R30,LOW(0x1)
0000e5 e0a0      	LDI  R26,HIGH(0x1)
0000e6 07fa      	CPC  R31,R26
0000e7 f411      	BRNE _0x1E
                 ; 0000 0084         {
                 ; 0000 0085             byte2 = 0xFD;
0000e8 ef0d      	LDI  R16,LOW(253)
                 ; 0000 0086             break;
0000e9 c019      	RJMP _0x1D
                 ; 0000 0087         }
                 ; 0000 0088         case    2:
                 _0x1E:
0000ea 30e2      	CPI  R30,LOW(0x2)
0000eb e0a0      	LDI  R26,HIGH(0x2)
0000ec 07fa      	CPC  R31,R26
0000ed f411      	BRNE _0x1F
                 ; 0000 0089         {
                 ; 0000 008A             byte2 = 0xFB;
0000ee ef0b      	LDI  R16,LOW(251)
                 ; 0000 008B             break;
0000ef c013      	RJMP _0x1D
                 ; 0000 008C         }
                 ; 0000 008D         case    3:
                 _0x1F:
0000f0 30e3      	CPI  R30,LOW(0x3)
0000f1 e0a0      	LDI  R26,HIGH(0x3)
0000f2 07fa      	CPC  R31,R26
0000f3 f419      	BRNE _0x20
                 ; 0000 008E         {
                 ; 0000 008F             byte2 = 0xF7;
0000f4 ef07      	LDI  R16,LOW(247)
                 ; 0000 0090             byte1 &= 0xFB;
0000f5 7f1b      	ANDI R17,LOW(251)
                 ; 0000 0091             break;
0000f6 c00c      	RJMP _0x1D
                 ; 0000 0092         }
                 ; 0000 0093         case    4:
                 _0x20:
0000f7 30e4      	CPI  R30,LOW(0x4)
0000f8 e0a0      	LDI  R26,HIGH(0x4)
0000f9 07fa      	CPC  R31,R26
0000fa f411      	BRNE _0x21
                 ; 0000 0094         {
                 ; 0000 0095             byte2 = 0xDF;
0000fb ed0f      	LDI  R16,LOW(223)
                 ; 0000 0096             break;
0000fc c006      	RJMP _0x1D
                 ; 0000 0097         }
                 ; 0000 0098         case    5:
                 _0x21:
0000fd 30e5      	CPI  R30,LOW(0x5)
0000fe e0a0      	LDI  R26,HIGH(0x5)
0000ff 07fa      	CPC  R31,R26
000100 f411      	BRNE _0x1D
                 ; 0000 0099         {
                 ; 0000 009A               byte2 = 0xBF;
000101 eb0f      	LDI  R16,LOW(191)
                 ; 0000 009B               byte1 = data;
000102 811a      	LDD  R17,Y+2
                 ; 0000 009C               break;
                 ; 0000 009D         }
                 ; 0000 009E     }
                 _0x1D:
                 ; 0000 009F 
                 ; 0000 00A0     SPI_SENDBYTE(byte2,0);
000103 930a      	ST   -Y,R16
000104 e0a0      	LDI  R26,LOW(0)
000105 d07a      	RCALL _SPI_SENDBYTE
                 ; 0000 00A1     SPI_SENDBYTE(byte1,1);
000106 931a      	ST   -Y,R17
000107 e0a1      	LDI  R26,LOW(1)
000108 d077      	RCALL _SPI_SENDBYTE
                 ; 0000 00A2 }
000109 d0ac      	RCALL __LOADLOCR2
00010a 9624      	ADIW R28,4
00010b 9508      	RET
                 ; .FEND
                 ;
                 ;void LED_SELECT(unsigned char      led)
                 ; 0000 00A5 {
                 _LED_SELECT:
                 ; .FSTART _LED_SELECT
                 ; 0000 00A6       switch(led)
00010c 93aa      	ST   -Y,R26
                 ;	led -> Y+0
00010d 81e8      	LD   R30,Y
00010e e0f0      	LDI  R31,0
                 ; 0000 00A7       {
                 ; 0000 00A8             case RS:
00010f 30e1      	CPI  R30,LOW(0x1)
000110 e0a0      	LDI  R26,HIGH(0x1)
000111 07fa      	CPC  R31,R26
000112 f411      	BRNE _0x26
                 ; 0000 00A9             {
                 ; 0000 00AA                   data_single_led = 0xDF;
000113 edef      	LDI  R30,LOW(223)
000114 c01d      	RJMP _0x3B
                 ; 0000 00AB                   break;
                 ; 0000 00AC             }
                 ; 0000 00AD             case ST:
                 _0x26:
000115 30e2      	CPI  R30,LOW(0x2)
000116 e0a0      	LDI  R26,HIGH(0x2)
000117 07fa      	CPC  R31,R26
000118 f411      	BRNE _0x27
                 ; 0000 00AE             {
                 ; 0000 00AF                   data_single_led = 0xEF;
000119 eeef      	LDI  R30,LOW(239)
00011a c017      	RJMP _0x3B
                 ; 0000 00B0                   break;
                 ; 0000 00B1             }
                 ; 0000 00B2             case TR:
                 _0x27:
00011b 30e3      	CPI  R30,LOW(0x3)
00011c e0a0      	LDI  R26,HIGH(0x3)
00011d 07fa      	CPC  R31,R26
00011e f411      	BRNE _0x28
                 ; 0000 00B3             {
                 ; 0000 00B4                   data_single_led = 0xF7;
00011f efe7      	LDI  R30,LOW(247)
000120 c011      	RJMP _0x3B
                 ; 0000 00B5                   break;
                 ; 0000 00B6             }
                 ; 0000 00B7             case RN:
                 _0x28:
000121 30e4      	CPI  R30,LOW(0x4)
000122 e0a0      	LDI  R26,HIGH(0x4)
000123 07fa      	CPC  R31,R26
000124 f411      	BRNE _0x29
                 ; 0000 00B8             {
                 ; 0000 00B9                   data_single_led = 0xFB;
000125 efeb      	LDI  R30,LOW(251)
000126 c00b      	RJMP _0x3B
                 ; 0000 00BA                   break;
                 ; 0000 00BB             }
                 ; 0000 00BC             case SN:
                 _0x29:
000127 30e5      	CPI  R30,LOW(0x5)
000128 e0a0      	LDI  R26,HIGH(0x5)
000129 07fa      	CPC  R31,R26
00012a f411      	BRNE _0x2A
                 ; 0000 00BD             {
                 ; 0000 00BE                   data_single_led = 0xFD;
00012b efed      	LDI  R30,LOW(253)
00012c c005      	RJMP _0x3B
                 ; 0000 00BF                   break;
                 ; 0000 00C0             }
                 ; 0000 00C1             case TN:
                 _0x2A:
00012d 30e6      	CPI  R30,LOW(0x6)
00012e e0a0      	LDI  R26,HIGH(0x6)
00012f 07fa      	CPC  R31,R26
000130 f411      	BRNE _0x25
                 ; 0000 00C2             {
                 ; 0000 00C3                   data_single_led = 0xFE;
000131 efee      	LDI  R30,LOW(254)
                 _0x3B:
000132 2e7e      	MOV  R7,R30
                 ; 0000 00C4                   break;
                 ; 0000 00C5             }
                 ; 0000 00C6       }
                 _0x25:
                 ; 0000 00C7 }
000133 9621      	ADIW R28,1
000134 9508      	RET
                 ; .FEND
                 ;
                 ;void  READ_SELECT(void)
                 ; 0000 00CA {
                 _READ_SELECT:
                 ; .FSTART _READ_SELECT
                 ; 0000 00CB       if(!RS_INPUT)
000135 9998      	SBIC 0x13,0
000136 c002      	RJMP _0x2C
                 ; 0000 00CC       {
                 ; 0000 00CD             LED_SELECT(RS);
000137 e0a1      	LDI  R26,LOW(1)
000138 c013      	RJMP _0x3C
                 ; 0000 00CE       }
                 ; 0000 00CF       else if(!ST_INPUT)
                 _0x2C:
000139 9999      	SBIC 0x13,1
00013a c002      	RJMP _0x2E
                 ; 0000 00D0       {
                 ; 0000 00D1             LED_SELECT(ST);
00013b e0a2      	LDI  R26,LOW(2)
00013c c00f      	RJMP _0x3C
                 ; 0000 00D2       }
                 ; 0000 00D3       else if(!TR_INPUT)
                 _0x2E:
00013d 999a      	SBIC 0x13,2
00013e c002      	RJMP _0x30
                 ; 0000 00D4       {
                 ; 0000 00D5             LED_SELECT(TR);
00013f e0a3      	LDI  R26,LOW(3)
000140 c00b      	RJMP _0x3C
                 ; 0000 00D6       }
                 ; 0000 00D7       else if(!RN_INPUT)
                 _0x30:
000141 999b      	SBIC 0x13,3
000142 c002      	RJMP _0x32
                 ; 0000 00D8       {
                 ; 0000 00D9             LED_SELECT(RN);
000143 e0a4      	LDI  R26,LOW(4)
000144 c007      	RJMP _0x3C
                 ; 0000 00DA       }
                 ; 0000 00DB       else if(!SN_INPUT)
                 _0x32:
000145 999c      	SBIC 0x13,4
000146 c002      	RJMP _0x34
                 ; 0000 00DC       {
                 ; 0000 00DD             LED_SELECT(SN);
000147 e0a5      	LDI  R26,LOW(5)
000148 c003      	RJMP _0x3C
                 ; 0000 00DE       }
                 ; 0000 00DF       else if(!TN_INPUT)
                 _0x34:
000149 999d      	SBIC 0x13,5
00014a c002      	RJMP _0x36
                 ; 0000 00E0       {
                 ; 0000 00E1             LED_SELECT(TN);
00014b e0a6      	LDI  R26,LOW(6)
                 _0x3C:
00014c dfbf      	RCALL _LED_SELECT
                 ; 0000 00E2       }
                 ; 0000 00E3 }
                 _0x36:
00014d 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00E6 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00E7 // Declare your local variables here
                 ; 0000 00E8 
                 ; 0000 00E9 // Input/Output Ports initialization
                 ; 0000 00EA // Port B initialization
                 ; 0000 00EB // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=In Bit1=Out Bit0=In
                 ; 0000 00EC DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (0<<DDB0);
00014e e2ea      	LDI  R30,LOW(42)
00014f bbe7      	OUT  0x17,R30
                 ; 0000 00ED // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=T Bit1=0 Bit0=T
                 ; 0000 00EE PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000150 e0e0      	LDI  R30,LOW(0)
000151 bbe8      	OUT  0x18,R30
                 ; 0000 00EF 
                 ; 0000 00F0 // Port C initialization
                 ; 0000 00F1 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00F2 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000152 bbe4      	OUT  0x14,R30
                 ; 0000 00F3 // State: Bit6=T Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 00F4 PORTC=(0<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
000153 e3ef      	LDI  R30,LOW(63)
000154 bbe5      	OUT  0x15,R30
                 ; 0000 00F5 
                 ; 0000 00F6 // Port D initialization
                 ; 0000 00F7 // Function: Bit7=Out Bit6=Out Bit5=In Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00F8 DDRD=(1<<DDD7) | (1<<DDD6) | (0<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000155 edef      	LDI  R30,LOW(223)
000156 bbe1      	OUT  0x11,R30
                 ; 0000 00F9 // State: Bit7=0 Bit6=0 Bit5=T Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 00FA PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000157 e0e0      	LDI  R30,LOW(0)
000158 bbe2      	OUT  0x12,R30
                 ; 0000 00FB 
                 ; 0000 00FC // Timer/Counter 0 initialization
                 ; 0000 00FD // Clock source: System Clock
                 ; 0000 00FE // Clock value: Timer 0 Stopped
                 ; 0000 00FF TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
000159 bfe3      	OUT  0x33,R30
                 ; 0000 0100 TCNT0=0x00;
00015a bfe2      	OUT  0x32,R30
                 ; 0000 0101 
                 ; 0000 0102 // Timer/Counter 1 initialization
                 ; 0000 0103 // Clock source: System Clock
                 ; 0000 0104 // Clock value: 1382,400 kHz
                 ; 0000 0105 // Mode: Normal top=0xFFFF
                 ; 0000 0106 // OC1A output: Disconnected
                 ; 0000 0107 // OC1B output: Disconnected
                 ; 0000 0108 // Noise Canceler: Off
                 ; 0000 0109 // Input Capture on Falling Edge
                 ; 0000 010A // Timer Period: 5,9997 ms
                 ; 0000 010B // Timer1 Overflow Interrupt: On
                 ; 0000 010C // Input Capture Interrupt: Off
                 ; 0000 010D // Compare A Match Interrupt: Off
                 ; 0000 010E // Compare B Match Interrupt: Off
                 ; 0000 010F TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00015b bdef      	OUT  0x2F,R30
                 ; 0000 0110 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
00015c e0e2      	LDI  R30,LOW(2)
00015d bdee      	OUT  0x2E,R30
                 ; 0000 0111 TCNT1H=0xDF;
00015e edef      	LDI  R30,LOW(223)
00015f bded      	OUT  0x2D,R30
                 ; 0000 0112 TCNT1L=0x9A;
000160 e9ea      	LDI  R30,LOW(154)
000161 bdec      	OUT  0x2C,R30
                 ; 0000 0113 ICR1H=0x00;
000162 e0e0      	LDI  R30,LOW(0)
000163 bde7      	OUT  0x27,R30
                 ; 0000 0114 ICR1L=0x00;
000164 bde6      	OUT  0x26,R30
                 ; 0000 0115 OCR1AH=0x00;
000165 bdeb      	OUT  0x2B,R30
                 ; 0000 0116 OCR1AL=0x00;
000166 bdea      	OUT  0x2A,R30
                 ; 0000 0117 OCR1BH=0x00;
000167 bde9      	OUT  0x29,R30
                 ; 0000 0118 OCR1BL=0x00;
000168 bde8      	OUT  0x28,R30
                 ; 0000 0119 
                 ; 0000 011A // Timer/Counter 2 initialization
                 ; 0000 011B // Clock source: System Clock
                 ; 0000 011C // Clock value: Timer2 Stopped
                 ; 0000 011D // Mode: Normal top=0xFF
                 ; 0000 011E // OC2 output: Disconnected
                 ; 0000 011F ASSR=0<<AS2;
000169 bde2      	OUT  0x22,R30
                 ; 0000 0120 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00016a bde5      	OUT  0x25,R30
                 ; 0000 0121 TCNT2=0x00;
00016b bde4      	OUT  0x24,R30
                 ; 0000 0122 OCR2=0x00;
00016c bde3      	OUT  0x23,R30
                 ; 0000 0123 
                 ; 0000 0124 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0125 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<TOIE0);
00016d e0e4      	LDI  R30,LOW(4)
00016e bfe9      	OUT  0x39,R30
                 ; 0000 0126 
                 ; 0000 0127 // External Interrupt(s) initialization
                 ; 0000 0128 // INT0: Off
                 ; 0000 0129 // INT1: Off
                 ; 0000 012A MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00016f e0e0      	LDI  R30,LOW(0)
000170 bfe5      	OUT  0x35,R30
                 ; 0000 012B 
                 ; 0000 012C // USART initialization
                 ; 0000 012D // USART disabled
                 ; 0000 012E UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000171 b9ea      	OUT  0xA,R30
                 ; 0000 012F 
                 ; 0000 0130 // Analog Comparator initialization
                 ; 0000 0131 // Analog Comparator: Off
                 ; 0000 0132 // The Analog Comparator's positive input is
                 ; 0000 0133 // connected to the AIN0 pin
                 ; 0000 0134 // The Analog Comparator's negative input is
                 ; 0000 0135 // connected to the AIN1 pin
                 ; 0000 0136 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000172 e8e0      	LDI  R30,LOW(128)
000173 b9e8      	OUT  0x8,R30
                 ; 0000 0137 SFIOR=(0<<ACME);
000174 e0e0      	LDI  R30,LOW(0)
000175 bfe0      	OUT  0x30,R30
                 ; 0000 0138 
                 ; 0000 0139 // ADC initialization
                 ; 0000 013A // ADC disabled
                 ; 0000 013B ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000176 b9e6      	OUT  0x6,R30
                 ; 0000 013C 
                 ; 0000 013D // SPI initialization
                 ; 0000 013E // SPI disabled
                 ; 0000 013F SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000177 b9ed      	OUT  0xD,R30
                 ; 0000 0140 
                 ; 0000 0141 // TWI initialization
                 ; 0000 0142 // TWI disabled
                 ; 0000 0143 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000178 bfe6      	OUT  0x36,R30
                 ; 0000 0144 
                 ; 0000 0145 // Global enable interrupts
                 ; 0000 0146 #asm("sei")
000179 9478      	sei
                 ; 0000 0147 data = 1234;
00017a ede2      	LDI  R30,LOW(1234)
00017b e0f4      	LDI  R31,HIGH(1234)
00017c 014f      	MOVW R8,R30
                 ; 0000 0148 //LED_SELECT(SN);
                 ; 0000 0149 while (1)
                 _0x37:
                 ; 0000 014A       {
                 ; 0000 014B       // Place your code here
                 ; 0000 014C             READ_SELECT();
00017d dfb7      	RCALL _READ_SELECT
                 ; 0000 014D 
                 ; 0000 014E 
                 ; 0000 014F       }
00017e cffe      	RJMP _0x37
                 ; 0000 0150 }
                 _0x3A:
00017f cfff      	RJMP _0x3A
                 ; .FEND
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;void    SPI_SENDBYTE(unsigned char  data,unsigned char action)
                 ; 0001 0005 {
                 
                 	.CSEG
                 _SPI_SENDBYTE:
                 ; .FSTART _SPI_SENDBYTE
                 ; 0001 0006     unsigned char   i;
                 ; 0001 0007     for(i=0;i<8;i++)
000180 93aa      	ST   -Y,R26
000181 931a      	ST   -Y,R17
                 ;	data -> Y+2
                 ;	action -> Y+1
                 ;	i -> R17
000182 e010      	LDI  R17,LOW(0)
                 _0x20004:
000183 3018      	CPI  R17,8
000184 f480      	BRSH _0x20005
                 ; 0001 0008     {
                 ; 0001 0009         if((data & 0x80) == 0x80)    DO_SPI_MOSI = 1;
000185 81ea      	LDD  R30,Y+2
000186 78e0      	ANDI R30,LOW(0x80)
000187 38e0      	CPI  R30,LOW(0x80)
000188 f411      	BRNE _0x20006
000189 9ac3      	SBI  0x18,3
                 ; 0001 000A         else    DO_SPI_MOSI = 0;
00018a c001      	RJMP _0x20009
                 _0x20006:
00018b 98c3      	CBI  0x18,3
                 ; 0001 000B         data <<= 1;
                 _0x20009:
00018c 81ea      	LDD  R30,Y+2
00018d e0f0      	LDI  R31,0
00018e 0fee      	LSL  R30
00018f 1fff      	ROL  R31
000190 83ea      	STD  Y+2,R30
                 ; 0001 000C         DO_SPI_SCK = 1;
000191 9ac5      	SBI  0x18,5
                 ; 0001 000D         DO_SPI_SCK = 0;
000192 98c5      	CBI  0x18,5
                 ; 0001 000E     }
000193 5f1f      	SUBI R17,-1
000194 cfee      	RJMP _0x20004
                 _0x20005:
                 ; 0001 000F     if(action)
000195 81e9      	LDD  R30,Y+1
000196 30e0      	CPI  R30,0
000197 f011      	BREQ _0x20010
                 ; 0001 0010     {
                 ; 0001 0011         DO_SPI_LATCH = 1;
000198 9ac1      	SBI  0x18,1
                 ; 0001 0012         DO_SPI_LATCH = 0;
000199 98c1      	CBI  0x18,1
                 ; 0001 0013     }
                 ; 0001 0014 }
                 _0x20010:
00019a 8118      	LDD  R17,Y+0
00019b 9623      	ADIW R28,3
00019c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 __DIVW21U:
00019d 2400      	CLR  R0
00019e 2411      	CLR  R1
00019f e190      	LDI  R25,16
                 __DIVW21U1:
0001a0 0faa      	LSL  R26
0001a1 1fbb      	ROL  R27
0001a2 1c00      	ROL  R0
0001a3 1c11      	ROL  R1
0001a4 1a0e      	SUB  R0,R30
0001a5 0a1f      	SBC  R1,R31
0001a6 f418      	BRCC __DIVW21U2
0001a7 0e0e      	ADD  R0,R30
0001a8 1e1f      	ADC  R1,R31
0001a9 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001aa 60a1      	SBR  R26,1
                 __DIVW21U3:
0001ab 959a      	DEC  R25
0001ac f799      	BRNE __DIVW21U1
0001ad 01fd      	MOVW R30,R26
0001ae 01d0      	MOVW R26,R0
0001af 9508      	RET
                 
                 __MODW21U:
0001b0 dfec      	RCALL __DIVW21U
0001b1 01fd      	MOVW R30,R26
0001b2 9508      	RET
                 
                 __SAVELOCR2:
0001b3 931a      	ST   -Y,R17
0001b4 930a      	ST   -Y,R16
0001b5 9508      	RET
                 
                 __LOADLOCR2:
0001b6 8119      	LDD  R17,Y+1
0001b7 8108      	LD   R16,Y
0001b8 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8A register use summary:
r0 :  11 r1 :   7 r2 :   0 r3 :   0 r4 :   6 r5 :   9 r6 :   0 r7 :   2 
r8 :   5 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   9 r17:  21 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:   9 r25:   6 r26:  68 r27:   5 r28:   4 r29:   1 r30: 138 r31:  39 
x  :   3 y  :  44 z  :   7 
Registers used: 22 out of 35 (62.9%)

ATmega8A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   3 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  31 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   3 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   4 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   6 
cpc   :  20 cpi   :  23 cpse  :   0 dec   :   2 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :   1 ld    :  14 ldd   :   8 ldi   : 105 lds   :   0 lpm   :   7 
lsl   :   2 lsr   :   0 mov   :   8 movw  :  13 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  39 
pop   :   0 push  :   0 rcall :  14 ret   :   8 reti  :   1 rjmp  :  59 
rol   :   4 ror   :   0 sbc   :   1 sbci  :   0 sbi   :   3 sbic  :   6 
sbis  :   0 sbiw  :   4 sbr   :   1 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  24 std   :   1 
sts   :   0 sub   :   1 subi  :   1 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 40 out of 114 (35.1%)

ATmega8A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000372    858     24    882    8192  10.8%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
