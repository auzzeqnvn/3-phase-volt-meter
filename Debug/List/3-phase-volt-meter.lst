
AVRASM ver. 2.1.30  D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm Tue Nov 27 11:04:54 2018

D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1086): warning: Register r7 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1087): warning: Register r6 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1088): warning: Register r9 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1089): warning: Register r10 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1090): warning: Register r11 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1091): warning: Register r8 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1092): warning: Register r13 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1093): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8A
                 ;Program type           : Application
                 ;Clock frequency        : 11,059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Speed
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8A
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _led_cnt=R7
                 	.DEF _data_led=R6
                 	.DEF _data_single_led=R9
                 	.DEF _data=R10
                 	.DEF _data_msb=R11
                 	.DEF _buff_cnt=R8
                 	.DEF _loop_cnt=R13
                 	.DEF _loop_read_cnt=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c01a      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c03e      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000013 0001
000014 00ff      	.DB  0x1,0x0,0xFF,0x0
000015 0000
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1125): warning: .cseg .db misalignment - padding zero byte
000016 0000      	.DB  0x0,0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
000017 0007      	.DW  0x07
000018 0007      	.DW  0x07
000019 0026      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00001a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00001b 94f8      	CLI
00001c 27ee      	CLR  R30
00001d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00001e e0f1      	LDI  R31,1
00001f bffb      	OUT  GICR,R31
000020 bfeb      	OUT  GICR,R30
000021 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000022 e08d      	LDI  R24,(14-2)+1
000023 e0a2      	LDI  R26,2
000024 27bb      	CLR  R27
                 __CLEAR_REG:
000025 93ed      	ST   X+,R30
000026 958a      	DEC  R24
000027 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000028 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000029 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00002a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00002b 93ed      	ST   X+,R30
00002c 9701      	SBIW R24,1
00002d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00002e e2ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00002f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000030 9185      	LPM  R24,Z+
000031 9195      	LPM  R25,Z+
000032 9700      	SBIW R24,0
000033 f061      	BREQ __GLOBAL_INI_END
000034 91a5      	LPM  R26,Z+
000035 91b5      	LPM  R27,Z+
000036 9005      	LPM  R0,Z+
000037 9015      	LPM  R1,Z+
000038 01bf      	MOVW R22,R30
000039 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00003a 9005      	LPM  R0,Z+
00003b 920d      	ST   X+,R0
00003c 9701      	SBIW R24,1
00003d f7e1      	BRNE __GLOBAL_INI_LOOP
00003e 01fb      	MOVW R30,R22
00003f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000040 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000041 bfed      	OUT  SPL,R30
000042 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000043 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000044 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000045 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000046 c6ea      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : 3 phase Volt Meter
                 ;Version : 1.0
                 ;Date    : 15/11/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega8L
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 11,059200 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include "delay.h"
                 ;#include "SPI_SOFTWARE.h"
                 ;#include "ADE7753.h"
                 ;
                 ;#define     RS    1
                 ;#define     ST    2
                 ;#define     TR    3
                 ;#define     RN    4
                 ;#define     SN    5
                 ;#define     TN    6
                 ;
                 ;#define     RS_INPUT    PINC.0
                 ;#define     ST_INPUT    PINC.1
                 ;#define     TR_INPUT    PINC.2
                 ;#define     RN_INPUT    PINC.3
                 ;#define     SN_INPUT    PINC.4
                 ;#define     TN_INPUT    PINC.5
                 ;
                 ;#define     SELECT_S0   PORTD.1
                 ;#define     SELECT_S1   PORTD.2
                 ;#define     SELECT_S2   PORTD.3
                 ;
                 ;#define     BUZZER      PORTD.0
                 ;
                 ;#define     BUZZER_ON   BUZZER = 1
                 ;#define     BUZZER_OFF   BUZZER = 0
                 ;
                 ;//global variables here
                 ;unsigned char     led_cnt = 1;
                 ;unsigned char     data_led;
                 ;unsigned char     data_single_led = 0xff;
                 ;unsigned int      data = 0;
                 ;unsigned long      data_temp = 0;
                 ;unsigned long int      data_buff[40];
                 ;unsigned char     buff_cnt = 0;
                 ;unsigned char     loop_cnt = 0;
                 ;unsigned char     loop_read_cnt = 0;
                 ;
                 ;
                 ;
                 ;void    SCAN_LED(unsigned char num_led,unsigned char    data_in);
                 ;void  READ_SELECT(void);
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0045 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000047 920a      	ST   -Y,R0
000048 921a      	ST   -Y,R1
000049 92fa      	ST   -Y,R15
00004a 936a      	ST   -Y,R22
00004b 937a      	ST   -Y,R23
00004c 938a      	ST   -Y,R24
00004d 939a      	ST   -Y,R25
00004e 93aa      	ST   -Y,R26
00004f 93ba      	ST   -Y,R27
000050 93ea      	ST   -Y,R30
000051 93fa      	ST   -Y,R31
000052 b7ef      	IN   R30,SREG
000053 93ea      	ST   -Y,R30
                 ; 0000 0046 // Reinitialize Timer1 value
                 ; 0000 0047       TCNT1H=0xE800 >> 8;
000054 eee8      	LDI  R30,LOW(232)
000055 bded      	OUT  0x2D,R30
                 ; 0000 0048       TCNT1L=0xE800 & 0xff;
000056 e0e0      	LDI  R30,LOW(0)
000057 bdec      	OUT  0x2C,R30
                 ; 0000 0049 
                 ; 0000 004A       if(led_cnt == 1)  data_led = data/1000;
000058 e0e1      	LDI  R30,LOW(1)
000059 15e7      	CP   R30,R7
00005a f431      	BRNE _0x3
00005b 01d5      	MOVW R26,R10
00005c eee8      	LDI  R30,LOW(1000)
00005d e0f3      	LDI  R31,HIGH(1000)
00005e d8b1      	RCALL __DIVW21U
00005f 2e6e      	MOV  R6,R30
                 ; 0000 004B       else if(led_cnt == 2)  data_led = data%1000/100;
000060 c027      	RJMP _0x4
                 _0x3:
000061 e0e2      	LDI  R30,LOW(2)
000062 15e7      	CP   R30,R7
000063 f451      	BRNE _0x5
000064 01d5      	MOVW R26,R10
000065 eee8      	LDI  R30,LOW(1000)
000066 e0f3      	LDI  R31,HIGH(1000)
000067 d8e0      	RCALL __MODW21U
000068 01df      	MOVW R26,R30
000069 e6e4      	LDI  R30,LOW(100)
00006a e0f0      	LDI  R31,HIGH(100)
00006b d8a4      	RCALL __DIVW21U
00006c 2e6e      	MOV  R6,R30
                 ; 0000 004C       else if(led_cnt == 3)  data_led = data%100/10;
00006d c01a      	RJMP _0x6
                 _0x5:
00006e e0e3      	LDI  R30,LOW(3)
00006f 15e7      	CP   R30,R7
000070 f451      	BRNE _0x7
000071 01d5      	MOVW R26,R10
000072 e6e4      	LDI  R30,LOW(100)
000073 e0f0      	LDI  R31,HIGH(100)
000074 d8d3      	RCALL __MODW21U
000075 01df      	MOVW R26,R30
000076 e0ea      	LDI  R30,LOW(10)
000077 e0f0      	LDI  R31,HIGH(10)
000078 d897      	RCALL __DIVW21U
000079 2e6e      	MOV  R6,R30
                 ; 0000 004D       else if(led_cnt == 4)  data_led = data%10;
00007a c00d      	RJMP _0x8
                 _0x7:
00007b e0e4      	LDI  R30,LOW(4)
00007c 15e7      	CP   R30,R7
00007d f431      	BRNE _0x9
00007e 01d5      	MOVW R26,R10
00007f e0ea      	LDI  R30,LOW(10)
000080 e0f0      	LDI  R31,HIGH(10)
000081 d8c6      	RCALL __MODW21U
000082 2e6e      	MOV  R6,R30
                 ; 0000 004E       else if(led_cnt == 5)   data_led = data_single_led;
000083 c004      	RJMP _0xA
                 _0x9:
000084 e0e5      	LDI  R30,LOW(5)
000085 15e7      	CP   R30,R7
000086 f409      	BRNE _0xB
000087 2c69      	MOV  R6,R9
                 ; 0000 004F 
                 ; 0000 0050       SCAN_LED(led_cnt++,data_led);
                 _0xB:
                 _0xA:
                 _0x8:
                 _0x6:
                 _0x4:
000088 2de7      	MOV  R30,R7
000089 9473      	INC  R7
00008a 93ea      	ST   -Y,R30
00008b 2da6      	MOV  R26,R6
00008c d013      	RCALL _SCAN_LED
                 ; 0000 0051       if(led_cnt > 5)   led_cnt = 1;
00008d e0e5      	LDI  R30,LOW(5)
00008e 15e7      	CP   R30,R7
00008f f410      	BRSH _0xC
000090 e0e1      	LDI  R30,LOW(1)
000091 2e7e      	MOV  R7,R30
                 ; 0000 0052 }
                 _0xC:
000092 91e9      	LD   R30,Y+
000093 bfef      	OUT  SREG,R30
000094 91f9      	LD   R31,Y+
000095 91e9      	LD   R30,Y+
000096 91b9      	LD   R27,Y+
000097 91a9      	LD   R26,Y+
000098 9199      	LD   R25,Y+
000099 9189      	LD   R24,Y+
00009a 9179      	LD   R23,Y+
00009b 9169      	LD   R22,Y+
00009c 90f9      	LD   R15,Y+
00009d 9019      	LD   R1,Y+
00009e 9009      	LD   R0,Y+
00009f 9518      	RETI
                 ; .FEND
                 ;
                 ;void    SCAN_LED(unsigned char num_led,unsigned char    data_in)
                 ; 0000 0055 {
                 _SCAN_LED:
                 ; .FSTART _SCAN_LED
                 ; 0000 0056     unsigned char   byte1,byte2;
                 ; 0000 0057     byte1 = 0xFF;
0000a0 93aa      	ST   -Y,R26
0000a1 d8c5      	RCALL __SAVELOCR2
                 ;	num_led -> Y+3
                 ;	data_in -> Y+2
                 ;	byte1 -> R17
                 ;	byte2 -> R16
0000a2 ef1f      	LDI  R17,LOW(255)
                 ; 0000 0058     byte2 = 0;
0000a3 e000      	LDI  R16,LOW(0)
                 ; 0000 0059 
                 ; 0000 005A       switch(data_in)
0000a4 81ea      	LDD  R30,Y+2
0000a5 e0f0      	LDI  R31,0
                 ; 0000 005B       {
                 ; 0000 005C         case    0:
0000a6 9730      	SBIW R30,0
0000a7 f411      	BRNE _0x10
                 ; 0000 005D         {
                 ; 0000 005E             byte1 = 0x05;
0000a8 e015      	LDI  R17,LOW(5)
                 ; 0000 005F             break;
0000a9 c035      	RJMP _0xF
                 ; 0000 0060         }
                 ; 0000 0061         case    1:
                 _0x10:
0000aa 30e1      	CPI  R30,LOW(0x1)
0000ab e0a0      	LDI  R26,HIGH(0x1)
0000ac 07fa      	CPC  R31,R26
0000ad f411      	BRNE _0x11
                 ; 0000 0062         {
                 ; 0000 0063             byte1 = 0x7D;
0000ae e71d      	LDI  R17,LOW(125)
                 ; 0000 0064             break;
0000af c02f      	RJMP _0xF
                 ; 0000 0065         }
                 ; 0000 0066         case    2:
                 _0x11:
0000b0 30e2      	CPI  R30,LOW(0x2)
0000b1 e0a0      	LDI  R26,HIGH(0x2)
0000b2 07fa      	CPC  R31,R26
0000b3 f411      	BRNE _0x12
                 ; 0000 0067         {
                 ; 0000 0068             byte1 = 0x46;
0000b4 e416      	LDI  R17,LOW(70)
                 ; 0000 0069             break;
0000b5 c029      	RJMP _0xF
                 ; 0000 006A         }
                 ; 0000 006B         case    3:
                 _0x12:
0000b6 30e3      	CPI  R30,LOW(0x3)
0000b7 e0a0      	LDI  R26,HIGH(0x3)
0000b8 07fa      	CPC  R31,R26
0000b9 f411      	BRNE _0x13
                 ; 0000 006C         {
                 ; 0000 006D             byte1 = 0x54;
0000ba e514      	LDI  R17,LOW(84)
                 ; 0000 006E             break;
0000bb c023      	RJMP _0xF
                 ; 0000 006F         }
                 ; 0000 0070         case    4:
                 _0x13:
0000bc 30e4      	CPI  R30,LOW(0x4)
0000bd e0a0      	LDI  R26,HIGH(0x4)
0000be 07fa      	CPC  R31,R26
0000bf f411      	BRNE _0x14
                 ; 0000 0071         {
                 ; 0000 0072             byte1 = 0x3C;
0000c0 e31c      	LDI  R17,LOW(60)
                 ; 0000 0073             break;
0000c1 c01d      	RJMP _0xF
                 ; 0000 0074         }
                 ; 0000 0075         case    5:
                 _0x14:
0000c2 30e5      	CPI  R30,LOW(0x5)
0000c3 e0a0      	LDI  R26,HIGH(0x5)
0000c4 07fa      	CPC  R31,R26
0000c5 f411      	BRNE _0x15
                 ; 0000 0076         {
                 ; 0000 0077             byte1 = 0x94;
0000c6 e914      	LDI  R17,LOW(148)
                 ; 0000 0078             break;
0000c7 c017      	RJMP _0xF
                 ; 0000 0079         }
                 ; 0000 007A         case    6:
                 _0x15:
0000c8 30e6      	CPI  R30,LOW(0x6)
0000c9 e0a0      	LDI  R26,HIGH(0x6)
0000ca 07fa      	CPC  R31,R26
0000cb f411      	BRNE _0x16
                 ; 0000 007B         {
                 ; 0000 007C             byte1 = 0x84;
0000cc e814      	LDI  R17,LOW(132)
                 ; 0000 007D             break;
0000cd c011      	RJMP _0xF
                 ; 0000 007E         }
                 ; 0000 007F         case    7:
                 _0x16:
0000ce 30e7      	CPI  R30,LOW(0x7)
0000cf e0a0      	LDI  R26,HIGH(0x7)
0000d0 07fa      	CPC  R31,R26
0000d1 f411      	BRNE _0x17
                 ; 0000 0080         {
                 ; 0000 0081             byte1 = 0x5D;
0000d2 e51d      	LDI  R17,LOW(93)
                 ; 0000 0082             break;
0000d3 c00b      	RJMP _0xF
                 ; 0000 0083         }
                 ; 0000 0084         case    8:
                 _0x17:
0000d4 30e8      	CPI  R30,LOW(0x8)
0000d5 e0a0      	LDI  R26,HIGH(0x8)
0000d6 07fa      	CPC  R31,R26
0000d7 f411      	BRNE _0x18
                 ; 0000 0085         {
                 ; 0000 0086             byte1 = 0x04;
0000d8 e014      	LDI  R17,LOW(4)
                 ; 0000 0087             break;
0000d9 c005      	RJMP _0xF
                 ; 0000 0088         }
                 ; 0000 0089         case    9:
                 _0x18:
0000da 30e9      	CPI  R30,LOW(0x9)
0000db e0a0      	LDI  R26,HIGH(0x9)
0000dc 07fa      	CPC  R31,R26
0000dd f409      	BRNE _0xF
                 ; 0000 008A         {
                 ; 0000 008B             byte1 = 0x14;
0000de e114      	LDI  R17,LOW(20)
                 ; 0000 008C             break;
                 ; 0000 008D         }
                 ; 0000 008E     }
                 _0xF:
                 ; 0000 008F 
                 ; 0000 0090 
                 ; 0000 0091     switch(num_led)
0000df 81eb      	LDD  R30,Y+3
0000e0 e0f0      	LDI  R31,0
                 ; 0000 0092     {
                 ; 0000 0093         case    1:
0000e1 30e1      	CPI  R30,LOW(0x1)
0000e2 e0a0      	LDI  R26,HIGH(0x1)
0000e3 07fa      	CPC  R31,R26
0000e4 f411      	BRNE _0x1D
                 ; 0000 0094         {
                 ; 0000 0095             byte2 = 0xFD;
0000e5 ef0d      	LDI  R16,LOW(253)
                 ; 0000 0096             break;
0000e6 c019      	RJMP _0x1C
                 ; 0000 0097         }
                 ; 0000 0098         case    2:
                 _0x1D:
0000e7 30e2      	CPI  R30,LOW(0x2)
0000e8 e0a0      	LDI  R26,HIGH(0x2)
0000e9 07fa      	CPC  R31,R26
0000ea f411      	BRNE _0x1E
                 ; 0000 0099         {
                 ; 0000 009A             byte2 = 0xFB;
0000eb ef0b      	LDI  R16,LOW(251)
                 ; 0000 009B             break;
0000ec c013      	RJMP _0x1C
                 ; 0000 009C         }
                 ; 0000 009D         case    3:
                 _0x1E:
0000ed 30e3      	CPI  R30,LOW(0x3)
0000ee e0a0      	LDI  R26,HIGH(0x3)
0000ef 07fa      	CPC  R31,R26
0000f0 f419      	BRNE _0x1F
                 ; 0000 009E         {
                 ; 0000 009F             byte2 = 0xF7;
0000f1 ef07      	LDI  R16,LOW(247)
                 ; 0000 00A0             byte1 &= 0xFB;
0000f2 7f1b      	ANDI R17,LOW(251)
                 ; 0000 00A1             break;
0000f3 c00c      	RJMP _0x1C
                 ; 0000 00A2         }
                 ; 0000 00A3         case    4:
                 _0x1F:
0000f4 30e4      	CPI  R30,LOW(0x4)
0000f5 e0a0      	LDI  R26,HIGH(0x4)
0000f6 07fa      	CPC  R31,R26
0000f7 f411      	BRNE _0x20
                 ; 0000 00A4         {
                 ; 0000 00A5             byte2 = 0xDF;
0000f8 ed0f      	LDI  R16,LOW(223)
                 ; 0000 00A6             break;
0000f9 c006      	RJMP _0x1C
                 ; 0000 00A7         }
                 ; 0000 00A8         case    5:
                 _0x20:
0000fa 30e5      	CPI  R30,LOW(0x5)
0000fb e0a0      	LDI  R26,HIGH(0x5)
0000fc 07fa      	CPC  R31,R26
0000fd f411      	BRNE _0x1C
                 ; 0000 00A9         {
                 ; 0000 00AA               byte2 = 0xBF;
0000fe eb0f      	LDI  R16,LOW(191)
                 ; 0000 00AB               byte1 = data_in;
0000ff 811a      	LDD  R17,Y+2
                 ; 0000 00AC               break;
                 ; 0000 00AD         }
                 ; 0000 00AE     }
                 _0x1C:
                 ; 0000 00AF 
                 ; 0000 00B0     SPI_SENDBYTE(byte2,0);
000100 930a      	ST   -Y,R16
000101 e0a0      	LDI  R26,LOW(0)
000102 d6ce      	RCALL _SPI_SENDBYTE
                 ; 0000 00B1     SPI_SENDBYTE(byte1,1);
000103 931a      	ST   -Y,R17
000104 e0a1      	LDI  R26,LOW(1)
000105 d6cb      	RCALL _SPI_SENDBYTE
                 ; 0000 00B2 }
000106 d865      	RCALL __LOADLOCR2
000107 9624      	ADIW R28,4
000108 9508      	RET
                 ; .FEND
                 ;
                 ;void LED_SELECT(unsigned char      led)
                 ; 0000 00B5 {
                 _LED_SELECT:
                 ; .FSTART _LED_SELECT
                 ; 0000 00B6       switch(led)
000109 93aa      	ST   -Y,R26
                 ;	led -> Y+0
00010a 81e8      	LD   R30,Y
00010b e0f0      	LDI  R31,0
                 ; 0000 00B7       {
                 ; 0000 00B8             case RS:
00010c 30e1      	CPI  R30,LOW(0x1)
00010d e0a0      	LDI  R26,HIGH(0x1)
00010e 07fa      	CPC  R31,R26
00010f f411      	BRNE _0x25
                 ; 0000 00B9             {
                 ; 0000 00BA                   data_single_led = 0xDF;
000110 edef      	LDI  R30,LOW(223)
000111 c01d      	RJMP _0xEE
                 ; 0000 00BB                   break;
                 ; 0000 00BC             }
                 ; 0000 00BD             case ST:
                 _0x25:
000112 30e2      	CPI  R30,LOW(0x2)
000113 e0a0      	LDI  R26,HIGH(0x2)
000114 07fa      	CPC  R31,R26
000115 f411      	BRNE _0x26
                 ; 0000 00BE             {
                 ; 0000 00BF                   data_single_led = 0xEF;
000116 eeef      	LDI  R30,LOW(239)
000117 c017      	RJMP _0xEE
                 ; 0000 00C0                   break;
                 ; 0000 00C1             }
                 ; 0000 00C2             case TR:
                 _0x26:
000118 30e3      	CPI  R30,LOW(0x3)
000119 e0a0      	LDI  R26,HIGH(0x3)
00011a 07fa      	CPC  R31,R26
00011b f411      	BRNE _0x27
                 ; 0000 00C3             {
                 ; 0000 00C4                   data_single_led = 0xF7;
00011c efe7      	LDI  R30,LOW(247)
00011d c011      	RJMP _0xEE
                 ; 0000 00C5                   break;
                 ; 0000 00C6             }
                 ; 0000 00C7             case RN:
                 _0x27:
00011e 30e4      	CPI  R30,LOW(0x4)
00011f e0a0      	LDI  R26,HIGH(0x4)
000120 07fa      	CPC  R31,R26
000121 f411      	BRNE _0x28
                 ; 0000 00C8             {
                 ; 0000 00C9                   data_single_led = 0xFB;
000122 efeb      	LDI  R30,LOW(251)
000123 c00b      	RJMP _0xEE
                 ; 0000 00CA                   break;
                 ; 0000 00CB             }
                 ; 0000 00CC             case SN:
                 _0x28:
000124 30e5      	CPI  R30,LOW(0x5)
000125 e0a0      	LDI  R26,HIGH(0x5)
000126 07fa      	CPC  R31,R26
000127 f411      	BRNE _0x29
                 ; 0000 00CD             {
                 ; 0000 00CE                   data_single_led = 0xFD;
000128 efed      	LDI  R30,LOW(253)
000129 c005      	RJMP _0xEE
                 ; 0000 00CF                   break;
                 ; 0000 00D0             }
                 ; 0000 00D1             case TN:
                 _0x29:
00012a 30e6      	CPI  R30,LOW(0x6)
00012b e0a0      	LDI  R26,HIGH(0x6)
00012c 07fa      	CPC  R31,R26
00012d f411      	BRNE _0x24
                 ; 0000 00D2             {
                 ; 0000 00D3                   data_single_led = 0xFE;
00012e efee      	LDI  R30,LOW(254)
                 _0xEE:
00012f 2e9e      	MOV  R9,R30
                 ; 0000 00D4                   break;
                 ; 0000 00D5             }
                 ; 0000 00D6       }
                 _0x24:
                 ; 0000 00D7 }
000130 c064      	RJMP _0x2000003
                 ; .FEND
                 ;
                 ;void  SELECT_INPUT(unsigned char    num)
                 ; 0000 00DA {
                 _SELECT_INPUT:
                 ; .FSTART _SELECT_INPUT
                 ; 0000 00DB       switch(num)
000131 93aa      	ST   -Y,R26
                 ;	num -> Y+0
000132 81e8      	LD   R30,Y
000133 e0f0      	LDI  R31,0
                 ; 0000 00DC       {
                 ; 0000 00DD             case 0:
000134 9730      	SBIW R30,0
000135 f421      	BRNE _0x2E
                 ; 0000 00DE             {
                 ; 0000 00DF                   SELECT_S0 = 0;
000136 9891      	CBI  0x12,1
                 ; 0000 00E0                   SELECT_S1 = 0;
000137 9892      	CBI  0x12,2
                 ; 0000 00E1                   SELECT_S2 = 0;
000138 9893      	CBI  0x12,3
                 ; 0000 00E2                   break;
000139 c033      	RJMP _0x2D
                 ; 0000 00E3             }
                 ; 0000 00E4             case 1:
                 _0x2E:
00013a 30e1      	CPI  R30,LOW(0x1)
00013b e0a0      	LDI  R26,HIGH(0x1)
00013c 07fa      	CPC  R31,R26
00013d f421      	BRNE _0x35
                 ; 0000 00E5             {
                 ; 0000 00E6                   SELECT_S0 = 1;
00013e 9a91      	SBI  0x12,1
                 ; 0000 00E7                   SELECT_S1 = 0;
00013f 9892      	CBI  0x12,2
                 ; 0000 00E8                   SELECT_S2 = 0;
000140 9893      	CBI  0x12,3
                 ; 0000 00E9                   break;
000141 c02b      	RJMP _0x2D
                 ; 0000 00EA             }
                 ; 0000 00EB             case 2:
                 _0x35:
000142 30e2      	CPI  R30,LOW(0x2)
000143 e0a0      	LDI  R26,HIGH(0x2)
000144 07fa      	CPC  R31,R26
000145 f421      	BRNE _0x3C
                 ; 0000 00EC             {
                 ; 0000 00ED                   SELECT_S0 = 0;
000146 9891      	CBI  0x12,1
                 ; 0000 00EE                   SELECT_S1 = 1;
000147 9a92      	SBI  0x12,2
                 ; 0000 00EF                   SELECT_S2 = 0;
000148 9893      	CBI  0x12,3
                 ; 0000 00F0                   break;
000149 c023      	RJMP _0x2D
                 ; 0000 00F1             }
                 ; 0000 00F2             case 3:
                 _0x3C:
00014a 30e3      	CPI  R30,LOW(0x3)
00014b e0a0      	LDI  R26,HIGH(0x3)
00014c 07fa      	CPC  R31,R26
00014d f421      	BRNE _0x43
                 ; 0000 00F3             {
                 ; 0000 00F4                   SELECT_S0 = 1;
00014e 9a91      	SBI  0x12,1
                 ; 0000 00F5                   SELECT_S1 = 1;
00014f 9a92      	SBI  0x12,2
                 ; 0000 00F6                   SELECT_S2 = 0;
000150 9893      	CBI  0x12,3
                 ; 0000 00F7                   break;
000151 c01b      	RJMP _0x2D
                 ; 0000 00F8             }
                 ; 0000 00F9             case 4:
                 _0x43:
000152 30e4      	CPI  R30,LOW(0x4)
000153 e0a0      	LDI  R26,HIGH(0x4)
000154 07fa      	CPC  R31,R26
000155 f419      	BRNE _0x4A
                 ; 0000 00FA             {
                 ; 0000 00FB                   SELECT_S0 = 0;
000156 9891      	CBI  0x12,1
                 ; 0000 00FC                   SELECT_S1 = 0;
000157 9892      	CBI  0x12,2
                 ; 0000 00FD                   SELECT_S2 = 1;
000158 c013      	RJMP _0xEF
                 ; 0000 00FE                   break;
                 ; 0000 00FF             }
                 ; 0000 0100             case 5:
                 _0x4A:
000159 30e5      	CPI  R30,LOW(0x5)
00015a e0a0      	LDI  R26,HIGH(0x5)
00015b 07fa      	CPC  R31,R26
00015c f419      	BRNE _0x51
                 ; 0000 0101             {
                 ; 0000 0102                   SELECT_S0 = 1;
00015d 9a91      	SBI  0x12,1
                 ; 0000 0103                   SELECT_S1 = 0;
00015e 9892      	CBI  0x12,2
                 ; 0000 0104                   SELECT_S2 = 1;
00015f c00c      	RJMP _0xEF
                 ; 0000 0105                   break;
                 ; 0000 0106             }
                 ; 0000 0107             case 6:
                 _0x51:
000160 30e6      	CPI  R30,LOW(0x6)
000161 e0a0      	LDI  R26,HIGH(0x6)
000162 07fa      	CPC  R31,R26
000163 f411      	BRNE _0x58
                 ; 0000 0108             {
                 ; 0000 0109                   SELECT_S0 = 0;
000164 9891      	CBI  0x12,1
                 ; 0000 010A                   SELECT_S1 = 1;
000165 c005      	RJMP _0xF0
                 ; 0000 010B                   SELECT_S2 = 1;
                 ; 0000 010C                   break;
                 ; 0000 010D             }
                 ; 0000 010E             case 7:
                 _0x58:
000166 30e7      	CPI  R30,LOW(0x7)
000167 e0a0      	LDI  R26,HIGH(0x7)
000168 07fa      	CPC  R31,R26
000169 f419      	BRNE _0x2D
                 ; 0000 010F             {
                 ; 0000 0110                   SELECT_S0 = 1;
00016a 9a91      	SBI  0x12,1
                 ; 0000 0111                   SELECT_S1 = 1;
                 _0xF0:
00016b 9a92      	SBI  0x12,2
                 ; 0000 0112                   SELECT_S2 = 1;
                 _0xEF:
00016c 9a93      	SBI  0x12,3
                 ; 0000 0113                   break;
                 ; 0000 0114             }
                 ; 0000 0115       }
                 _0x2D:
                 ; 0000 0116 }
00016d c027      	RJMP _0x2000003
                 ; .FEND
                 ;
                 ;void  SELECT_INPUT_COMPARE(unsigned char  input)
                 ; 0000 0119 {
                 _SELECT_INPUT_COMPARE:
                 ; .FSTART _SELECT_INPUT_COMPARE
                 ; 0000 011A       switch(input)
00016e 93aa      	ST   -Y,R26
                 ;	input -> Y+0
00016f 81e8      	LD   R30,Y
000170 e0f0      	LDI  R31,0
                 ; 0000 011B       {
                 ; 0000 011C             case RS:
000171 30e1      	CPI  R30,LOW(0x1)
000172 e0a0      	LDI  R26,HIGH(0x1)
000173 07fa      	CPC  R31,R26
000174 f411      	BRNE _0x69
                 ; 0000 011D             {
                 ; 0000 011E                   SELECT_INPUT(1);
000175 e0a1      	LDI  R26,LOW(1)
000176 c01d      	RJMP _0xF1
                 ; 0000 011F                   break;
                 ; 0000 0120             }
                 ; 0000 0121             case ST:
                 _0x69:
000177 30e2      	CPI  R30,LOW(0x2)
000178 e0a0      	LDI  R26,HIGH(0x2)
000179 07fa      	CPC  R31,R26
00017a f411      	BRNE _0x6A
                 ; 0000 0122             {
                 ; 0000 0123                   SELECT_INPUT(3);
00017b e0a3      	LDI  R26,LOW(3)
00017c c017      	RJMP _0xF1
                 ; 0000 0124                   break;
                 ; 0000 0125             }
                 ; 0000 0126             case TR:
                 _0x6A:
00017d 30e3      	CPI  R30,LOW(0x3)
00017e e0a0      	LDI  R26,HIGH(0x3)
00017f 07fa      	CPC  R31,R26
000180 f411      	BRNE _0x6B
                 ; 0000 0127             {
                 ; 0000 0128                   SELECT_INPUT(5);
000181 e0a5      	LDI  R26,LOW(5)
000182 c011      	RJMP _0xF1
                 ; 0000 0129                   break;
                 ; 0000 012A             }
                 ; 0000 012B             case RN:
                 _0x6B:
000183 30e4      	CPI  R30,LOW(0x4)
000184 e0a0      	LDI  R26,HIGH(0x4)
000185 07fa      	CPC  R31,R26
000186 f411      	BRNE _0x6C
                 ; 0000 012C             {
                 ; 0000 012D                   SELECT_INPUT(0);
000187 e0a0      	LDI  R26,LOW(0)
000188 c00b      	RJMP _0xF1
                 ; 0000 012E                   break;
                 ; 0000 012F             }
                 ; 0000 0130             case SN:
                 _0x6C:
000189 30e5      	CPI  R30,LOW(0x5)
00018a e0a0      	LDI  R26,HIGH(0x5)
00018b 07fa      	CPC  R31,R26
00018c f411      	BRNE _0x6D
                 ; 0000 0131             {
                 ; 0000 0132                   SELECT_INPUT(2);
00018d e0a2      	LDI  R26,LOW(2)
00018e c005      	RJMP _0xF1
                 ; 0000 0133                   break;
                 ; 0000 0134             }
                 ; 0000 0135             case TN:
                 _0x6D:
00018f 30e6      	CPI  R30,LOW(0x6)
000190 e0a0      	LDI  R26,HIGH(0x6)
000191 07fa      	CPC  R31,R26
000192 f411      	BRNE _0x68
                 ; 0000 0136             {
                 ; 0000 0137                   SELECT_INPUT(4);
000193 e0a4      	LDI  R26,LOW(4)
                 _0xF1:
000194 df9c      	RCALL _SELECT_INPUT
                 ; 0000 0138                   break;
                 ; 0000 0139             }
                 ; 0000 013A       }
                 _0x68:
                 ; 0000 013B }
                 _0x2000003:
000195 9621      	ADIW R28,1
000196 9508      	RET
                 ; .FEND
                 ;
                 ;void  READ_SELECT(void)
                 ; 0000 013E {
                 _READ_SELECT:
                 ; .FSTART _READ_SELECT
                 ; 0000 013F      unsigned long int Uint_data_temp[40];
                 ; 0000 0140      unsigned char Uc_temp_cnt;
                 ; 0000 0141      unsigned int Uint_temp;
                 ; 0000 0142       if(!RS_INPUT)
000197 97ef      	SBIW R28,63
000198 97ef      	SBIW R28,63
000199 97a2      	SBIW R28,34
00019a d7ca      	RCALL __SAVELOCR4
                 ;	Uint_data_temp -> Y+4
                 ;	Uc_temp_cnt -> R17
                 ;	Uint_temp -> R18,R19
00019b 9998      	SBIC 0x13,0
00019c c0eb      	RJMP _0x6F
                 ; 0000 0143       {
                 ; 0000 0144             LED_SELECT(RS);
00019d e0a1      	LDI  R26,LOW(1)
00019e df6a      	RCALL _LED_SELECT
                 ; 0000 0145             SELECT_INPUT_COMPARE(RS);
00019f e0a1      	LDI  R26,LOW(1)
0001a0 dfcd      	RCALL _SELECT_INPUT_COMPARE
                 ; 0000 0146             if(loop_read_cnt > 10)
0001a1 e0ea      	LDI  R30,LOW(10)
0001a2 15ec      	CP   R30,R12
0001a3 f008      	BRLO PC+2
0001a4 c0e2      	RJMP _0x70
                 ; 0000 0147             {
                 ; 0000 0148                   // data = ADE7753_READ(1,VRMS)/253;
                 ; 0000 0149                   loop_read_cnt = 0;
0001a5 24cc      	CLR  R12
                 ; 0000 014A                   data_buff[buff_cnt++] = ADE7753_READ(1,VRMS);
0001a6 2de8      	MOV  R30,R8
0001a7 9483      	INC  R8
0001a8 e6a4      	LDI  R26,LOW(_data_buff)
0001a9 e0b1      	LDI  R27,HIGH(_data_buff)
0001aa e0f0      	LDI  R31,0
0001ab d75a      	RCALL __LSLW2
0001ac 0fea      	ADD  R30,R26
0001ad 1ffb      	ADC  R31,R27
0001ae 93ff      	PUSH R31
0001af 93ef      	PUSH R30
0001b0 e0e1      	LDI  R30,LOW(1)
0001b1 93ea      	ST   -Y,R30
0001b2 e1e7      	LDI  R30,LOW(23)
0001b3 93ea      	ST   -Y,R30
0001b4 e0a3      	LDI  R26,LOW(3)
0001b5 d6af      	RCALL _ADE7753_READ
0001b6 91af      	POP  R26
0001b7 91bf      	POP  R27
0001b8 d798      	RCALL __PUTDP1
                 ; 0000 014B                   if(buff_cnt >= 40)
0001b9 e2e8      	LDI  R30,LOW(40)
0001ba 168e      	CP   R8,R30
0001bb f008      	BRLO _0x71
                 ; 0000 014C                   {
                 ; 0000 014D                         buff_cnt = 0;
0001bc 2488      	CLR  R8
                 ; 0000 014E                   }
                 ; 0000 014F                   data_temp = 0;
                 _0x71:
0001bd e0e0      	LDI  R30,LOW(0)
0001be 93e0 0160 	STS  _data_temp,R30
0001c0 93e0 0161 	STS  _data_temp+1,R30
0001c2 93e0 0162 	STS  _data_temp+2,R30
0001c4 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 0150                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
0001c6 24dd      	CLR  R13
                 _0x73:
0001c7 e2e8      	LDI  R30,LOW(40)
0001c8 16de      	CP   R13,R30
0001c9 f4d8      	BRSH _0x74
                 ; 0000 0151                   {
                 ; 0000 0152                         data_temp += data_buff[loop_cnt];
0001ca 2ded      	MOV  R30,R13
0001cb e6a4      	LDI  R26,LOW(_data_buff)
0001cc e0b1      	LDI  R27,HIGH(_data_buff)
0001cd e0f0      	LDI  R31,0
0001ce d737      	RCALL __LSLW2
0001cf 0fae      	ADD  R26,R30
0001d0 1fbf      	ADC  R27,R31
0001d1 d779      	RCALL __GETD1P
0001d2 91a0 0160 	LDS  R26,_data_temp
0001d4 91b0 0161 	LDS  R27,_data_temp+1
0001d6 9180 0162 	LDS  R24,_data_temp+2
0001d8 9190 0163 	LDS  R25,_data_temp+3
0001da d70e      	RCALL __ADDD12
0001db 93e0 0160 	STS  _data_temp,R30
0001dd 93f0 0161 	STS  _data_temp+1,R31
0001df 9360 0162 	STS  _data_temp+2,R22
0001e1 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 0153                   }
0001e3 94d3      	INC  R13
0001e4 cfe2      	RJMP _0x73
                 _0x74:
                 ; 0000 0154 
                 ; 0000 0155                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
0001e5 24dd      	CLR  R13
                 _0x76:
0001e6 e2e8      	LDI  R30,LOW(40)
0001e7 16de      	CP   R13,R30
0001e8 f4a0      	BRSH _0x77
                 ; 0000 0156                   {
                 ; 0000 0157                         Uint_data_temp[loop_cnt] = data_buff[loop_cnt];
0001e9 2ded      	MOV  R30,R13
0001ea e0f0      	LDI  R31,0
0001eb 01de      	MOVW R26,R28
0001ec 9614      	ADIW R26,4
0001ed d718      	RCALL __LSLW2
0001ee 0fea      	ADD  R30,R26
0001ef 1ffb      	ADC  R31,R27
0001f0 010f      	MOVW R0,R30
0001f1 2ded      	MOV  R30,R13
0001f2 e6a4      	LDI  R26,LOW(_data_buff)
0001f3 e0b1      	LDI  R27,HIGH(_data_buff)
0001f4 e0f0      	LDI  R31,0
0001f5 d710      	RCALL __LSLW2
0001f6 0fae      	ADD  R26,R30
0001f7 1fbf      	ADC  R27,R31
0001f8 d752      	RCALL __GETD1P
0001f9 01d0      	MOVW R26,R0
0001fa d756      	RCALL __PUTDP1
                 ; 0000 0158                   }
0001fb 94d3      	INC  R13
0001fc cfe9      	RJMP _0x76
                 _0x77:
                 ; 0000 0159 
                 ; 0000 015A                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
0001fd 24dd      	CLR  R13
                 _0x79:
0001fe e2e8      	LDI  R30,LOW(40)
0001ff 16de      	CP   R13,R30
000200 f008      	BRLO PC+2
000201 c048      	RJMP _0x7A
                 ; 0000 015B                   {
                 ; 0000 015C                         for(Uc_temp_cnt = loop_cnt;Uc_temp_cnt<40;Uc_temp_cnt++)
000202 2d1d      	MOV  R17,R13
                 _0x7C:
000203 3218      	CPI  R17,40
000204 f008      	BRLO PC+2
000205 c042      	RJMP _0x7D
                 ; 0000 015D                         {
                 ; 0000 015E                               if(Uint_data_temp[loop_cnt] > Uint_data_temp[Uc_temp_cnt])
000206 2ded      	MOV  R30,R13
000207 e0f0      	LDI  R31,0
000208 01de      	MOVW R26,R28
000209 9614      	ADIW R26,4
00020a d6fb      	RCALL __LSLW2
00020b 0fae      	ADD  R26,R30
00020c 1fbf      	ADC  R27,R31
00020d d73d      	RCALL __GETD1P
00020e 937f      	PUSH R23
00020f 936f      	PUSH R22
000210 93ff      	PUSH R31
000211 93ef      	PUSH R30
000212 2fe1      	MOV  R30,R17
000213 e0f0      	LDI  R31,0
000214 01de      	MOVW R26,R28
000215 9614      	ADIW R26,4
000216 d6ef      	RCALL __LSLW2
000217 0fae      	ADD  R26,R30
000218 1fbf      	ADC  R27,R31
000219 d731      	RCALL __GETD1P
00021a 91af      	POP  R26
00021b 91bf      	POP  R27
00021c 918f      	POP  R24
00021d 919f      	POP  R25
00021e d741      	RCALL __CPD12
00021f f530      	BRSH _0x7E
                 ; 0000 015F                               {
                 ; 0000 0160                                     Uint_temp = Uint_data_temp[loop_cnt];
000220 2ded      	MOV  R30,R13
000221 e0f0      	LDI  R31,0
000222 01de      	MOVW R26,R28
000223 9614      	ADIW R26,4
000224 d6e1      	RCALL __LSLW2
000225 0fae      	ADD  R26,R30
000226 1fbf      	ADC  R27,R31
000227 912d      	LD   R18,X+
000228 913c      	LD   R19,X
                 ; 0000 0161                                     Uint_data_temp[loop_cnt] = Uint_data_temp[Uc_temp_cnt];
000229 2ded      	MOV  R30,R13
00022a e0f0      	LDI  R31,0
00022b 01de      	MOVW R26,R28
00022c 9614      	ADIW R26,4
00022d d6d8      	RCALL __LSLW2
00022e 0fea      	ADD  R30,R26
00022f 1ffb      	ADC  R31,R27
000230 010f      	MOVW R0,R30
000231 2fe1      	MOV  R30,R17
000232 e0f0      	LDI  R31,0
000233 01de      	MOVW R26,R28
000234 9614      	ADIW R26,4
000235 d6d0      	RCALL __LSLW2
000236 0fae      	ADD  R26,R30
000237 1fbf      	ADC  R27,R31
000238 d712      	RCALL __GETD1P
000239 01d0      	MOVW R26,R0
00023a d716      	RCALL __PUTDP1
                 ; 0000 0162                                     Uint_data_temp[Uc_temp_cnt] = Uint_temp;
00023b 2fe1      	MOV  R30,R17
00023c e0f0      	LDI  R31,0
00023d 01de      	MOVW R26,R28
00023e 9614      	ADIW R26,4
00023f d6c6      	RCALL __LSLW2
000240 0fae      	ADD  R26,R30
000241 1fbf      	ADC  R27,R31
000242 01f9      	MOVW R30,R18
000243 2766      	CLR  R22
000244 2777      	CLR  R23
000245 d70b      	RCALL __PUTDP1
                 ; 0000 0163                               }
                 ; 0000 0164                         }
                 _0x7E:
000246 5f1f      	SUBI R17,-1
000247 cfbb      	RJMP _0x7C
                 _0x7D:
                 ; 0000 0165                   }
000248 94d3      	INC  R13
000249 cfb4      	RJMP _0x79
                 _0x7A:
                 ; 0000 0166 
                 ; 0000 0167                   data_temp = 0;
00024a e0e0      	LDI  R30,LOW(0)
00024b 93e0 0160 	STS  _data_temp,R30
00024d 93e0 0161 	STS  _data_temp+1,R30
00024f 93e0 0162 	STS  _data_temp+2,R30
000251 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 0168                   for(loop_cnt = 13;loop_cnt<27;loop_cnt++)
000253 e0ed      	LDI  R30,LOW(13)
000254 2ede      	MOV  R13,R30
                 _0x80:
000255 e1eb      	LDI  R30,LOW(27)
000256 16de      	CP   R13,R30
000257 f4d8      	BRSH _0x81
                 ; 0000 0169                   {
                 ; 0000 016A                         data_temp += data_buff[loop_cnt];
000258 2ded      	MOV  R30,R13
000259 e6a4      	LDI  R26,LOW(_data_buff)
00025a e0b1      	LDI  R27,HIGH(_data_buff)
00025b e0f0      	LDI  R31,0
00025c d6a9      	RCALL __LSLW2
00025d 0fae      	ADD  R26,R30
00025e 1fbf      	ADC  R27,R31
00025f d6eb      	RCALL __GETD1P
000260 91a0 0160 	LDS  R26,_data_temp
000262 91b0 0161 	LDS  R27,_data_temp+1
000264 9180 0162 	LDS  R24,_data_temp+2
000266 9190 0163 	LDS  R25,_data_temp+3
000268 d680      	RCALL __ADDD12
000269 93e0 0160 	STS  _data_temp,R30
00026b 93f0 0161 	STS  _data_temp+1,R31
00026d 9360 0162 	STS  _data_temp+2,R22
00026f 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 016B                   }
000271 94d3      	INC  R13
000272 cfe2      	RJMP _0x80
                 _0x81:
                 ; 0000 016C                   //data = (unsigned int)data_temp/6;
                 ; 0000 016D                   data = (unsigned int)(data_temp/261)/14;
000273 91a0 0160 	LDS  R26,_data_temp
000275 91b0 0161 	LDS  R27,_data_temp+1
000277 9180 0162 	LDS  R24,_data_temp+2
000279 9190 0163 	LDS  R25,_data_temp+3
                +
00027b e0e5     +LDI R30 , LOW ( 0x105 )
00027c e0f1     +LDI R31 , HIGH ( 0x105 )
00027d e060     +LDI R22 , BYTE3 ( 0x105 )
00027e e070     +LDI R23 , BYTE4 ( 0x105 )
                 	__GETD1N 0x105
00027f d6a3      	RCALL __DIVD21U
000280 2766      	CLR  R22
000281 2777      	CLR  R23
000282 01df      	MOVW R26,R30
000283 e0ee      	LDI  R30,LOW(14)
000284 e0f0      	LDI  R31,HIGH(14)
000285 d68a      	RCALL __DIVW21U
000286 015f      	MOVW R10,R30
                 ; 0000 016E             }
                 ; 0000 016F       }
                 _0x70:
                 ; 0000 0170       else if(!ST_INPUT)
000287 c4a0      	RJMP _0x82
                 _0x6F:
000288 9999      	SBIC 0x13,1
000289 c0eb      	RJMP _0x83
                 ; 0000 0171       {
                 ; 0000 0172             LED_SELECT(ST);
00028a e0a2      	LDI  R26,LOW(2)
00028b de7d      	RCALL _LED_SELECT
                 ; 0000 0173             SELECT_INPUT_COMPARE(ST);
00028c e0a2      	LDI  R26,LOW(2)
00028d dee0      	RCALL _SELECT_INPUT_COMPARE
                 ; 0000 0174             if(loop_read_cnt > 10)
00028e e0ea      	LDI  R30,LOW(10)
00028f 15ec      	CP   R30,R12
000290 f008      	BRLO PC+2
000291 c0e2      	RJMP _0x84
                 ; 0000 0175             {
                 ; 0000 0176                   // data = ADE7753_READ(1,VRMS)/253;
                 ; 0000 0177                   loop_read_cnt = 0;
000292 24cc      	CLR  R12
                 ; 0000 0178                   data_buff[buff_cnt++] = ADE7753_READ(1,VRMS);
000293 2de8      	MOV  R30,R8
000294 9483      	INC  R8
000295 e6a4      	LDI  R26,LOW(_data_buff)
000296 e0b1      	LDI  R27,HIGH(_data_buff)
000297 e0f0      	LDI  R31,0
000298 d66d      	RCALL __LSLW2
000299 0fea      	ADD  R30,R26
00029a 1ffb      	ADC  R31,R27
00029b 93ff      	PUSH R31
00029c 93ef      	PUSH R30
00029d e0e1      	LDI  R30,LOW(1)
00029e 93ea      	ST   -Y,R30
00029f e1e7      	LDI  R30,LOW(23)
0002a0 93ea      	ST   -Y,R30
0002a1 e0a3      	LDI  R26,LOW(3)
0002a2 d5c2      	RCALL _ADE7753_READ
0002a3 91af      	POP  R26
0002a4 91bf      	POP  R27
0002a5 d6ab      	RCALL __PUTDP1
                 ; 0000 0179                   if(buff_cnt >= 40)
0002a6 e2e8      	LDI  R30,LOW(40)
0002a7 168e      	CP   R8,R30
0002a8 f008      	BRLO _0x85
                 ; 0000 017A                   {
                 ; 0000 017B                         buff_cnt = 0;
0002a9 2488      	CLR  R8
                 ; 0000 017C                   }
                 ; 0000 017D                   data_temp = 0;
                 _0x85:
0002aa e0e0      	LDI  R30,LOW(0)
0002ab 93e0 0160 	STS  _data_temp,R30
0002ad 93e0 0161 	STS  _data_temp+1,R30
0002af 93e0 0162 	STS  _data_temp+2,R30
0002b1 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 017E                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
0002b3 24dd      	CLR  R13
                 _0x87:
0002b4 e2e8      	LDI  R30,LOW(40)
0002b5 16de      	CP   R13,R30
0002b6 f4d8      	BRSH _0x88
                 ; 0000 017F                   {
                 ; 0000 0180                         data_temp += data_buff[loop_cnt];
0002b7 2ded      	MOV  R30,R13
0002b8 e6a4      	LDI  R26,LOW(_data_buff)
0002b9 e0b1      	LDI  R27,HIGH(_data_buff)
0002ba e0f0      	LDI  R31,0
0002bb d64a      	RCALL __LSLW2
0002bc 0fae      	ADD  R26,R30
0002bd 1fbf      	ADC  R27,R31
0002be d68c      	RCALL __GETD1P
0002bf 91a0 0160 	LDS  R26,_data_temp
0002c1 91b0 0161 	LDS  R27,_data_temp+1
0002c3 9180 0162 	LDS  R24,_data_temp+2
0002c5 9190 0163 	LDS  R25,_data_temp+3
0002c7 d621      	RCALL __ADDD12
0002c8 93e0 0160 	STS  _data_temp,R30
0002ca 93f0 0161 	STS  _data_temp+1,R31
0002cc 9360 0162 	STS  _data_temp+2,R22
0002ce 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 0181                   }
0002d0 94d3      	INC  R13
0002d1 cfe2      	RJMP _0x87
                 _0x88:
                 ; 0000 0182 
                 ; 0000 0183                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
0002d2 24dd      	CLR  R13
                 _0x8A:
0002d3 e2e8      	LDI  R30,LOW(40)
0002d4 16de      	CP   R13,R30
0002d5 f4a0      	BRSH _0x8B
                 ; 0000 0184                   {
                 ; 0000 0185                         Uint_data_temp[loop_cnt] = data_buff[loop_cnt];
0002d6 2ded      	MOV  R30,R13
0002d7 e0f0      	LDI  R31,0
0002d8 01de      	MOVW R26,R28
0002d9 9614      	ADIW R26,4
0002da d62b      	RCALL __LSLW2
0002db 0fea      	ADD  R30,R26
0002dc 1ffb      	ADC  R31,R27
0002dd 010f      	MOVW R0,R30
0002de 2ded      	MOV  R30,R13
0002df e6a4      	LDI  R26,LOW(_data_buff)
0002e0 e0b1      	LDI  R27,HIGH(_data_buff)
0002e1 e0f0      	LDI  R31,0
0002e2 d623      	RCALL __LSLW2
0002e3 0fae      	ADD  R26,R30
0002e4 1fbf      	ADC  R27,R31
0002e5 d665      	RCALL __GETD1P
0002e6 01d0      	MOVW R26,R0
0002e7 d669      	RCALL __PUTDP1
                 ; 0000 0186                   }
0002e8 94d3      	INC  R13
0002e9 cfe9      	RJMP _0x8A
                 _0x8B:
                 ; 0000 0187 
                 ; 0000 0188                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
0002ea 24dd      	CLR  R13
                 _0x8D:
0002eb e2e8      	LDI  R30,LOW(40)
0002ec 16de      	CP   R13,R30
0002ed f008      	BRLO PC+2
0002ee c048      	RJMP _0x8E
                 ; 0000 0189                   {
                 ; 0000 018A                         for(Uc_temp_cnt = loop_cnt;Uc_temp_cnt<40;Uc_temp_cnt++)
0002ef 2d1d      	MOV  R17,R13
                 _0x90:
0002f0 3218      	CPI  R17,40
0002f1 f008      	BRLO PC+2
0002f2 c042      	RJMP _0x91
                 ; 0000 018B                         {
                 ; 0000 018C                               if(Uint_data_temp[loop_cnt] > Uint_data_temp[Uc_temp_cnt])
0002f3 2ded      	MOV  R30,R13
0002f4 e0f0      	LDI  R31,0
0002f5 01de      	MOVW R26,R28
0002f6 9614      	ADIW R26,4
0002f7 d60e      	RCALL __LSLW2
0002f8 0fae      	ADD  R26,R30
0002f9 1fbf      	ADC  R27,R31
0002fa d650      	RCALL __GETD1P
0002fb 937f      	PUSH R23
0002fc 936f      	PUSH R22
0002fd 93ff      	PUSH R31
0002fe 93ef      	PUSH R30
0002ff 2fe1      	MOV  R30,R17
000300 e0f0      	LDI  R31,0
000301 01de      	MOVW R26,R28
000302 9614      	ADIW R26,4
000303 d602      	RCALL __LSLW2
000304 0fae      	ADD  R26,R30
000305 1fbf      	ADC  R27,R31
000306 d644      	RCALL __GETD1P
000307 91af      	POP  R26
000308 91bf      	POP  R27
000309 918f      	POP  R24
00030a 919f      	POP  R25
00030b d654      	RCALL __CPD12
00030c f530      	BRSH _0x92
                 ; 0000 018D                               {
                 ; 0000 018E                                     Uint_temp = Uint_data_temp[loop_cnt];
00030d 2ded      	MOV  R30,R13
00030e e0f0      	LDI  R31,0
00030f 01de      	MOVW R26,R28
000310 9614      	ADIW R26,4
000311 d5f4      	RCALL __LSLW2
000312 0fae      	ADD  R26,R30
000313 1fbf      	ADC  R27,R31
000314 912d      	LD   R18,X+
000315 913c      	LD   R19,X
                 ; 0000 018F                                     Uint_data_temp[loop_cnt] = Uint_data_temp[Uc_temp_cnt];
000316 2ded      	MOV  R30,R13
000317 e0f0      	LDI  R31,0
000318 01de      	MOVW R26,R28
000319 9614      	ADIW R26,4
00031a d5eb      	RCALL __LSLW2
00031b 0fea      	ADD  R30,R26
00031c 1ffb      	ADC  R31,R27
00031d 010f      	MOVW R0,R30
00031e 2fe1      	MOV  R30,R17
00031f e0f0      	LDI  R31,0
000320 01de      	MOVW R26,R28
000321 9614      	ADIW R26,4
000322 d5e3      	RCALL __LSLW2
000323 0fae      	ADD  R26,R30
000324 1fbf      	ADC  R27,R31
000325 d625      	RCALL __GETD1P
000326 01d0      	MOVW R26,R0
000327 d629      	RCALL __PUTDP1
                 ; 0000 0190                                     Uint_data_temp[Uc_temp_cnt] = Uint_temp;
000328 2fe1      	MOV  R30,R17
000329 e0f0      	LDI  R31,0
00032a 01de      	MOVW R26,R28
00032b 9614      	ADIW R26,4
00032c d5d9      	RCALL __LSLW2
00032d 0fae      	ADD  R26,R30
00032e 1fbf      	ADC  R27,R31
00032f 01f9      	MOVW R30,R18
000330 2766      	CLR  R22
000331 2777      	CLR  R23
000332 d61e      	RCALL __PUTDP1
                 ; 0000 0191                               }
                 ; 0000 0192                         }
                 _0x92:
000333 5f1f      	SUBI R17,-1
000334 cfbb      	RJMP _0x90
                 _0x91:
                 ; 0000 0193                   }
000335 94d3      	INC  R13
000336 cfb4      	RJMP _0x8D
                 _0x8E:
                 ; 0000 0194 
                 ; 0000 0195                   data_temp = 0;
000337 e0e0      	LDI  R30,LOW(0)
000338 93e0 0160 	STS  _data_temp,R30
00033a 93e0 0161 	STS  _data_temp+1,R30
00033c 93e0 0162 	STS  _data_temp+2,R30
00033e 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 0196                   for(loop_cnt = 13;loop_cnt<27;loop_cnt++)
000340 e0ed      	LDI  R30,LOW(13)
000341 2ede      	MOV  R13,R30
                 _0x94:
000342 e1eb      	LDI  R30,LOW(27)
000343 16de      	CP   R13,R30
000344 f4d8      	BRSH _0x95
                 ; 0000 0197                   {
                 ; 0000 0198                         data_temp += data_buff[loop_cnt];
000345 2ded      	MOV  R30,R13
000346 e6a4      	LDI  R26,LOW(_data_buff)
000347 e0b1      	LDI  R27,HIGH(_data_buff)
000348 e0f0      	LDI  R31,0
000349 d5bc      	RCALL __LSLW2
00034a 0fae      	ADD  R26,R30
00034b 1fbf      	ADC  R27,R31
00034c d5fe      	RCALL __GETD1P
00034d 91a0 0160 	LDS  R26,_data_temp
00034f 91b0 0161 	LDS  R27,_data_temp+1
000351 9180 0162 	LDS  R24,_data_temp+2
000353 9190 0163 	LDS  R25,_data_temp+3
000355 d593      	RCALL __ADDD12
000356 93e0 0160 	STS  _data_temp,R30
000358 93f0 0161 	STS  _data_temp+1,R31
00035a 9360 0162 	STS  _data_temp+2,R22
00035c 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 0199                   }
00035e 94d3      	INC  R13
00035f cfe2      	RJMP _0x94
                 _0x95:
                 ; 0000 019A                   //data = (unsigned int)data_temp/6;
                 ; 0000 019B                   data = (unsigned int)(data_temp/261)/14;
000360 91a0 0160 	LDS  R26,_data_temp
000362 91b0 0161 	LDS  R27,_data_temp+1
000364 9180 0162 	LDS  R24,_data_temp+2
000366 9190 0163 	LDS  R25,_data_temp+3
                +
000368 e0e5     +LDI R30 , LOW ( 0x105 )
000369 e0f1     +LDI R31 , HIGH ( 0x105 )
00036a e060     +LDI R22 , BYTE3 ( 0x105 )
00036b e070     +LDI R23 , BYTE4 ( 0x105 )
                 	__GETD1N 0x105
00036c d5b6      	RCALL __DIVD21U
00036d 2766      	CLR  R22
00036e 2777      	CLR  R23
00036f 01df      	MOVW R26,R30
000370 e0ee      	LDI  R30,LOW(14)
000371 e0f0      	LDI  R31,HIGH(14)
000372 d59d      	RCALL __DIVW21U
000373 015f      	MOVW R10,R30
                 ; 0000 019C             }
                 ; 0000 019D       }
                 _0x84:
                 ; 0000 019E       else if(!TR_INPUT)
000374 c3b3      	RJMP _0x96
                 _0x83:
000375 999a      	SBIC 0x13,2
000376 c0eb      	RJMP _0x97
                 ; 0000 019F       {
                 ; 0000 01A0             LED_SELECT(TR);
000377 e0a3      	LDI  R26,LOW(3)
000378 dd90      	RCALL _LED_SELECT
                 ; 0000 01A1             SELECT_INPUT_COMPARE(TR);
000379 e0a3      	LDI  R26,LOW(3)
00037a ddf3      	RCALL _SELECT_INPUT_COMPARE
                 ; 0000 01A2             if(loop_read_cnt > 10)
00037b e0ea      	LDI  R30,LOW(10)
00037c 15ec      	CP   R30,R12
00037d f008      	BRLO PC+2
00037e c0e2      	RJMP _0x98
                 ; 0000 01A3             {
                 ; 0000 01A4                   // data = ADE7753_READ(1,VRMS)/253;
                 ; 0000 01A5                   loop_read_cnt = 0;
00037f 24cc      	CLR  R12
                 ; 0000 01A6                   data_buff[buff_cnt++] = ADE7753_READ(1,VRMS);
000380 2de8      	MOV  R30,R8
000381 9483      	INC  R8
000382 e6a4      	LDI  R26,LOW(_data_buff)
000383 e0b1      	LDI  R27,HIGH(_data_buff)
000384 e0f0      	LDI  R31,0
000385 d580      	RCALL __LSLW2
000386 0fea      	ADD  R30,R26
000387 1ffb      	ADC  R31,R27
000388 93ff      	PUSH R31
000389 93ef      	PUSH R30
00038a e0e1      	LDI  R30,LOW(1)
00038b 93ea      	ST   -Y,R30
00038c e1e7      	LDI  R30,LOW(23)
00038d 93ea      	ST   -Y,R30
00038e e0a3      	LDI  R26,LOW(3)
00038f d4d5      	RCALL _ADE7753_READ
000390 91af      	POP  R26
000391 91bf      	POP  R27
000392 d5be      	RCALL __PUTDP1
                 ; 0000 01A7                   if(buff_cnt >= 40)
000393 e2e8      	LDI  R30,LOW(40)
000394 168e      	CP   R8,R30
000395 f008      	BRLO _0x99
                 ; 0000 01A8                   {
                 ; 0000 01A9                         buff_cnt = 0;
000396 2488      	CLR  R8
                 ; 0000 01AA                   }
                 ; 0000 01AB                   data_temp = 0;
                 _0x99:
000397 e0e0      	LDI  R30,LOW(0)
000398 93e0 0160 	STS  _data_temp,R30
00039a 93e0 0161 	STS  _data_temp+1,R30
00039c 93e0 0162 	STS  _data_temp+2,R30
00039e 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 01AC                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
0003a0 24dd      	CLR  R13
                 _0x9B:
0003a1 e2e8      	LDI  R30,LOW(40)
0003a2 16de      	CP   R13,R30
0003a3 f4d8      	BRSH _0x9C
                 ; 0000 01AD                   {
                 ; 0000 01AE                         data_temp += data_buff[loop_cnt];
0003a4 2ded      	MOV  R30,R13
0003a5 e6a4      	LDI  R26,LOW(_data_buff)
0003a6 e0b1      	LDI  R27,HIGH(_data_buff)
0003a7 e0f0      	LDI  R31,0
0003a8 d55d      	RCALL __LSLW2
0003a9 0fae      	ADD  R26,R30
0003aa 1fbf      	ADC  R27,R31
0003ab d59f      	RCALL __GETD1P
0003ac 91a0 0160 	LDS  R26,_data_temp
0003ae 91b0 0161 	LDS  R27,_data_temp+1
0003b0 9180 0162 	LDS  R24,_data_temp+2
0003b2 9190 0163 	LDS  R25,_data_temp+3
0003b4 d534      	RCALL __ADDD12
0003b5 93e0 0160 	STS  _data_temp,R30
0003b7 93f0 0161 	STS  _data_temp+1,R31
0003b9 9360 0162 	STS  _data_temp+2,R22
0003bb 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 01AF                   }
0003bd 94d3      	INC  R13
0003be cfe2      	RJMP _0x9B
                 _0x9C:
                 ; 0000 01B0 
                 ; 0000 01B1                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
0003bf 24dd      	CLR  R13
                 _0x9E:
0003c0 e2e8      	LDI  R30,LOW(40)
0003c1 16de      	CP   R13,R30
0003c2 f4a0      	BRSH _0x9F
                 ; 0000 01B2                   {
                 ; 0000 01B3                         Uint_data_temp[loop_cnt] = data_buff[loop_cnt];
0003c3 2ded      	MOV  R30,R13
0003c4 e0f0      	LDI  R31,0
0003c5 01de      	MOVW R26,R28
0003c6 9614      	ADIW R26,4
0003c7 d53e      	RCALL __LSLW2
0003c8 0fea      	ADD  R30,R26
0003c9 1ffb      	ADC  R31,R27
0003ca 010f      	MOVW R0,R30
0003cb 2ded      	MOV  R30,R13
0003cc e6a4      	LDI  R26,LOW(_data_buff)
0003cd e0b1      	LDI  R27,HIGH(_data_buff)
0003ce e0f0      	LDI  R31,0
0003cf d536      	RCALL __LSLW2
0003d0 0fae      	ADD  R26,R30
0003d1 1fbf      	ADC  R27,R31
0003d2 d578      	RCALL __GETD1P
0003d3 01d0      	MOVW R26,R0
0003d4 d57c      	RCALL __PUTDP1
                 ; 0000 01B4                   }
0003d5 94d3      	INC  R13
0003d6 cfe9      	RJMP _0x9E
                 _0x9F:
                 ; 0000 01B5 
                 ; 0000 01B6                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
0003d7 24dd      	CLR  R13
                 _0xA1:
0003d8 e2e8      	LDI  R30,LOW(40)
0003d9 16de      	CP   R13,R30
0003da f008      	BRLO PC+2
0003db c048      	RJMP _0xA2
                 ; 0000 01B7                   {
                 ; 0000 01B8                         for(Uc_temp_cnt = loop_cnt;Uc_temp_cnt<40;Uc_temp_cnt++)
0003dc 2d1d      	MOV  R17,R13
                 _0xA4:
0003dd 3218      	CPI  R17,40
0003de f008      	BRLO PC+2
0003df c042      	RJMP _0xA5
                 ; 0000 01B9                         {
                 ; 0000 01BA                               if(Uint_data_temp[loop_cnt] > Uint_data_temp[Uc_temp_cnt])
0003e0 2ded      	MOV  R30,R13
0003e1 e0f0      	LDI  R31,0
0003e2 01de      	MOVW R26,R28
0003e3 9614      	ADIW R26,4
0003e4 d521      	RCALL __LSLW2
0003e5 0fae      	ADD  R26,R30
0003e6 1fbf      	ADC  R27,R31
0003e7 d563      	RCALL __GETD1P
0003e8 937f      	PUSH R23
0003e9 936f      	PUSH R22
0003ea 93ff      	PUSH R31
0003eb 93ef      	PUSH R30
0003ec 2fe1      	MOV  R30,R17
0003ed e0f0      	LDI  R31,0
0003ee 01de      	MOVW R26,R28
0003ef 9614      	ADIW R26,4
0003f0 d515      	RCALL __LSLW2
0003f1 0fae      	ADD  R26,R30
0003f2 1fbf      	ADC  R27,R31
0003f3 d557      	RCALL __GETD1P
0003f4 91af      	POP  R26
0003f5 91bf      	POP  R27
0003f6 918f      	POP  R24
0003f7 919f      	POP  R25
0003f8 d567      	RCALL __CPD12
0003f9 f530      	BRSH _0xA6
                 ; 0000 01BB                               {
                 ; 0000 01BC                                     Uint_temp = Uint_data_temp[loop_cnt];
0003fa 2ded      	MOV  R30,R13
0003fb e0f0      	LDI  R31,0
0003fc 01de      	MOVW R26,R28
0003fd 9614      	ADIW R26,4
0003fe d507      	RCALL __LSLW2
0003ff 0fae      	ADD  R26,R30
000400 1fbf      	ADC  R27,R31
000401 912d      	LD   R18,X+
000402 913c      	LD   R19,X
                 ; 0000 01BD                                     Uint_data_temp[loop_cnt] = Uint_data_temp[Uc_temp_cnt];
000403 2ded      	MOV  R30,R13
000404 e0f0      	LDI  R31,0
000405 01de      	MOVW R26,R28
000406 9614      	ADIW R26,4
000407 d4fe      	RCALL __LSLW2
000408 0fea      	ADD  R30,R26
000409 1ffb      	ADC  R31,R27
00040a 010f      	MOVW R0,R30
00040b 2fe1      	MOV  R30,R17
00040c e0f0      	LDI  R31,0
00040d 01de      	MOVW R26,R28
00040e 9614      	ADIW R26,4
00040f d4f6      	RCALL __LSLW2
000410 0fae      	ADD  R26,R30
000411 1fbf      	ADC  R27,R31
000412 d538      	RCALL __GETD1P
000413 01d0      	MOVW R26,R0
000414 d53c      	RCALL __PUTDP1
                 ; 0000 01BE                                     Uint_data_temp[Uc_temp_cnt] = Uint_temp;
000415 2fe1      	MOV  R30,R17
000416 e0f0      	LDI  R31,0
000417 01de      	MOVW R26,R28
000418 9614      	ADIW R26,4
000419 d4ec      	RCALL __LSLW2
00041a 0fae      	ADD  R26,R30
00041b 1fbf      	ADC  R27,R31
00041c 01f9      	MOVW R30,R18
00041d 2766      	CLR  R22
00041e 2777      	CLR  R23
00041f d531      	RCALL __PUTDP1
                 ; 0000 01BF                               }
                 ; 0000 01C0                         }
                 _0xA6:
000420 5f1f      	SUBI R17,-1
000421 cfbb      	RJMP _0xA4
                 _0xA5:
                 ; 0000 01C1                   }
000422 94d3      	INC  R13
000423 cfb4      	RJMP _0xA1
                 _0xA2:
                 ; 0000 01C2 
                 ; 0000 01C3                   data_temp = 0;
000424 e0e0      	LDI  R30,LOW(0)
000425 93e0 0160 	STS  _data_temp,R30
000427 93e0 0161 	STS  _data_temp+1,R30
000429 93e0 0162 	STS  _data_temp+2,R30
00042b 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 01C4                   for(loop_cnt = 13;loop_cnt<27;loop_cnt++)
00042d e0ed      	LDI  R30,LOW(13)
00042e 2ede      	MOV  R13,R30
                 _0xA8:
00042f e1eb      	LDI  R30,LOW(27)
000430 16de      	CP   R13,R30
000431 f4d8      	BRSH _0xA9
                 ; 0000 01C5                   {
                 ; 0000 01C6                         data_temp += data_buff[loop_cnt];
000432 2ded      	MOV  R30,R13
000433 e6a4      	LDI  R26,LOW(_data_buff)
000434 e0b1      	LDI  R27,HIGH(_data_buff)
000435 e0f0      	LDI  R31,0
000436 d4cf      	RCALL __LSLW2
000437 0fae      	ADD  R26,R30
000438 1fbf      	ADC  R27,R31
000439 d511      	RCALL __GETD1P
00043a 91a0 0160 	LDS  R26,_data_temp
00043c 91b0 0161 	LDS  R27,_data_temp+1
00043e 9180 0162 	LDS  R24,_data_temp+2
000440 9190 0163 	LDS  R25,_data_temp+3
000442 d4a6      	RCALL __ADDD12
000443 93e0 0160 	STS  _data_temp,R30
000445 93f0 0161 	STS  _data_temp+1,R31
000447 9360 0162 	STS  _data_temp+2,R22
000449 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 01C7                   }
00044b 94d3      	INC  R13
00044c cfe2      	RJMP _0xA8
                 _0xA9:
                 ; 0000 01C8                   //data = (unsigned int)data_temp/6;
                 ; 0000 01C9                   data = (unsigned int)(data_temp/261)/14;
00044d 91a0 0160 	LDS  R26,_data_temp
00044f 91b0 0161 	LDS  R27,_data_temp+1
000451 9180 0162 	LDS  R24,_data_temp+2
000453 9190 0163 	LDS  R25,_data_temp+3
                +
000455 e0e5     +LDI R30 , LOW ( 0x105 )
000456 e0f1     +LDI R31 , HIGH ( 0x105 )
000457 e060     +LDI R22 , BYTE3 ( 0x105 )
000458 e070     +LDI R23 , BYTE4 ( 0x105 )
                 	__GETD1N 0x105
000459 d4c9      	RCALL __DIVD21U
00045a 2766      	CLR  R22
00045b 2777      	CLR  R23
00045c 01df      	MOVW R26,R30
00045d e0ee      	LDI  R30,LOW(14)
00045e e0f0      	LDI  R31,HIGH(14)
00045f d4b0      	RCALL __DIVW21U
000460 015f      	MOVW R10,R30
                 ; 0000 01CA             }
                 ; 0000 01CB       }
                 _0x98:
                 ; 0000 01CC       else if(!RN_INPUT)
000461 c2c6      	RJMP _0xAA
                 _0x97:
000462 999b      	SBIC 0x13,3
000463 c0eb      	RJMP _0xAB
                 ; 0000 01CD       {
                 ; 0000 01CE             LED_SELECT(RN);
000464 e0a4      	LDI  R26,LOW(4)
000465 dca3      	RCALL _LED_SELECT
                 ; 0000 01CF             SELECT_INPUT_COMPARE(RN);
000466 e0a4      	LDI  R26,LOW(4)
000467 dd06      	RCALL _SELECT_INPUT_COMPARE
                 ; 0000 01D0            if(loop_read_cnt > 10)
000468 e0ea      	LDI  R30,LOW(10)
000469 15ec      	CP   R30,R12
00046a f008      	BRLO PC+2
00046b c0e2      	RJMP _0xAC
                 ; 0000 01D1             {
                 ; 0000 01D2                   // data = ADE7753_READ(1,VRMS)/253;
                 ; 0000 01D3                   loop_read_cnt = 0;
00046c 24cc      	CLR  R12
                 ; 0000 01D4                   data_buff[buff_cnt++] = ADE7753_READ(1,VRMS);
00046d 2de8      	MOV  R30,R8
00046e 9483      	INC  R8
00046f e6a4      	LDI  R26,LOW(_data_buff)
000470 e0b1      	LDI  R27,HIGH(_data_buff)
000471 e0f0      	LDI  R31,0
000472 d493      	RCALL __LSLW2
000473 0fea      	ADD  R30,R26
000474 1ffb      	ADC  R31,R27
000475 93ff      	PUSH R31
000476 93ef      	PUSH R30
000477 e0e1      	LDI  R30,LOW(1)
000478 93ea      	ST   -Y,R30
000479 e1e7      	LDI  R30,LOW(23)
00047a 93ea      	ST   -Y,R30
00047b e0a3      	LDI  R26,LOW(3)
00047c d3e8      	RCALL _ADE7753_READ
00047d 91af      	POP  R26
00047e 91bf      	POP  R27
00047f d4d1      	RCALL __PUTDP1
                 ; 0000 01D5                   if(buff_cnt >= 40)
000480 e2e8      	LDI  R30,LOW(40)
000481 168e      	CP   R8,R30
000482 f008      	BRLO _0xAD
                 ; 0000 01D6                   {
                 ; 0000 01D7                         buff_cnt = 0;
000483 2488      	CLR  R8
                 ; 0000 01D8                   }
                 ; 0000 01D9                   data_temp = 0;
                 _0xAD:
000484 e0e0      	LDI  R30,LOW(0)
000485 93e0 0160 	STS  _data_temp,R30
000487 93e0 0161 	STS  _data_temp+1,R30
000489 93e0 0162 	STS  _data_temp+2,R30
00048b 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 01DA                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
00048d 24dd      	CLR  R13
                 _0xAF:
00048e e2e8      	LDI  R30,LOW(40)
00048f 16de      	CP   R13,R30
000490 f4d8      	BRSH _0xB0
                 ; 0000 01DB                   {
                 ; 0000 01DC                         data_temp += data_buff[loop_cnt];
000491 2ded      	MOV  R30,R13
000492 e6a4      	LDI  R26,LOW(_data_buff)
000493 e0b1      	LDI  R27,HIGH(_data_buff)
000494 e0f0      	LDI  R31,0
000495 d470      	RCALL __LSLW2
000496 0fae      	ADD  R26,R30
000497 1fbf      	ADC  R27,R31
000498 d4b2      	RCALL __GETD1P
000499 91a0 0160 	LDS  R26,_data_temp
00049b 91b0 0161 	LDS  R27,_data_temp+1
00049d 9180 0162 	LDS  R24,_data_temp+2
00049f 9190 0163 	LDS  R25,_data_temp+3
0004a1 d447      	RCALL __ADDD12
0004a2 93e0 0160 	STS  _data_temp,R30
0004a4 93f0 0161 	STS  _data_temp+1,R31
0004a6 9360 0162 	STS  _data_temp+2,R22
0004a8 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 01DD                   }
0004aa 94d3      	INC  R13
0004ab cfe2      	RJMP _0xAF
                 _0xB0:
                 ; 0000 01DE 
                 ; 0000 01DF                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
0004ac 24dd      	CLR  R13
                 _0xB2:
0004ad e2e8      	LDI  R30,LOW(40)
0004ae 16de      	CP   R13,R30
0004af f4a0      	BRSH _0xB3
                 ; 0000 01E0                   {
                 ; 0000 01E1                         Uint_data_temp[loop_cnt] = data_buff[loop_cnt];
0004b0 2ded      	MOV  R30,R13
0004b1 e0f0      	LDI  R31,0
0004b2 01de      	MOVW R26,R28
0004b3 9614      	ADIW R26,4
0004b4 d451      	RCALL __LSLW2
0004b5 0fea      	ADD  R30,R26
0004b6 1ffb      	ADC  R31,R27
0004b7 010f      	MOVW R0,R30
0004b8 2ded      	MOV  R30,R13
0004b9 e6a4      	LDI  R26,LOW(_data_buff)
0004ba e0b1      	LDI  R27,HIGH(_data_buff)
0004bb e0f0      	LDI  R31,0
0004bc d449      	RCALL __LSLW2
0004bd 0fae      	ADD  R26,R30
0004be 1fbf      	ADC  R27,R31
0004bf d48b      	RCALL __GETD1P
0004c0 01d0      	MOVW R26,R0
0004c1 d48f      	RCALL __PUTDP1
                 ; 0000 01E2                   }
0004c2 94d3      	INC  R13
0004c3 cfe9      	RJMP _0xB2
                 _0xB3:
                 ; 0000 01E3 
                 ; 0000 01E4                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
0004c4 24dd      	CLR  R13
                 _0xB5:
0004c5 e2e8      	LDI  R30,LOW(40)
0004c6 16de      	CP   R13,R30
0004c7 f008      	BRLO PC+2
0004c8 c048      	RJMP _0xB6
                 ; 0000 01E5                   {
                 ; 0000 01E6                         for(Uc_temp_cnt = loop_cnt;Uc_temp_cnt<40;Uc_temp_cnt++)
0004c9 2d1d      	MOV  R17,R13
                 _0xB8:
0004ca 3218      	CPI  R17,40
0004cb f008      	BRLO PC+2
0004cc c042      	RJMP _0xB9
                 ; 0000 01E7                         {
                 ; 0000 01E8                               if(Uint_data_temp[loop_cnt] > Uint_data_temp[Uc_temp_cnt])
0004cd 2ded      	MOV  R30,R13
0004ce e0f0      	LDI  R31,0
0004cf 01de      	MOVW R26,R28
0004d0 9614      	ADIW R26,4
0004d1 d434      	RCALL __LSLW2
0004d2 0fae      	ADD  R26,R30
0004d3 1fbf      	ADC  R27,R31
0004d4 d476      	RCALL __GETD1P
0004d5 937f      	PUSH R23
0004d6 936f      	PUSH R22
0004d7 93ff      	PUSH R31
0004d8 93ef      	PUSH R30
0004d9 2fe1      	MOV  R30,R17
0004da e0f0      	LDI  R31,0
0004db 01de      	MOVW R26,R28
0004dc 9614      	ADIW R26,4
0004dd d428      	RCALL __LSLW2
0004de 0fae      	ADD  R26,R30
0004df 1fbf      	ADC  R27,R31
0004e0 d46a      	RCALL __GETD1P
0004e1 91af      	POP  R26
0004e2 91bf      	POP  R27
0004e3 918f      	POP  R24
0004e4 919f      	POP  R25
0004e5 d47a      	RCALL __CPD12
0004e6 f530      	BRSH _0xBA
                 ; 0000 01E9                               {
                 ; 0000 01EA                                     Uint_temp = Uint_data_temp[loop_cnt];
0004e7 2ded      	MOV  R30,R13
0004e8 e0f0      	LDI  R31,0
0004e9 01de      	MOVW R26,R28
0004ea 9614      	ADIW R26,4
0004eb d41a      	RCALL __LSLW2
0004ec 0fae      	ADD  R26,R30
0004ed 1fbf      	ADC  R27,R31
0004ee 912d      	LD   R18,X+
0004ef 913c      	LD   R19,X
                 ; 0000 01EB                                     Uint_data_temp[loop_cnt] = Uint_data_temp[Uc_temp_cnt];
0004f0 2ded      	MOV  R30,R13
0004f1 e0f0      	LDI  R31,0
0004f2 01de      	MOVW R26,R28
0004f3 9614      	ADIW R26,4
0004f4 d411      	RCALL __LSLW2
0004f5 0fea      	ADD  R30,R26
0004f6 1ffb      	ADC  R31,R27
0004f7 010f      	MOVW R0,R30
0004f8 2fe1      	MOV  R30,R17
0004f9 e0f0      	LDI  R31,0
0004fa 01de      	MOVW R26,R28
0004fb 9614      	ADIW R26,4
0004fc d409      	RCALL __LSLW2
0004fd 0fae      	ADD  R26,R30
0004fe 1fbf      	ADC  R27,R31
0004ff d44b      	RCALL __GETD1P
000500 01d0      	MOVW R26,R0
000501 d44f      	RCALL __PUTDP1
                 ; 0000 01EC                                     Uint_data_temp[Uc_temp_cnt] = Uint_temp;
000502 2fe1      	MOV  R30,R17
000503 e0f0      	LDI  R31,0
000504 01de      	MOVW R26,R28
000505 9614      	ADIW R26,4
000506 d3ff      	RCALL __LSLW2
000507 0fae      	ADD  R26,R30
000508 1fbf      	ADC  R27,R31
000509 01f9      	MOVW R30,R18
00050a 2766      	CLR  R22
00050b 2777      	CLR  R23
00050c d444      	RCALL __PUTDP1
                 ; 0000 01ED                               }
                 ; 0000 01EE                         }
                 _0xBA:
00050d 5f1f      	SUBI R17,-1
00050e cfbb      	RJMP _0xB8
                 _0xB9:
                 ; 0000 01EF                   }
00050f 94d3      	INC  R13
000510 cfb4      	RJMP _0xB5
                 _0xB6:
                 ; 0000 01F0 
                 ; 0000 01F1                   data_temp = 0;
000511 e0e0      	LDI  R30,LOW(0)
000512 93e0 0160 	STS  _data_temp,R30
000514 93e0 0161 	STS  _data_temp+1,R30
000516 93e0 0162 	STS  _data_temp+2,R30
000518 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 01F2                   for(loop_cnt = 13;loop_cnt<27;loop_cnt++)
00051a e0ed      	LDI  R30,LOW(13)
00051b 2ede      	MOV  R13,R30
                 _0xBC:
00051c e1eb      	LDI  R30,LOW(27)
00051d 16de      	CP   R13,R30
00051e f4d8      	BRSH _0xBD
                 ; 0000 01F3                   {
                 ; 0000 01F4                         data_temp += data_buff[loop_cnt];
00051f 2ded      	MOV  R30,R13
000520 e6a4      	LDI  R26,LOW(_data_buff)
000521 e0b1      	LDI  R27,HIGH(_data_buff)
000522 e0f0      	LDI  R31,0
000523 d3e2      	RCALL __LSLW2
000524 0fae      	ADD  R26,R30
000525 1fbf      	ADC  R27,R31
000526 d424      	RCALL __GETD1P
000527 91a0 0160 	LDS  R26,_data_temp
000529 91b0 0161 	LDS  R27,_data_temp+1
00052b 9180 0162 	LDS  R24,_data_temp+2
00052d 9190 0163 	LDS  R25,_data_temp+3
00052f d3b9      	RCALL __ADDD12
000530 93e0 0160 	STS  _data_temp,R30
000532 93f0 0161 	STS  _data_temp+1,R31
000534 9360 0162 	STS  _data_temp+2,R22
000536 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 01F5                   }
000538 94d3      	INC  R13
000539 cfe2      	RJMP _0xBC
                 _0xBD:
                 ; 0000 01F6                   //data = (unsigned int)data_temp/6;
                 ; 0000 01F7                   data = (unsigned int)(data_temp/261)/14;
00053a 91a0 0160 	LDS  R26,_data_temp
00053c 91b0 0161 	LDS  R27,_data_temp+1
00053e 9180 0162 	LDS  R24,_data_temp+2
000540 9190 0163 	LDS  R25,_data_temp+3
                +
000542 e0e5     +LDI R30 , LOW ( 0x105 )
000543 e0f1     +LDI R31 , HIGH ( 0x105 )
000544 e060     +LDI R22 , BYTE3 ( 0x105 )
000545 e070     +LDI R23 , BYTE4 ( 0x105 )
                 	__GETD1N 0x105
000546 d3dc      	RCALL __DIVD21U
000547 2766      	CLR  R22
000548 2777      	CLR  R23
000549 01df      	MOVW R26,R30
00054a e0ee      	LDI  R30,LOW(14)
00054b e0f0      	LDI  R31,HIGH(14)
00054c d3c3      	RCALL __DIVW21U
00054d 015f      	MOVW R10,R30
                 ; 0000 01F8             }
                 ; 0000 01F9 
                 ; 0000 01FA       }
                 _0xAC:
                 ; 0000 01FB       else if(!SN_INPUT)
00054e c1d9      	RJMP _0xBE
                 _0xAB:
00054f 999c      	SBIC 0x13,4
000550 c0eb      	RJMP _0xBF
                 ; 0000 01FC       {
                 ; 0000 01FD             LED_SELECT(SN);
000551 e0a5      	LDI  R26,LOW(5)
000552 dbb6      	RCALL _LED_SELECT
                 ; 0000 01FE             SELECT_INPUT_COMPARE(SN);
000553 e0a5      	LDI  R26,LOW(5)
000554 dc19      	RCALL _SELECT_INPUT_COMPARE
                 ; 0000 01FF             if(loop_read_cnt > 10)
000555 e0ea      	LDI  R30,LOW(10)
000556 15ec      	CP   R30,R12
000557 f008      	BRLO PC+2
000558 c0e2      	RJMP _0xC0
                 ; 0000 0200             {
                 ; 0000 0201                   loop_read_cnt = 0;
000559 24cc      	CLR  R12
                 ; 0000 0202                   data_buff[buff_cnt++] = ADE7753_READ(1,VRMS);
00055a 2de8      	MOV  R30,R8
00055b 9483      	INC  R8
00055c e6a4      	LDI  R26,LOW(_data_buff)
00055d e0b1      	LDI  R27,HIGH(_data_buff)
00055e e0f0      	LDI  R31,0
00055f d3a6      	RCALL __LSLW2
000560 0fea      	ADD  R30,R26
000561 1ffb      	ADC  R31,R27
000562 93ff      	PUSH R31
000563 93ef      	PUSH R30
000564 e0e1      	LDI  R30,LOW(1)
000565 93ea      	ST   -Y,R30
000566 e1e7      	LDI  R30,LOW(23)
000567 93ea      	ST   -Y,R30
000568 e0a3      	LDI  R26,LOW(3)
000569 d2fb      	RCALL _ADE7753_READ
00056a 91af      	POP  R26
00056b 91bf      	POP  R27
00056c d3e4      	RCALL __PUTDP1
                 ; 0000 0203                   if(buff_cnt >= 40)
00056d e2e8      	LDI  R30,LOW(40)
00056e 168e      	CP   R8,R30
00056f f008      	BRLO _0xC1
                 ; 0000 0204                   {
                 ; 0000 0205                         buff_cnt = 0;
000570 2488      	CLR  R8
                 ; 0000 0206                   }
                 ; 0000 0207                   data_temp = 0;
                 _0xC1:
000571 e0e0      	LDI  R30,LOW(0)
000572 93e0 0160 	STS  _data_temp,R30
000574 93e0 0161 	STS  _data_temp+1,R30
000576 93e0 0162 	STS  _data_temp+2,R30
000578 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 0208                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
00057a 24dd      	CLR  R13
                 _0xC3:
00057b e2e8      	LDI  R30,LOW(40)
00057c 16de      	CP   R13,R30
00057d f4d8      	BRSH _0xC4
                 ; 0000 0209                   {
                 ; 0000 020A                         data_temp += data_buff[loop_cnt];
00057e 2ded      	MOV  R30,R13
00057f e6a4      	LDI  R26,LOW(_data_buff)
000580 e0b1      	LDI  R27,HIGH(_data_buff)
000581 e0f0      	LDI  R31,0
000582 d383      	RCALL __LSLW2
000583 0fae      	ADD  R26,R30
000584 1fbf      	ADC  R27,R31
000585 d3c5      	RCALL __GETD1P
000586 91a0 0160 	LDS  R26,_data_temp
000588 91b0 0161 	LDS  R27,_data_temp+1
00058a 9180 0162 	LDS  R24,_data_temp+2
00058c 9190 0163 	LDS  R25,_data_temp+3
00058e d35a      	RCALL __ADDD12
00058f 93e0 0160 	STS  _data_temp,R30
000591 93f0 0161 	STS  _data_temp+1,R31
000593 9360 0162 	STS  _data_temp+2,R22
000595 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 020B                   }
000597 94d3      	INC  R13
000598 cfe2      	RJMP _0xC3
                 _0xC4:
                 ; 0000 020C 
                 ; 0000 020D                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
000599 24dd      	CLR  R13
                 _0xC6:
00059a e2e8      	LDI  R30,LOW(40)
00059b 16de      	CP   R13,R30
00059c f4a0      	BRSH _0xC7
                 ; 0000 020E                   {
                 ; 0000 020F                         Uint_data_temp[loop_cnt] = data_buff[loop_cnt];
00059d 2ded      	MOV  R30,R13
00059e e0f0      	LDI  R31,0
00059f 01de      	MOVW R26,R28
0005a0 9614      	ADIW R26,4
0005a1 d364      	RCALL __LSLW2
0005a2 0fea      	ADD  R30,R26
0005a3 1ffb      	ADC  R31,R27
0005a4 010f      	MOVW R0,R30
0005a5 2ded      	MOV  R30,R13
0005a6 e6a4      	LDI  R26,LOW(_data_buff)
0005a7 e0b1      	LDI  R27,HIGH(_data_buff)
0005a8 e0f0      	LDI  R31,0
0005a9 d35c      	RCALL __LSLW2
0005aa 0fae      	ADD  R26,R30
0005ab 1fbf      	ADC  R27,R31
0005ac d39e      	RCALL __GETD1P
0005ad 01d0      	MOVW R26,R0
0005ae d3a2      	RCALL __PUTDP1
                 ; 0000 0210                   }
0005af 94d3      	INC  R13
0005b0 cfe9      	RJMP _0xC6
                 _0xC7:
                 ; 0000 0211 
                 ; 0000 0212                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
0005b1 24dd      	CLR  R13
                 _0xC9:
0005b2 e2e8      	LDI  R30,LOW(40)
0005b3 16de      	CP   R13,R30
0005b4 f008      	BRLO PC+2
0005b5 c048      	RJMP _0xCA
                 ; 0000 0213                   {
                 ; 0000 0214                         for(Uc_temp_cnt = loop_cnt;Uc_temp_cnt<40;Uc_temp_cnt++)
0005b6 2d1d      	MOV  R17,R13
                 _0xCC:
0005b7 3218      	CPI  R17,40
0005b8 f008      	BRLO PC+2
0005b9 c042      	RJMP _0xCD
                 ; 0000 0215                         {
                 ; 0000 0216                               if(Uint_data_temp[loop_cnt] > Uint_data_temp[Uc_temp_cnt])
0005ba 2ded      	MOV  R30,R13
0005bb e0f0      	LDI  R31,0
0005bc 01de      	MOVW R26,R28
0005bd 9614      	ADIW R26,4
0005be d347      	RCALL __LSLW2
0005bf 0fae      	ADD  R26,R30
0005c0 1fbf      	ADC  R27,R31
0005c1 d389      	RCALL __GETD1P
0005c2 937f      	PUSH R23
0005c3 936f      	PUSH R22
0005c4 93ff      	PUSH R31
0005c5 93ef      	PUSH R30
0005c6 2fe1      	MOV  R30,R17
0005c7 e0f0      	LDI  R31,0
0005c8 01de      	MOVW R26,R28
0005c9 9614      	ADIW R26,4
0005ca d33b      	RCALL __LSLW2
0005cb 0fae      	ADD  R26,R30
0005cc 1fbf      	ADC  R27,R31
0005cd d37d      	RCALL __GETD1P
0005ce 91af      	POP  R26
0005cf 91bf      	POP  R27
0005d0 918f      	POP  R24
0005d1 919f      	POP  R25
0005d2 d38d      	RCALL __CPD12
0005d3 f530      	BRSH _0xCE
                 ; 0000 0217                               {
                 ; 0000 0218                                     Uint_temp = Uint_data_temp[loop_cnt];
0005d4 2ded      	MOV  R30,R13
0005d5 e0f0      	LDI  R31,0
0005d6 01de      	MOVW R26,R28
0005d7 9614      	ADIW R26,4
0005d8 d32d      	RCALL __LSLW2
0005d9 0fae      	ADD  R26,R30
0005da 1fbf      	ADC  R27,R31
0005db 912d      	LD   R18,X+
0005dc 913c      	LD   R19,X
                 ; 0000 0219                                     Uint_data_temp[loop_cnt] = Uint_data_temp[Uc_temp_cnt];
0005dd 2ded      	MOV  R30,R13
0005de e0f0      	LDI  R31,0
0005df 01de      	MOVW R26,R28
0005e0 9614      	ADIW R26,4
0005e1 d324      	RCALL __LSLW2
0005e2 0fea      	ADD  R30,R26
0005e3 1ffb      	ADC  R31,R27
0005e4 010f      	MOVW R0,R30
0005e5 2fe1      	MOV  R30,R17
0005e6 e0f0      	LDI  R31,0
0005e7 01de      	MOVW R26,R28
0005e8 9614      	ADIW R26,4
0005e9 d31c      	RCALL __LSLW2
0005ea 0fae      	ADD  R26,R30
0005eb 1fbf      	ADC  R27,R31
0005ec d35e      	RCALL __GETD1P
0005ed 01d0      	MOVW R26,R0
0005ee d362      	RCALL __PUTDP1
                 ; 0000 021A                                     Uint_data_temp[Uc_temp_cnt] = Uint_temp;
0005ef 2fe1      	MOV  R30,R17
0005f0 e0f0      	LDI  R31,0
0005f1 01de      	MOVW R26,R28
0005f2 9614      	ADIW R26,4
0005f3 d312      	RCALL __LSLW2
0005f4 0fae      	ADD  R26,R30
0005f5 1fbf      	ADC  R27,R31
0005f6 01f9      	MOVW R30,R18
0005f7 2766      	CLR  R22
0005f8 2777      	CLR  R23
0005f9 d357      	RCALL __PUTDP1
                 ; 0000 021B                               }
                 ; 0000 021C                         }
                 _0xCE:
0005fa 5f1f      	SUBI R17,-1
0005fb cfbb      	RJMP _0xCC
                 _0xCD:
                 ; 0000 021D                   }
0005fc 94d3      	INC  R13
0005fd cfb4      	RJMP _0xC9
                 _0xCA:
                 ; 0000 021E 
                 ; 0000 021F                   data_temp = 0;
0005fe e0e0      	LDI  R30,LOW(0)
0005ff 93e0 0160 	STS  _data_temp,R30
000601 93e0 0161 	STS  _data_temp+1,R30
000603 93e0 0162 	STS  _data_temp+2,R30
000605 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 0220                   for(loop_cnt = 13;loop_cnt<27;loop_cnt++)
000607 e0ed      	LDI  R30,LOW(13)
000608 2ede      	MOV  R13,R30
                 _0xD0:
000609 e1eb      	LDI  R30,LOW(27)
00060a 16de      	CP   R13,R30
00060b f4d8      	BRSH _0xD1
                 ; 0000 0221                   {
                 ; 0000 0222                         data_temp += data_buff[loop_cnt];
00060c 2ded      	MOV  R30,R13
00060d e6a4      	LDI  R26,LOW(_data_buff)
00060e e0b1      	LDI  R27,HIGH(_data_buff)
00060f e0f0      	LDI  R31,0
000610 d2f5      	RCALL __LSLW2
000611 0fae      	ADD  R26,R30
000612 1fbf      	ADC  R27,R31
000613 d337      	RCALL __GETD1P
000614 91a0 0160 	LDS  R26,_data_temp
000616 91b0 0161 	LDS  R27,_data_temp+1
000618 9180 0162 	LDS  R24,_data_temp+2
00061a 9190 0163 	LDS  R25,_data_temp+3
00061c d2cc      	RCALL __ADDD12
00061d 93e0 0160 	STS  _data_temp,R30
00061f 93f0 0161 	STS  _data_temp+1,R31
000621 9360 0162 	STS  _data_temp+2,R22
000623 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 0223                   }
000625 94d3      	INC  R13
000626 cfe2      	RJMP _0xD0
                 _0xD1:
                 ; 0000 0224                   data = (unsigned int)(data_temp/253)/14;
000627 91a0 0160 	LDS  R26,_data_temp
000629 91b0 0161 	LDS  R27,_data_temp+1
00062b 9180 0162 	LDS  R24,_data_temp+2
00062d 9190 0163 	LDS  R25,_data_temp+3
                +
00062f efed     +LDI R30 , LOW ( 0xFD )
000630 e0f0     +LDI R31 , HIGH ( 0xFD )
000631 e060     +LDI R22 , BYTE3 ( 0xFD )
000632 e070     +LDI R23 , BYTE4 ( 0xFD )
                 	__GETD1N 0xFD
000633 d2ef      	RCALL __DIVD21U
000634 2766      	CLR  R22
000635 2777      	CLR  R23
000636 01df      	MOVW R26,R30
000637 e0ee      	LDI  R30,LOW(14)
000638 e0f0      	LDI  R31,HIGH(14)
000639 d2d6      	RCALL __DIVW21U
00063a 015f      	MOVW R10,R30
                 ; 0000 0225             }
                 ; 0000 0226       }
                 _0xC0:
                 ; 0000 0227       else if(!TN_INPUT)
00063b c0ec      	RJMP _0xD2
                 _0xBF:
00063c 999d      	SBIC 0x13,5
00063d c0ea      	RJMP _0xD3
                 ; 0000 0228       {
                 ; 0000 0229             LED_SELECT(TN);
00063e e0a6      	LDI  R26,LOW(6)
00063f dac9      	RCALL _LED_SELECT
                 ; 0000 022A             SELECT_INPUT_COMPARE(TN);
000640 e0a6      	LDI  R26,LOW(6)
000641 db2c      	RCALL _SELECT_INPUT_COMPARE
                 ; 0000 022B             if(loop_read_cnt > 10)
000642 e0ea      	LDI  R30,LOW(10)
000643 15ec      	CP   R30,R12
000644 f008      	BRLO PC+2
000645 c0e2      	RJMP _0xD4
                 ; 0000 022C             {
                 ; 0000 022D                   // data = ADE7753_READ(1,VRMS)/253;
                 ; 0000 022E                   loop_read_cnt = 0;
000646 24cc      	CLR  R12
                 ; 0000 022F                   data_buff[buff_cnt++] = ADE7753_READ(1,VRMS);
000647 2de8      	MOV  R30,R8
000648 9483      	INC  R8
000649 e6a4      	LDI  R26,LOW(_data_buff)
00064a e0b1      	LDI  R27,HIGH(_data_buff)
00064b e0f0      	LDI  R31,0
00064c d2b9      	RCALL __LSLW2
00064d 0fea      	ADD  R30,R26
00064e 1ffb      	ADC  R31,R27
00064f 93ff      	PUSH R31
000650 93ef      	PUSH R30
000651 e0e1      	LDI  R30,LOW(1)
000652 93ea      	ST   -Y,R30
000653 e1e7      	LDI  R30,LOW(23)
000654 93ea      	ST   -Y,R30
000655 e0a3      	LDI  R26,LOW(3)
000656 d20e      	RCALL _ADE7753_READ
000657 91af      	POP  R26
000658 91bf      	POP  R27
000659 d2f7      	RCALL __PUTDP1
                 ; 0000 0230                   if(buff_cnt >= 40)
00065a e2e8      	LDI  R30,LOW(40)
00065b 168e      	CP   R8,R30
00065c f008      	BRLO _0xD5
                 ; 0000 0231                   {
                 ; 0000 0232                         buff_cnt = 0;
00065d 2488      	CLR  R8
                 ; 0000 0233                   }
                 ; 0000 0234                   data_temp = 0;
                 _0xD5:
00065e e0e0      	LDI  R30,LOW(0)
00065f 93e0 0160 	STS  _data_temp,R30
000661 93e0 0161 	STS  _data_temp+1,R30
000663 93e0 0162 	STS  _data_temp+2,R30
000665 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 0235                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
000667 24dd      	CLR  R13
                 _0xD7:
000668 e2e8      	LDI  R30,LOW(40)
000669 16de      	CP   R13,R30
00066a f4d8      	BRSH _0xD8
                 ; 0000 0236                   {
                 ; 0000 0237                         data_temp += data_buff[loop_cnt];
00066b 2ded      	MOV  R30,R13
00066c e6a4      	LDI  R26,LOW(_data_buff)
00066d e0b1      	LDI  R27,HIGH(_data_buff)
00066e e0f0      	LDI  R31,0
00066f d296      	RCALL __LSLW2
000670 0fae      	ADD  R26,R30
000671 1fbf      	ADC  R27,R31
000672 d2d8      	RCALL __GETD1P
000673 91a0 0160 	LDS  R26,_data_temp
000675 91b0 0161 	LDS  R27,_data_temp+1
000677 9180 0162 	LDS  R24,_data_temp+2
000679 9190 0163 	LDS  R25,_data_temp+3
00067b d26d      	RCALL __ADDD12
00067c 93e0 0160 	STS  _data_temp,R30
00067e 93f0 0161 	STS  _data_temp+1,R31
000680 9360 0162 	STS  _data_temp+2,R22
000682 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 0238                   }
000684 94d3      	INC  R13
000685 cfe2      	RJMP _0xD7
                 _0xD8:
                 ; 0000 0239 
                 ; 0000 023A                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
000686 24dd      	CLR  R13
                 _0xDA:
000687 e2e8      	LDI  R30,LOW(40)
000688 16de      	CP   R13,R30
000689 f4a0      	BRSH _0xDB
                 ; 0000 023B                   {
                 ; 0000 023C                         Uint_data_temp[loop_cnt] = data_buff[loop_cnt];
00068a 2ded      	MOV  R30,R13
00068b e0f0      	LDI  R31,0
00068c 01de      	MOVW R26,R28
00068d 9614      	ADIW R26,4
00068e d277      	RCALL __LSLW2
00068f 0fea      	ADD  R30,R26
000690 1ffb      	ADC  R31,R27
000691 010f      	MOVW R0,R30
000692 2ded      	MOV  R30,R13
000693 e6a4      	LDI  R26,LOW(_data_buff)
000694 e0b1      	LDI  R27,HIGH(_data_buff)
000695 e0f0      	LDI  R31,0
000696 d26f      	RCALL __LSLW2
000697 0fae      	ADD  R26,R30
000698 1fbf      	ADC  R27,R31
000699 d2b1      	RCALL __GETD1P
00069a 01d0      	MOVW R26,R0
00069b d2b5      	RCALL __PUTDP1
                 ; 0000 023D                   }
00069c 94d3      	INC  R13
00069d cfe9      	RJMP _0xDA
                 _0xDB:
                 ; 0000 023E 
                 ; 0000 023F                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
00069e 24dd      	CLR  R13
                 _0xDD:
00069f e2e8      	LDI  R30,LOW(40)
0006a0 16de      	CP   R13,R30
0006a1 f008      	BRLO PC+2
0006a2 c048      	RJMP _0xDE
                 ; 0000 0240                   {
                 ; 0000 0241                         for(Uc_temp_cnt = loop_cnt;Uc_temp_cnt<40;Uc_temp_cnt++)
0006a3 2d1d      	MOV  R17,R13
                 _0xE0:
0006a4 3218      	CPI  R17,40
0006a5 f008      	BRLO PC+2
0006a6 c042      	RJMP _0xE1
                 ; 0000 0242                         {
                 ; 0000 0243                               if(Uint_data_temp[loop_cnt] > Uint_data_temp[Uc_temp_cnt])
0006a7 2ded      	MOV  R30,R13
0006a8 e0f0      	LDI  R31,0
0006a9 01de      	MOVW R26,R28
0006aa 9614      	ADIW R26,4
0006ab d25a      	RCALL __LSLW2
0006ac 0fae      	ADD  R26,R30
0006ad 1fbf      	ADC  R27,R31
0006ae d29c      	RCALL __GETD1P
0006af 937f      	PUSH R23
0006b0 936f      	PUSH R22
0006b1 93ff      	PUSH R31
0006b2 93ef      	PUSH R30
0006b3 2fe1      	MOV  R30,R17
0006b4 e0f0      	LDI  R31,0
0006b5 01de      	MOVW R26,R28
0006b6 9614      	ADIW R26,4
0006b7 d24e      	RCALL __LSLW2
0006b8 0fae      	ADD  R26,R30
0006b9 1fbf      	ADC  R27,R31
0006ba d290      	RCALL __GETD1P
0006bb 91af      	POP  R26
0006bc 91bf      	POP  R27
0006bd 918f      	POP  R24
0006be 919f      	POP  R25
0006bf d2a0      	RCALL __CPD12
0006c0 f530      	BRSH _0xE2
                 ; 0000 0244                               {
                 ; 0000 0245                                     Uint_temp = Uint_data_temp[loop_cnt];
0006c1 2ded      	MOV  R30,R13
0006c2 e0f0      	LDI  R31,0
0006c3 01de      	MOVW R26,R28
0006c4 9614      	ADIW R26,4
0006c5 d240      	RCALL __LSLW2
0006c6 0fae      	ADD  R26,R30
0006c7 1fbf      	ADC  R27,R31
0006c8 912d      	LD   R18,X+
0006c9 913c      	LD   R19,X
                 ; 0000 0246                                     Uint_data_temp[loop_cnt] = Uint_data_temp[Uc_temp_cnt];
0006ca 2ded      	MOV  R30,R13
0006cb e0f0      	LDI  R31,0
0006cc 01de      	MOVW R26,R28
0006cd 9614      	ADIW R26,4
0006ce d237      	RCALL __LSLW2
0006cf 0fea      	ADD  R30,R26
0006d0 1ffb      	ADC  R31,R27
0006d1 010f      	MOVW R0,R30
0006d2 2fe1      	MOV  R30,R17
0006d3 e0f0      	LDI  R31,0
0006d4 01de      	MOVW R26,R28
0006d5 9614      	ADIW R26,4
0006d6 d22f      	RCALL __LSLW2
0006d7 0fae      	ADD  R26,R30
0006d8 1fbf      	ADC  R27,R31
0006d9 d271      	RCALL __GETD1P
0006da 01d0      	MOVW R26,R0
0006db d275      	RCALL __PUTDP1
                 ; 0000 0247                                     Uint_data_temp[Uc_temp_cnt] = Uint_temp;
0006dc 2fe1      	MOV  R30,R17
0006dd e0f0      	LDI  R31,0
0006de 01de      	MOVW R26,R28
0006df 9614      	ADIW R26,4
0006e0 d225      	RCALL __LSLW2
0006e1 0fae      	ADD  R26,R30
0006e2 1fbf      	ADC  R27,R31
0006e3 01f9      	MOVW R30,R18
0006e4 2766      	CLR  R22
0006e5 2777      	CLR  R23
0006e6 d26a      	RCALL __PUTDP1
                 ; 0000 0248                               }
                 ; 0000 0249                         }
                 _0xE2:
0006e7 5f1f      	SUBI R17,-1
0006e8 cfbb      	RJMP _0xE0
                 _0xE1:
                 ; 0000 024A                   }
0006e9 94d3      	INC  R13
0006ea cfb4      	RJMP _0xDD
                 _0xDE:
                 ; 0000 024B 
                 ; 0000 024C                   data_temp = 0;
0006eb e0e0      	LDI  R30,LOW(0)
0006ec 93e0 0160 	STS  _data_temp,R30
0006ee 93e0 0161 	STS  _data_temp+1,R30
0006f0 93e0 0162 	STS  _data_temp+2,R30
0006f2 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 024D                   for(loop_cnt = 13;loop_cnt<27;loop_cnt++)
0006f4 e0ed      	LDI  R30,LOW(13)
0006f5 2ede      	MOV  R13,R30
                 _0xE4:
0006f6 e1eb      	LDI  R30,LOW(27)
0006f7 16de      	CP   R13,R30
0006f8 f4d8      	BRSH _0xE5
                 ; 0000 024E                   {
                 ; 0000 024F                         data_temp += data_buff[loop_cnt];
0006f9 2ded      	MOV  R30,R13
0006fa e6a4      	LDI  R26,LOW(_data_buff)
0006fb e0b1      	LDI  R27,HIGH(_data_buff)
0006fc e0f0      	LDI  R31,0
0006fd d208      	RCALL __LSLW2
0006fe 0fae      	ADD  R26,R30
0006ff 1fbf      	ADC  R27,R31
000700 d24a      	RCALL __GETD1P
000701 91a0 0160 	LDS  R26,_data_temp
000703 91b0 0161 	LDS  R27,_data_temp+1
000705 9180 0162 	LDS  R24,_data_temp+2
000707 9190 0163 	LDS  R25,_data_temp+3
000709 d1df      	RCALL __ADDD12
00070a 93e0 0160 	STS  _data_temp,R30
00070c 93f0 0161 	STS  _data_temp+1,R31
00070e 9360 0162 	STS  _data_temp+2,R22
000710 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 0250                   }
000712 94d3      	INC  R13
000713 cfe2      	RJMP _0xE4
                 _0xE5:
                 ; 0000 0251                   //data = (unsigned int)data_temp/6;
                 ; 0000 0252                   data = (unsigned int)(data_temp/236)/14;
000714 91a0 0160 	LDS  R26,_data_temp
000716 91b0 0161 	LDS  R27,_data_temp+1
000718 9180 0162 	LDS  R24,_data_temp+2
00071a 9190 0163 	LDS  R25,_data_temp+3
                +
00071c eeec     +LDI R30 , LOW ( 0xEC )
00071d e0f0     +LDI R31 , HIGH ( 0xEC )
00071e e060     +LDI R22 , BYTE3 ( 0xEC )
00071f e070     +LDI R23 , BYTE4 ( 0xEC )
                 	__GETD1N 0xEC
000720 d202      	RCALL __DIVD21U
000721 2766      	CLR  R22
000722 2777      	CLR  R23
000723 01df      	MOVW R26,R30
000724 e0ee      	LDI  R30,LOW(14)
000725 e0f0      	LDI  R31,HIGH(14)
000726 d1e9      	RCALL __DIVW21U
000727 015f      	MOVW R10,R30
                 ; 0000 0253             }
                 ; 0000 0254       }
                 _0xD4:
                 ; 0000 0255 
                 ; 0000 0256       delay_ms(10);
                 _0xD3:
                 _0xD2:
                 _0xBE:
                 _0xAA:
                 _0x96:
                 _0x82:
000728 e0aa      	LDI  R26,LOW(10)
000729 e0b0      	LDI  R27,0
00072a d1b4      	RCALL _delay_ms
                 ; 0000 0257       loop_read_cnt++;
00072b 94c3      	INC  R12
                 ; 0000 0258 
                 ; 0000 0259 }
00072c d23d      	RCALL __LOADLOCR4
00072d 96ef      	ADIW R28,63
00072e 96ef      	ADIW R28,63
00072f 96a6      	ADIW R28,38
000730 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 025F {
                 _main:
                 ; .FSTART _main
                 ; 0000 0260 // Declare your local variables here
                 ; 0000 0261 unsigned long int   reg = 0;
                 ; 0000 0262 // Input/Output Ports initialization
                 ; 0000 0263 // Port B initialization
                 ; 0000 0264 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=In Bit1=Out Bit0=In
                 ; 0000 0265 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (0<<DDB0);
000731 9724      	SBIW R28,4
000732 e0e0      	LDI  R30,LOW(0)
000733 83e8      	ST   Y,R30
000734 83e9      	STD  Y+1,R30
000735 83ea      	STD  Y+2,R30
000736 83eb      	STD  Y+3,R30
                 ;	reg -> Y+0
000737 e2ea      	LDI  R30,LOW(42)
000738 bbe7      	OUT  0x17,R30
                 ; 0000 0266 // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=T Bit1=0 Bit0=T
                 ; 0000 0267 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000739 e0e0      	LDI  R30,LOW(0)
00073a bbe8      	OUT  0x18,R30
                 ; 0000 0268 
                 ; 0000 0269 // Port C initialization
                 ; 0000 026A // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 026B DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00073b bbe4      	OUT  0x14,R30
                 ; 0000 026C // State: Bit6=T Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 026D PORTC=(0<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
00073c e3ef      	LDI  R30,LOW(63)
00073d bbe5      	OUT  0x15,R30
                 ; 0000 026E 
                 ; 0000 026F // Port D initialization
                 ; 0000 0270 // Function: Bit7=Out Bit6=Out Bit5=In Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0271 DDRD=(1<<DDD7) | (1<<DDD6) | (0<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
00073e edef      	LDI  R30,LOW(223)
00073f bbe1      	OUT  0x11,R30
                 ; 0000 0272 // State: Bit7=0 Bit6=0 Bit5=T Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0273 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000740 e0e0      	LDI  R30,LOW(0)
000741 bbe2      	OUT  0x12,R30
                 ; 0000 0274 
                 ; 0000 0275 // Timer/Counter 0 initialization
                 ; 0000 0276 // Clock source: System Clock
                 ; 0000 0277 // Clock value: Timer 0 Stopped
                 ; 0000 0278 TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
000742 bfe3      	OUT  0x33,R30
                 ; 0000 0279 TCNT0=0x00;
000743 bfe2      	OUT  0x32,R30
                 ; 0000 027A 
                 ; 0000 027B // Timer/Counter 1 initialization
                 ; 0000 027C // Clock source: System Clock
                 ; 0000 027D // Clock value: 1382,400 kHz
                 ; 0000 027E // Mode: Normal top=0xFFFF
                 ; 0000 027F // OC1A output: Disconnected
                 ; 0000 0280 // OC1B output: Disconnected
                 ; 0000 0281 // Noise Canceler: Off
                 ; 0000 0282 // Input Capture on Falling Edge
                 ; 0000 0283 // Timer Period: 5,9997 ms
                 ; 0000 0284 // Timer1 Overflow Interrupt: On
                 ; 0000 0285 // Input Capture Interrupt: Off
                 ; 0000 0286 // Compare A Match Interrupt: Off
                 ; 0000 0287 // Compare B Match Interrupt: Off
                 ; 0000 0288 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000744 bdef      	OUT  0x2F,R30
                 ; 0000 0289 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
000745 e0e2      	LDI  R30,LOW(2)
000746 bdee      	OUT  0x2E,R30
                 ; 0000 028A TCNT1H=0xDF;
000747 edef      	LDI  R30,LOW(223)
000748 bded      	OUT  0x2D,R30
                 ; 0000 028B TCNT1L=0x9A;
000749 e9ea      	LDI  R30,LOW(154)
00074a bdec      	OUT  0x2C,R30
                 ; 0000 028C ICR1H=0x00;
00074b e0e0      	LDI  R30,LOW(0)
00074c bde7      	OUT  0x27,R30
                 ; 0000 028D ICR1L=0x00;
00074d bde6      	OUT  0x26,R30
                 ; 0000 028E OCR1AH=0x00;
00074e bdeb      	OUT  0x2B,R30
                 ; 0000 028F OCR1AL=0x00;
00074f bdea      	OUT  0x2A,R30
                 ; 0000 0290 OCR1BH=0x00;
000750 bde9      	OUT  0x29,R30
                 ; 0000 0291 OCR1BL=0x00;
000751 bde8      	OUT  0x28,R30
                 ; 0000 0292 
                 ; 0000 0293 // Timer/Counter 2 initialization
                 ; 0000 0294 // Clock source: System Clock
                 ; 0000 0295 // Clock value: Timer2 Stopped
                 ; 0000 0296 // Mode: Normal top=0xFF
                 ; 0000 0297 // OC2 output: Disconnected
                 ; 0000 0298 ASSR=0<<AS2;
000752 bde2      	OUT  0x22,R30
                 ; 0000 0299 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000753 bde5      	OUT  0x25,R30
                 ; 0000 029A TCNT2=0x00;
000754 bde4      	OUT  0x24,R30
                 ; 0000 029B OCR2=0x00;
000755 bde3      	OUT  0x23,R30
                 ; 0000 029C 
                 ; 0000 029D // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 029E TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<TOIE0);
000756 e0e4      	LDI  R30,LOW(4)
000757 bfe9      	OUT  0x39,R30
                 ; 0000 029F 
                 ; 0000 02A0 // External Interrupt(s) initialization
                 ; 0000 02A1 // INT0: Off
                 ; 0000 02A2 // INT1: Off
                 ; 0000 02A3 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000758 e0e0      	LDI  R30,LOW(0)
000759 bfe5      	OUT  0x35,R30
                 ; 0000 02A4 
                 ; 0000 02A5 // USART initialization
                 ; 0000 02A6 // USART disabled
                 ; 0000 02A7 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00075a b9ea      	OUT  0xA,R30
                 ; 0000 02A8 
                 ; 0000 02A9 // Analog Comparator initialization
                 ; 0000 02AA // Analog Comparator: Off
                 ; 0000 02AB // The Analog Comparator's positive input is
                 ; 0000 02AC // connected to the AIN0 pin
                 ; 0000 02AD // The Analog Comparator's negative input is
                 ; 0000 02AE // connected to the AIN1 pin
                 ; 0000 02AF ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00075b e8e0      	LDI  R30,LOW(128)
00075c b9e8      	OUT  0x8,R30
                 ; 0000 02B0 SFIOR=(0<<ACME);
00075d e0e0      	LDI  R30,LOW(0)
00075e bfe0      	OUT  0x30,R30
                 ; 0000 02B1 
                 ; 0000 02B2 // ADC initialization
                 ; 0000 02B3 // ADC disabled
                 ; 0000 02B4 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
00075f b9e6      	OUT  0x6,R30
                 ; 0000 02B5 
                 ; 0000 02B6 // SPI initialization
                 ; 0000 02B7 // SPI disabled
                 ; 0000 02B8 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000760 b9ed      	OUT  0xD,R30
                 ; 0000 02B9 
                 ; 0000 02BA // TWI initialization
                 ; 0000 02BB // TWI disabled
                 ; 0000 02BC TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000761 bfe6      	OUT  0x36,R30
                 ; 0000 02BD 
                 ; 0000 02BE // Global enable interrupts
                 ; 0000 02BF #asm("sei")
000762 9478      	sei
                 ; 0000 02C0 data = 8888;
000763 ebe8      	LDI  R30,LOW(8888)
000764 e2f2      	LDI  R31,HIGH(8888)
000765 015f      	MOVW R10,R30
                 ; 0000 02C1 //delay_ms(1000);
                 ; 0000 02C2 //ADE7753_INIT();
                 ; 0000 02C3 //delay_ms(4000);
                 ; 0000 02C4 reg = 0;
000766 e0e0      	LDI  R30,LOW(0)
000767 d1f3      	RCALL __CLRD1S0
                 ; 0000 02C5 reg |= (1<<SWRST);
000768 81e8      	LD   R30,Y
000769 64e0      	ORI  R30,0x40
00076a 83e8      	ST   Y,R30
                 ; 0000 02C6 ADE7753_WRITE(1,MODE,(reg>>8) & 0xFF,reg & 0xFF,0x00);
00076b e0e1      	LDI  R30,LOW(1)
00076c 93ea      	ST   -Y,R30
00076d e0e9      	LDI  R30,LOW(9)
00076e 93ea      	ST   -Y,R30
00076f e0e2      	LDI  R30,LOW(2)
000770 93ea      	ST   -Y,R30
                +
000771 81ab     +LDD R26 , Y + 3
000772 81bc     +LDD R27 , Y + 3 + 1
000773 818d     +LDD R24 , Y + 3 + 2
000774 819e     +LDD R25 , Y + 3 + 3
                 	__GETD2S 3
000775 e0e8      	LDI  R30,LOW(8)
000776 d183      	RCALL __LSRD12
000777 93ea      	ST   -Y,R30
000778 81ec      	LDD  R30,Y+4
000779 93ea      	ST   -Y,R30
00077a e0a0      	LDI  R26,LOW(0)
00077b d0a0      	RCALL _ADE7753_WRITE
                 ; 0000 02C7 delay_ms(500);
00077c efa4      	LDI  R26,LOW(500)
00077d e0b1      	LDI  R27,HIGH(500)
00077e d160      	RCALL _delay_ms
                 ; 0000 02C8 reg = ADE7753_READ(1,MODE);
00077f e0e1      	LDI  R30,LOW(1)
000780 93ea      	ST   -Y,R30
000781 e0e9      	LDI  R30,LOW(9)
000782 93ea      	ST   -Y,R30
000783 e0a2      	LDI  R26,LOW(2)
000784 d0e0      	RCALL _ADE7753_READ
000785 d1d0      	RCALL __PUTD1S0
                 ; 0000 02C9 // data = (reg >> 8) & 0xFF;
                 ; 0000 02CA // data = reg & 0xFF;
                 ; 0000 02CB //delay_ms(2000);
                 ; 0000 02CC 
                 ; 0000 02CD reg = ADE7753_READ(1,MODE);
000786 e0e1      	LDI  R30,LOW(1)
000787 93ea      	ST   -Y,R30
000788 e0e9      	LDI  R30,LOW(9)
000789 93ea      	ST   -Y,R30
00078a e0a2      	LDI  R26,LOW(2)
00078b d0d9      	RCALL _ADE7753_READ
00078c d1c9      	RCALL __PUTD1S0
                 ; 0000 02CE // reg |= (1<<DISHPF) | (1<<WAVSEL0) | (1<<WAVSEL1) | (1<<DTRT0) | (1<<DTRT1) ;
                 ; 0000 02CF reg |= (1<<WAVSEL0) | (1<<WAVSEL1) | (1<<DTRT0) | (1<<DTRT1) ;
00078d 81e9      	LDD  R30,Y+1
00078e 67e8      	ORI  R30,LOW(0x78)
00078f 83e9      	STD  Y+1,R30
                 ; 0000 02D0 ADE7753_WRITE(1,MODE,(reg>>8) & 0xFF,reg & 0xFF,0x00);
000790 e0e1      	LDI  R30,LOW(1)
000791 93ea      	ST   -Y,R30
000792 e0e9      	LDI  R30,LOW(9)
000793 93ea      	ST   -Y,R30
000794 e0e2      	LDI  R30,LOW(2)
000795 93ea      	ST   -Y,R30
                +
000796 81ab     +LDD R26 , Y + 3
000797 81bc     +LDD R27 , Y + 3 + 1
000798 818d     +LDD R24 , Y + 3 + 2
000799 819e     +LDD R25 , Y + 3 + 3
                 	__GETD2S 3
00079a e0e8      	LDI  R30,LOW(8)
00079b d15e      	RCALL __LSRD12
00079c 93ea      	ST   -Y,R30
00079d 81ec      	LDD  R30,Y+4
00079e 93ea      	ST   -Y,R30
00079f e0a0      	LDI  R26,LOW(0)
0007a0 d07b      	RCALL _ADE7753_WRITE
                 ; 0000 02D1 reg = ADE7753_READ(1,MODE);
0007a1 e0e1      	LDI  R30,LOW(1)
0007a2 93ea      	ST   -Y,R30
0007a3 e0e9      	LDI  R30,LOW(9)
0007a4 93ea      	ST   -Y,R30
0007a5 e0a2      	LDI  R26,LOW(2)
0007a6 d0be      	RCALL _ADE7753_READ
0007a7 d1ae      	RCALL __PUTD1S0
                 ; 0000 02D2 // data = reg;
                 ; 0000 02D3 // data = (reg >> 8) & 0xFF;
                 ; 0000 02D4 // data = reg & 0xFF;
                 ; 0000 02D5 delay_ms(500);
0007a8 efa4      	LDI  R26,LOW(500)
0007a9 e0b1      	LDI  R27,HIGH(500)
0007aa d134      	RCALL _delay_ms
                 ; 0000 02D6 ADE7753_WRITE(1,SAGLVL,0X2a,0X00,0X00);
0007ab e0e1      	LDI  R30,LOW(1)
0007ac 93ea      	ST   -Y,R30
0007ad e1ef      	LDI  R30,LOW(31)
0007ae 93ea      	ST   -Y,R30
0007af e0e1      	LDI  R30,LOW(1)
0007b0 93ea      	ST   -Y,R30
0007b1 e2ea      	LDI  R30,LOW(42)
0007b2 93ea      	ST   -Y,R30
0007b3 e0e0      	LDI  R30,LOW(0)
0007b4 93ea      	ST   -Y,R30
0007b5 e0a0      	LDI  R26,LOW(0)
0007b6 d065      	RCALL _ADE7753_WRITE
                 ; 0000 02D7 delay_ms(500);
0007b7 efa4      	LDI  R26,LOW(500)
0007b8 e0b1      	LDI  R27,HIGH(500)
0007b9 d125      	RCALL _delay_ms
                 ; 0000 02D8 ADE7753_WRITE(1,SAGCYC,0XFF,0X00,0X00);
0007ba e0e1      	LDI  R30,LOW(1)
0007bb 93ea      	ST   -Y,R30
0007bc e1ee      	LDI  R30,LOW(30)
0007bd 93ea      	ST   -Y,R30
0007be e0e1      	LDI  R30,LOW(1)
0007bf 93ea      	ST   -Y,R30
0007c0 efef      	LDI  R30,LOW(255)
0007c1 93ea      	ST   -Y,R30
0007c2 e0e0      	LDI  R30,LOW(0)
0007c3 93ea      	ST   -Y,R30
0007c4 e0a0      	LDI  R26,LOW(0)
0007c5 d056      	RCALL _ADE7753_WRITE
                 ; 0000 02D9 delay_ms(500);
0007c6 efa4      	LDI  R26,LOW(500)
0007c7 e0b1      	LDI  R27,HIGH(500)
0007c8 d116      	RCALL _delay_ms
                 ; 0000 02DA 
                 ; 0000 02DB BUZZER_ON;
0007c9 9a90      	SBI  0x12,0
                 ; 0000 02DC delay_ms(100);
0007ca e6a4      	LDI  R26,LOW(100)
0007cb e0b0      	LDI  R27,0
0007cc d112      	RCALL _delay_ms
                 ; 0000 02DD BUZZER_OFF;
0007cd 9890      	CBI  0x12,0
                 ; 0000 02DE       while (1)
                 _0xEA:
                 ; 0000 02DF       {
                 ; 0000 02E0       // Place your code here
                 ; 0000 02E1             READ_SELECT();
0007ce d9c8      	RCALL _READ_SELECT
                 ; 0000 02E2       }
0007cf cffe      	RJMP _0xEA
                 ; 0000 02E3 }
                 _0xED:
0007d0 cfff      	RJMP _0xED
                 ; .FEND
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;void    SPI_SENDBYTE(unsigned char  data,unsigned char action)
                 ; 0001 0005 {
                 
                 	.CSEG
                 _SPI_SENDBYTE:
                 ; .FSTART _SPI_SENDBYTE
                 ; 0001 0006     unsigned char   i;
                 ; 0001 0007     for(i=0;i<8;i++)
0007d1 93aa      	ST   -Y,R26
0007d2 931a      	ST   -Y,R17
                 ;	data -> Y+2
                 ;	action -> Y+1
                 ;	i -> R17
0007d3 e010      	LDI  R17,LOW(0)
                 _0x20004:
0007d4 3018      	CPI  R17,8
0007d5 f470      	BRSH _0x20005
                 ; 0001 0008     {
                 ; 0001 0009         if((data & 0x80) == 0x80)    DO_SPI_MOSI = 1;
0007d6 81ea      	LDD  R30,Y+2
0007d7 78e0      	ANDI R30,LOW(0x80)
0007d8 38e0      	CPI  R30,LOW(0x80)
0007d9 f411      	BRNE _0x20006
0007da 9ac3      	SBI  0x18,3
                 ; 0001 000A         else    DO_SPI_MOSI = 0;
0007db c001      	RJMP _0x20009
                 _0x20006:
0007dc 98c3      	CBI  0x18,3
                 ; 0001 000B         data <<= 1;
                 _0x20009:
0007dd 81ea      	LDD  R30,Y+2
0007de 0fee      	LSL  R30
0007df 83ea      	STD  Y+2,R30
                 ; 0001 000C         DO_SPI_SCK = 1;
0007e0 9ac5      	SBI  0x18,5
                 ; 0001 000D         DO_SPI_SCK = 0;
0007e1 98c5      	CBI  0x18,5
                 ; 0001 000E     }
0007e2 5f1f      	SUBI R17,-1
0007e3 cff0      	RJMP _0x20004
                 _0x20005:
                 ; 0001 000F     if(action)
0007e4 81e9      	LDD  R30,Y+1
0007e5 30e0      	CPI  R30,0
0007e6 f011      	BREQ _0x20010
                 ; 0001 0010     {
                 ; 0001 0011         DO_SPI_LATCH = 1;
0007e7 9ac1      	SBI  0x18,1
                 ; 0001 0012         DO_SPI_LATCH = 0;
0007e8 98c1      	CBI  0x18,1
                 ; 0001 0013     }
                 ; 0001 0014 }
                 _0x20010:
0007e9 8118      	LDD  R17,Y+0
0007ea c019      	RJMP _0x2000002
                 ; .FEND
                 ;#include "ADE7753.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "delay.h"
                 ;
                 ;
                 ;void    SPI_7753_SEND(unsigned char data)
                 ; 0002 0006 {
                 
                 	.CSEG
                 _SPI_7753_SEND:
                 ; .FSTART _SPI_7753_SEND
                 ; 0002 0007     unsigned char   cnt;
                 ; 0002 0008     unsigned char   tmp = data;
                 ; 0002 0009 
                 ; 0002 000A     for(cnt = 0;cnt < 8; cnt++)
0007eb 93aa      	ST   -Y,R26
0007ec d17a      	RCALL __SAVELOCR2
                 ;	data -> Y+2
                 ;	cnt -> R17
                 ;	tmp -> R16
0007ed 810a      	LDD  R16,Y+2
0007ee e010      	LDI  R17,LOW(0)
                 _0x40004:
0007ef 3018      	CPI  R17,8
0007f0 f490      	BRSH _0x40005
                 ; 0002 000B     {
                 ; 0002 000C         if((tmp & 0x80) == 0x80)   SPI_MOSI_HIGHT;
0007f1 2fe0      	MOV  R30,R16
0007f2 78e0      	ANDI R30,LOW(0x80)
0007f3 38e0      	CPI  R30,LOW(0x80)
0007f4 f411      	BRNE _0x40006
0007f5 9894      	CBI  0x12,4
                 ; 0002 000D         else SPI_MOSI_LOW;
0007f6 c001      	RJMP _0x40009
                 _0x40006:
0007f7 9a94      	SBI  0x12,4
                 ; 0002 000E 
                 ; 0002 000F         SPI_SCK_HIGHT;
                 _0x40009:
0007f8 9897      	CBI  0x12,7
                 ; 0002 0010         delay_us(50);
                +
0007f9 eb88     +LDI R24 , LOW ( 184 )
                +__DELAY_USB_LOOP :
0007fa 958a     +DEC R24
0007fb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 184
                 ; 0002 0011         SPI_SCK_LOW;
0007fc 9a97      	SBI  0x12,7
                 ; 0002 0012         delay_us(50);
                +
0007fd eb88     +LDI R24 , LOW ( 184 )
                +__DELAY_USB_LOOP :
0007fe 958a     +DEC R24
0007ff f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 184
                 ; 0002 0013         tmp <<= 1;
000800 0f00      	LSL  R16
                 ; 0002 0014     }
000801 5f1f      	SUBI R17,-1
000802 cfec      	RJMP _0x40004
                 _0x40005:
                 ; 0002 0015 }
000803 d168      	RCALL __LOADLOCR2
                 _0x2000002:
000804 9623      	ADIW R28,3
000805 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char    SPI_7753_RECEIVE(void)
                 ; 0002 0018 {
                 _SPI_7753_RECEIVE:
                 ; .FSTART _SPI_7753_RECEIVE
                 ; 0002 0019     unsigned char cnt;
                 ; 0002 001A     unsigned char data;
                 ; 0002 001B     data = 0;
000806 d160      	RCALL __SAVELOCR2
                 ;	cnt -> R17
                 ;	data -> R16
000807 e000      	LDI  R16,LOW(0)
                 ; 0002 001C     for(cnt = 0;cnt < 8; cnt++)
000808 e010      	LDI  R17,LOW(0)
                 _0x40011:
000809 3018      	CPI  R17,8
00080a f468      	BRSH _0x40012
                 ; 0002 001D     {
                 ; 0002 001E         data <<= 1;
00080b 0f00      	LSL  R16
                 ; 0002 001F         SPI_SCK_HIGHT;
00080c 9897      	CBI  0x12,7
                 ; 0002 0020         delay_us(50);
                +
00080d eb88     +LDI R24 , LOW ( 184 )
                +__DELAY_USB_LOOP :
00080e 958a     +DEC R24
00080f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 184
                 ; 0002 0021         SPI_SCK_LOW;
000810 9a97      	SBI  0x12,7
                 ; 0002 0022         if(SPI_MISO_HIGHT)   data += 1;
000811 9985      	SBIC 0x10,5
000812 5f0f      	SUBI R16,-LOW(1)
                 ; 0002 0023         delay_us(50);
                +
000813 eb88     +LDI R24 , LOW ( 184 )
                +__DELAY_USB_LOOP :
000814 958a     +DEC R24
000815 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 184
                 ; 0002 0024 
                 ; 0002 0025     }
000816 5f1f      	SUBI R17,-1
000817 cff1      	RJMP _0x40011
                 _0x40012:
                 ; 0002 0026     return data;
000818 2fe0      	MOV  R30,R16
000819 9109      	LD   R16,Y+
00081a 9119      	LD   R17,Y+
00081b 9508      	RET
                 ; 0002 0027 }
                 ; .FEND
                 ;
                 ;void    ADE7753_WRITE(unsigned char IC_CS,unsigned char addr,unsigned char num_data,unsigned char data_1,unsigned char d ...
                 ; 0002 002A {
                 _ADE7753_WRITE:
                 ; .FSTART _ADE7753_WRITE
                 ; 0002 002B     unsigned char data[4];
                 ; 0002 002C     unsigned char   i;
                 ; 0002 002D     data[0] = data_1;
00081c 93aa      	ST   -Y,R26
00081d 9724      	SBIW R28,4
00081e 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+10
                 ;	addr -> Y+9
                 ;	num_data -> Y+8
                 ;	data_1 -> Y+7
                 ;	data_2 -> Y+6
                 ;	data_3 -> Y+5
                 ;	data -> Y+1
                 ;	i -> R17
00081f 81ef      	LDD  R30,Y+7
000820 83e9      	STD  Y+1,R30
                 ; 0002 002E     data[1] = data_2;
000821 81ee      	LDD  R30,Y+6
000822 83ea      	STD  Y+2,R30
                 ; 0002 002F     data[2] = data_3;
000823 81ed      	LDD  R30,Y+5
000824 83eb      	STD  Y+3,R30
                 ; 0002 0030 
                 ; 0002 0031     switch (IC_CS)
000825 85ea      	LDD  R30,Y+10
000826 e0f0      	LDI  R31,0
                 ; 0002 0032     {
                 ; 0002 0033         case 1:
000827 30e1      	CPI  R30,LOW(0x1)
000828 e0a0      	LDI  R26,HIGH(0x1)
000829 07fa      	CPC  R31,R26
00082a f421      	BRNE _0x4001B
                 ; 0002 0034         {
                 ; 0002 0035             PHASE_1_ON;
00082b 9a96      	SBI  0x12,6
                 ; 0002 0036             PHASE_2_OFF;
00082c 98c0      	CBI  0x18,0
                 ; 0002 0037             PHASE_3_OFF;
00082d 98c0      	CBI  0x18,0
                 ; 0002 0038             break;
00082e c00f      	RJMP _0x4001A
                 ; 0002 0039         }
                 ; 0002 003A         case 2:
                 _0x4001B:
00082f 30e2      	CPI  R30,LOW(0x2)
000830 e0a0      	LDI  R26,HIGH(0x2)
000831 07fa      	CPC  R31,R26
000832 f421      	BRNE _0x40022
                 ; 0002 003B         {
                 ; 0002 003C             PHASE_1_OFF;
000833 9896      	CBI  0x12,6
                 ; 0002 003D             PHASE_2_ON;
000834 9ac0      	SBI  0x18,0
                 ; 0002 003E             PHASE_3_OFF;
000835 98c0      	CBI  0x18,0
                 ; 0002 003F             break;
000836 c007      	RJMP _0x4001A
                 ; 0002 0040         }
                 ; 0002 0041         case 3:
                 _0x40022:
000837 30e3      	CPI  R30,LOW(0x3)
000838 e0a0      	LDI  R26,HIGH(0x3)
000839 07fa      	CPC  R31,R26
00083a f419      	BRNE _0x4001A
                 ; 0002 0042         {
                 ; 0002 0043             PHASE_1_OFF;
00083b 9896      	CBI  0x12,6
                 ; 0002 0044             PHASE_2_OFF;
00083c 98c0      	CBI  0x18,0
                 ; 0002 0045             PHASE_3_ON;
00083d 9ac0      	SBI  0x18,0
                 ; 0002 0046             break;
                 ; 0002 0047         }
                 ; 0002 0048     }
                 _0x4001A:
                 ; 0002 0049     addr &= 0x3F;
00083e 85e9      	LDD  R30,Y+9
00083f 73ef      	ANDI R30,LOW(0x3F)
000840 87e9      	STD  Y+9,R30
                 ; 0002 004A     addr |= 0x80;
000841 68e0      	ORI  R30,0x80
000842 87e9      	STD  Y+9,R30
                 ; 0002 004B     delay_us(100);
                +
000843 e184     +LDI R24 , LOW ( 276 )
000844 e091     +LDI R25 , HIGH ( 276 )
                +__DELAY_USW_LOOP :
000845 9701     +SBIW R24 , 1
000846 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 276
                 ; 0002 004C     SPI_7753_SEND(addr);
000847 85a9      	LDD  R26,Y+9
000848 dfa2      	RCALL _SPI_7753_SEND
                 ; 0002 004D     delay_us(100);
                +
000849 e184     +LDI R24 , LOW ( 276 )
00084a e091     +LDI R25 , HIGH ( 276 )
                +__DELAY_USW_LOOP :
00084b 9701     +SBIW R24 , 1
00084c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 276
                 ; 0002 004E     for(i=0;i<num_data;i++)    SPI_7753_SEND(data[i]);
00084d e010      	LDI  R17,LOW(0)
                 _0x40031:
00084e 85e8      	LDD  R30,Y+8
00084f 171e      	CP   R17,R30
000850 f450      	BRSH _0x40032
000851 2fe1      	MOV  R30,R17
000852 e0f0      	LDI  R31,0
000853 01de      	MOVW R26,R28
000854 9611      	ADIW R26,1
000855 0fae      	ADD  R26,R30
000856 1fbf      	ADC  R27,R31
000857 91ac      	LD   R26,X
000858 df92      	RCALL _SPI_7753_SEND
000859 5f1f      	SUBI R17,-1
00085a cff3      	RJMP _0x40031
                 _0x40032:
                 ; 0002 004F delay_us(100);
                +
00085b e184     +LDI R24 , LOW ( 276 )
00085c e091     +LDI R25 , HIGH ( 276 )
                +__DELAY_USW_LOOP :
00085d 9701     +SBIW R24 , 1
00085e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 276
                 ; 0002 0050     PHASE_1_OFF;
00085f 9896      	CBI  0x12,6
                 ; 0002 0051     PHASE_2_OFF;
000860 98c0      	CBI  0x18,0
                 ; 0002 0052     PHASE_3_OFF;
000861 98c0      	CBI  0x18,0
                 ; 0002 0053 }
000862 8118      	LDD  R17,Y+0
000863 962b      	ADIW R28,11
000864 9508      	RET
                 ; .FEND
                 ;unsigned long int    ADE7753_READ(unsigned char IC_CS,unsigned char addr,unsigned char num_data)
                 ; 0002 0055 {
                 _ADE7753_READ:
                 ; .FSTART _ADE7753_READ
                 ; 0002 0056     unsigned char   i;
                 ; 0002 0057     unsigned char   data[4];
                 ; 0002 0058     unsigned long int res;
                 ; 0002 0059     for(i=0;i<4;i++)    data[i] = 0;
000865 93aa      	ST   -Y,R26
000866 9728      	SBIW R28,8
000867 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+11
                 ;	addr -> Y+10
                 ;	num_data -> Y+9
                 ;	i -> R17
                 ;	data -> Y+5
                 ;	res -> Y+1
000868 e010      	LDI  R17,LOW(0)
                 _0x4003A:
000869 3014      	CPI  R17,4
00086a f450      	BRSH _0x4003B
00086b 2fe1      	MOV  R30,R17
00086c e0f0      	LDI  R31,0
00086d 01de      	MOVW R26,R28
00086e 9615      	ADIW R26,5
00086f 0fae      	ADD  R26,R30
000870 1fbf      	ADC  R27,R31
000871 e0e0      	LDI  R30,LOW(0)
000872 93ec      	ST   X,R30
000873 5f1f      	SUBI R17,-1
000874 cff4      	RJMP _0x4003A
                 _0x4003B:
                 ; 0002 005A switch (IC_CS)
000875 85eb      	LDD  R30,Y+11
000876 e0f0      	LDI  R31,0
                 ; 0002 005B     {
                 ; 0002 005C         case 1:
000877 30e1      	CPI  R30,LOW(0x1)
000878 e0a0      	LDI  R26,HIGH(0x1)
000879 07fa      	CPC  R31,R26
00087a f421      	BRNE _0x4003F
                 ; 0002 005D         {
                 ; 0002 005E             PHASE_1_ON;
00087b 9a96      	SBI  0x12,6
                 ; 0002 005F             PHASE_2_OFF;
00087c 98c0      	CBI  0x18,0
                 ; 0002 0060             PHASE_3_OFF;
00087d 98c0      	CBI  0x18,0
                 ; 0002 0061             break;
00087e c00f      	RJMP _0x4003E
                 ; 0002 0062         }
                 ; 0002 0063         case 2:
                 _0x4003F:
00087f 30e2      	CPI  R30,LOW(0x2)
000880 e0a0      	LDI  R26,HIGH(0x2)
000881 07fa      	CPC  R31,R26
000882 f421      	BRNE _0x40046
                 ; 0002 0064         {
                 ; 0002 0065             PHASE_1_OFF;
000883 9896      	CBI  0x12,6
                 ; 0002 0066             PHASE_2_ON;
000884 9ac0      	SBI  0x18,0
                 ; 0002 0067             PHASE_3_OFF;
000885 98c0      	CBI  0x18,0
                 ; 0002 0068             break;
000886 c007      	RJMP _0x4003E
                 ; 0002 0069         }
                 ; 0002 006A         case 3:
                 _0x40046:
000887 30e3      	CPI  R30,LOW(0x3)
000888 e0a0      	LDI  R26,HIGH(0x3)
000889 07fa      	CPC  R31,R26
00088a f419      	BRNE _0x4003E
                 ; 0002 006B         {
                 ; 0002 006C             PHASE_1_OFF;
00088b 9896      	CBI  0x12,6
                 ; 0002 006D             PHASE_2_OFF;
00088c 98c0      	CBI  0x18,0
                 ; 0002 006E             PHASE_3_ON;
00088d 9ac0      	SBI  0x18,0
                 ; 0002 006F             break;
                 ; 0002 0070         }
                 ; 0002 0071     }
                 _0x4003E:
                 ; 0002 0072     delay_us(10);
                +
00088e e285     +LDI R24 , LOW ( 37 )
                +__DELAY_USB_LOOP :
00088f 958a     +DEC R24
000890 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 37
                 ; 0002 0073     addr &= 0x3F;
000891 85ea      	LDD  R30,Y+10
000892 73ef      	ANDI R30,LOW(0x3F)
000893 87ea      	STD  Y+10,R30
                 ; 0002 0074     SPI_7753_SEND(addr);
000894 85aa      	LDD  R26,Y+10
000895 df55      	RCALL _SPI_7753_SEND
                 ; 0002 0075     delay_us(10);
                +
000896 e285     +LDI R24 , LOW ( 37 )
                +__DELAY_USB_LOOP :
000897 958a     +DEC R24
000898 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 37
                 ; 0002 0076     for(i=0;i<num_data;i++) data[i] = SPI_7753_RECEIVE();
000899 e010      	LDI  R17,LOW(0)
                 _0x40055:
00089a 85e9      	LDD  R30,Y+9
00089b 171e      	CP   R17,R30
00089c f470      	BRSH _0x40056
00089d 2fe1      	MOV  R30,R17
00089e e0f0      	LDI  R31,0
00089f 01de      	MOVW R26,R28
0008a0 9615      	ADIW R26,5
0008a1 0fea      	ADD  R30,R26
0008a2 1ffb      	ADC  R31,R27
0008a3 93ff      	PUSH R31
0008a4 93ef      	PUSH R30
0008a5 df60      	RCALL _SPI_7753_RECEIVE
0008a6 91af      	POP  R26
0008a7 91bf      	POP  R27
0008a8 93ec      	ST   X,R30
0008a9 5f1f      	SUBI R17,-1
0008aa cfef      	RJMP _0x40055
                 _0x40056:
                 ; 0002 0077 delay_us(10);
                +
0008ab e285     +LDI R24 , LOW ( 37 )
                +__DELAY_USB_LOOP :
0008ac 958a     +DEC R24
0008ad f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 37
                 ; 0002 0078     PHASE_1_OFF;
0008ae 9896      	CBI  0x12,6
                 ; 0002 0079     PHASE_2_OFF;
0008af 98c0      	CBI  0x18,0
                 ; 0002 007A     PHASE_3_OFF;
0008b0 98c0      	CBI  0x18,0
                 ; 0002 007B     res = 0;
0008b1 e0e0      	LDI  R30,LOW(0)
                +
0008b2 83e9     +STD Y + 1 , R30
0008b3 83ea     +STD Y + 1 + 1 , R30
0008b4 83eb     +STD Y + 1 + 2 , R30
0008b5 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
                 ; 0002 007C     for(i=0;i<num_data;i++)
0008b6 e010      	LDI  R17,LOW(0)
                 _0x4005E:
0008b7 85e9      	LDD  R30,Y+9
0008b8 171e      	CP   R17,R30
0008b9 f4f0      	BRSH _0x4005F
                 ; 0002 007D     {
                 ; 0002 007E         res <<= 8;
                +
0008ba 81a9     +LDD R26 , Y + 1
0008bb 81ba     +LDD R27 , Y + 1 + 1
0008bc 818b     +LDD R24 , Y + 1 + 2
0008bd 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
0008be e0e8      	LDI  R30,LOW(8)
0008bf d02e      	RCALL __LSLD12
                +
0008c0 83e9     +STD Y + 1 , R30
0008c1 83fa     +STD Y + 1 + 1 , R31
0008c2 836b     +STD Y + 1 + 2 , R22
0008c3 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0002 007F         res += data[i];
0008c4 2fe1      	MOV  R30,R17
0008c5 e0f0      	LDI  R31,0
0008c6 01de      	MOVW R26,R28
0008c7 9615      	ADIW R26,5
0008c8 0fae      	ADD  R26,R30
0008c9 1fbf      	ADC  R27,R31
0008ca 91ec      	LD   R30,X
0008cb e0f0      	LDI  R31,0
                +
0008cc 81a9     +LDD R26 , Y + 1
0008cd 81ba     +LDD R27 , Y + 1 + 1
0008ce 818b     +LDD R24 , Y + 1 + 2
0008cf 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
0008d0 d03a      	RCALL __CWD1
0008d1 d017      	RCALL __ADDD12
                +
0008d2 83e9     +STD Y + 1 , R30
0008d3 83fa     +STD Y + 1 + 1 , R31
0008d4 836b     +STD Y + 1 + 2 , R22
0008d5 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0002 0080     }
0008d6 5f1f      	SUBI R17,-1
0008d7 cfdf      	RJMP _0x4005E
                 _0x4005F:
                 ; 0002 0081     return res;
                +
0008d8 81e9     +LDD R30 , Y + 1
0008d9 81fa     +LDD R31 , Y + 1 + 1
0008da 816b     +LDD R22 , Y + 1 + 2
0008db 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
                 ; 0002 0082     return  (res/480);
                 _0x2000001:
0008dc 8118      	LDD  R17,Y+0
0008dd 962c      	ADIW R28,12
0008de 9508      	RET
                 ; 0002 0083     //return data[0]+data[1] + data[2];
                 ; 0002 0084 }
                 ; .FEND
                 ;
                 ;void    ADE7753_INIT(void)
                 ; 0002 0087 {
                 ; 0002 0088     unsigned int   reg = 0;
                 ; 0002 0089     ADE7753_WRITE(1,MODE,0x00,0x00,0x00);
                 ;	reg -> R16,R17
                 ; 0002 008A     delay_ms(500);
                 ; 0002 008B     reg = 0;
                 ; 0002 008C     reg |= (1<<SWRST);
                 ; 0002 008D     ADE7753_WRITE(1,MODE,reg,0x00,0x00);
                 ; 0002 008E     delay_ms(500);
                 ; 0002 008F     reg = ADE7753_READ(1,MODE);
                 ; 0002 0090     delay_ms(500);
                 ; 0002 0091     reg = ADE7753_READ(1,MODE);
                 ; 0002 0092     reg |= (1<<DISHPF) | (1<<WAVSEL0) | (1<<WAVSEL1);
                 ; 0002 0093     ADE7753_WRITE(1,MODE,reg,0x00,0x00);
                 ; 0002 0094     delay_ms(500);
                 ; 0002 0095     ADE7753_WRITE(1,SAGLVL,0X2a,0X00,0X00);
                 ; 0002 0096     ADE7753_WRITE(1,SAGCYC,0XFF,0X00,0X00);
                 ; 0002 0097 }
                 
                 	.DSEG
                 _data_temp:
000160           	.BYTE 0x4
                 _data_buff:
000164           	.BYTE 0xA0
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
0008df 9610      	adiw r26,0
0008e0 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0008e1 ec8d     +LDI R24 , LOW ( 0xACD )
0008e2 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
0008e3 9701     +SBIW R24 , 1
0008e4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
0008e5 95a8      	wdr
0008e6 9711      	sbiw r26,1
0008e7 f7c9      	brne __delay_ms0
                 __delay_ms1:
0008e8 9508      	ret
                 
                 __ADDD12:
0008e9 0fea      	ADD  R30,R26
0008ea 1ffb      	ADC  R31,R27
0008eb 1f68      	ADC  R22,R24
0008ec 1f79      	ADC  R23,R25
0008ed 9508      	RET
                 
                 __LSLD12:
0008ee 23ee      	TST  R30
0008ef 2e0e      	MOV  R0,R30
0008f0 01fd      	MOVW R30,R26
0008f1 01bc      	MOVW R22,R24
0008f2 f031      	BREQ __LSLD12R
                 __LSLD12L:
0008f3 0fee      	LSL  R30
0008f4 1fff      	ROL  R31
0008f5 1f66      	ROL  R22
0008f6 1f77      	ROL  R23
0008f7 940a      	DEC  R0
0008f8 f7d1      	BRNE __LSLD12L
                 __LSLD12R:
0008f9 9508      	RET
                 
                 __LSRD12:
0008fa 23ee      	TST  R30
0008fb 2e0e      	MOV  R0,R30
0008fc 01fd      	MOVW R30,R26
0008fd 01bc      	MOVW R22,R24
0008fe f031      	BREQ __LSRD12R
                 __LSRD12L:
0008ff 9576      	LSR  R23
000900 9567      	ROR  R22
000901 95f7      	ROR  R31
000902 95e7      	ROR  R30
000903 940a      	DEC  R0
000904 f7d1      	BRNE __LSRD12L
                 __LSRD12R:
000905 9508      	RET
                 
                 __LSLW2:
000906 0fee      	LSL  R30
000907 1fff      	ROL  R31
000908 0fee      	LSL  R30
000909 1fff      	ROL  R31
00090a 9508      	RET
                 
                 __CWD1:
00090b 2f6f      	MOV  R22,R31
00090c 0f66      	ADD  R22,R22
00090d 0b66      	SBC  R22,R22
00090e 2f76      	MOV  R23,R22
00090f 9508      	RET
                 
                 __DIVW21U:
000910 2400      	CLR  R0
000911 2411      	CLR  R1
000912 e190      	LDI  R25,16
                 __DIVW21U1:
000913 0faa      	LSL  R26
000914 1fbb      	ROL  R27
000915 1c00      	ROL  R0
000916 1c11      	ROL  R1
000917 1a0e      	SUB  R0,R30
000918 0a1f      	SBC  R1,R31
000919 f418      	BRCC __DIVW21U2
00091a 0e0e      	ADD  R0,R30
00091b 1e1f      	ADC  R1,R31
00091c c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00091d 60a1      	SBR  R26,1
                 __DIVW21U3:
00091e 959a      	DEC  R25
00091f f799      	BRNE __DIVW21U1
000920 01fd      	MOVW R30,R26
000921 01d0      	MOVW R26,R0
000922 9508      	RET
                 
                 __DIVD21U:
000923 933f      	PUSH R19
000924 934f      	PUSH R20
000925 935f      	PUSH R21
000926 2400      	CLR  R0
000927 2411      	CLR  R1
000928 2744      	CLR  R20
000929 2755      	CLR  R21
00092a e230      	LDI  R19,32
                 __DIVD21U1:
00092b 0faa      	LSL  R26
00092c 1fbb      	ROL  R27
00092d 1f88      	ROL  R24
00092e 1f99      	ROL  R25
00092f 1c00      	ROL  R0
000930 1c11      	ROL  R1
000931 1f44      	ROL  R20
000932 1f55      	ROL  R21
000933 1a0e      	SUB  R0,R30
000934 0a1f      	SBC  R1,R31
000935 0b46      	SBC  R20,R22
000936 0b57      	SBC  R21,R23
000937 f428      	BRCC __DIVD21U2
000938 0e0e      	ADD  R0,R30
000939 1e1f      	ADC  R1,R31
00093a 1f46      	ADC  R20,R22
00093b 1f57      	ADC  R21,R23
00093c c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00093d 60a1      	SBR  R26,1
                 __DIVD21U3:
00093e 953a      	DEC  R19
00093f f759      	BRNE __DIVD21U1
000940 01fd      	MOVW R30,R26
000941 01bc      	MOVW R22,R24
000942 01d0      	MOVW R26,R0
000943 01ca      	MOVW R24,R20
000944 915f      	POP  R21
000945 914f      	POP  R20
000946 913f      	POP  R19
000947 9508      	RET
                 
                 __MODW21U:
000948 dfc7      	RCALL __DIVW21U
000949 01fd      	MOVW R30,R26
00094a 9508      	RET
                 
                 __GETD1P:
00094b 91ed      	LD   R30,X+
00094c 91fd      	LD   R31,X+
00094d 916d      	LD   R22,X+
00094e 917c      	LD   R23,X
00094f 9713      	SBIW R26,3
000950 9508      	RET
                 
                 __PUTDP1:
000951 93ed      	ST   X+,R30
000952 93fd      	ST   X+,R31
000953 936d      	ST   X+,R22
000954 937c      	ST   X,R23
000955 9508      	RET
                 
                 __PUTD1S0:
000956 83e8      	ST   Y,R30
000957 83f9      	STD  Y+1,R31
000958 836a      	STD  Y+2,R22
000959 837b      	STD  Y+3,R23
00095a 9508      	RET
                 
                 __CLRD1S0:
00095b 83e8      	ST   Y,R30
00095c 83e9      	STD  Y+1,R30
00095d 83ea      	STD  Y+2,R30
00095e 83eb      	STD  Y+3,R30
00095f 9508      	RET
                 
                 __CPD12:
000960 17ea      	CP   R30,R26
000961 07fb      	CPC  R31,R27
000962 0768      	CPC  R22,R24
000963 0779      	CPC  R23,R25
000964 9508      	RET
                 
                 __SAVELOCR4:
000965 933a      	ST   -Y,R19
                 __SAVELOCR3:
000966 932a      	ST   -Y,R18
                 __SAVELOCR2:
000967 931a      	ST   -Y,R17
000968 930a      	ST   -Y,R16
000969 9508      	RET
                 
                 __LOADLOCR4:
00096a 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00096b 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00096c 8119      	LDD  R17,Y+1
00096d 8108      	LD   R16,Y
00096e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8A register use summary:
r0 :  44 r1 :  11 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   6 r7 :   9 
r8 :  24 r9 :   2 r10:  11 r11:   0 r12:  13 r13: 120 r14:   0 r15:   2 
r16:  17 r17:  84 r18:  14 r19:  12 r20:   7 r21:   6 r22:  61 r23:  51 
r24:  66 r25:  41 r26: 395 r27: 143 r28:  61 r29:   1 r30: 662 r31: 253 
x  :  27 y  : 168 z  :   7 
Registers used: 29 out of 35 (82.9%)

ATmega8A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  77 add   :  74 
adiw  :  55 and   :   0 andi  :   5 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  24 
brlt  :   0 brmi  :   0 brne  :  67 brpl  :   0 brsh  :  32 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  37 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  62 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  46 
cpc   :  42 cpi   :  52 cpse  :   0 dec   :  12 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :  32 ld    :  37 ldd   :  48 ldi   : 437 lds   :  72 lpm   :   7 
lsl   :   8 lsr   :   1 mov   :  97 movw  : 109 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   3 out   :  39 
pop   :  41 push  :  41 rcall : 219 ret   :  23 reti  :   1 rjmp  : 134 
rol   :  15 ror   :   3 sbc   :   5 sbci  :   0 sbi   :  21 sbic  :   7 
sbis  :   0 sbiw  :  17 sbr   :   2 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  81 std   :  29 
sts   :  96 sub   :   2 subi  :  14 swap  :   0 tst   :   2 wdr   :   1 

Instructions used: 50 out of 114 (43.9%)

ATmega8A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0012de   4814     16   4830    8192  59.0%
[.dseg] 0x000060 0x000204      0    164    164    1024  16.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
