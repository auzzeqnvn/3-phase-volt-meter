
AVRASM ver. 2.1.30  D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm Thu Nov 29 15:18:24 2018

D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1086): warning: Register r7 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1087): warning: Register r6 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1088): warning: Register r9 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1089): warning: Register r10 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1090): warning: Register r11 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1091): warning: Register r8 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1092): warning: Register r13 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1093): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8A
                 ;Program type           : Application
                 ;Clock frequency        : 11,059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Speed
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8A
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _led_cnt=R7
                 	.DEF _data_led=R6
                 	.DEF _data_single_led=R9
                 	.DEF _data=R10
                 	.DEF _data_msb=R11
                 	.DEF _buff_cnt=R8
                 	.DEF _loop_cnt=R13
                 	.DEF _loop_read_cnt=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c01a      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c03e      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000013 0001
000014 00ff      	.DB  0x1,0x0,0xFF,0x0
000015 0000
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-volt-meter\Debug\List\3-phase-volt-meter.asm(1125): warning: .cseg .db misalignment - padding zero byte
000016 0000      	.DB  0x0,0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
000017 0007      	.DW  0x07
000018 0007      	.DW  0x07
000019 0026      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00001a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00001b 94f8      	CLI
00001c 27ee      	CLR  R30
00001d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00001e e0f1      	LDI  R31,1
00001f bffb      	OUT  GICR,R31
000020 bfeb      	OUT  GICR,R30
000021 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000022 e08d      	LDI  R24,(14-2)+1
000023 e0a2      	LDI  R26,2
000024 27bb      	CLR  R27
                 __CLEAR_REG:
000025 93ed      	ST   X+,R30
000026 958a      	DEC  R24
000027 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000028 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000029 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00002a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00002b 93ed      	ST   X+,R30
00002c 9701      	SBIW R24,1
00002d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00002e e2ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00002f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000030 9185      	LPM  R24,Z+
000031 9195      	LPM  R25,Z+
000032 9700      	SBIW R24,0
000033 f061      	BREQ __GLOBAL_INI_END
000034 91a5      	LPM  R26,Z+
000035 91b5      	LPM  R27,Z+
000036 9005      	LPM  R0,Z+
000037 9015      	LPM  R1,Z+
000038 01bf      	MOVW R22,R30
000039 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00003a 9005      	LPM  R0,Z+
00003b 920d      	ST   X+,R0
00003c 9701      	SBIW R24,1
00003d f7e1      	BRNE __GLOBAL_INI_LOOP
00003e 01fb      	MOVW R30,R22
00003f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000040 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000041 bfed      	OUT  SPL,R30
000042 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000043 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000044 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000045 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000046 c75d      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : 3 phase Volt Meter
                 ;Version : 1.0
                 ;Date    : 15/11/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;Chip type               : ATmega8L
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 11,059200 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include "delay.h"
                 ;#include "SPI_SOFTWARE.h"
                 ;#include "ADE7753.h"
                 ;
                 ;#define     RS    1
                 ;#define     ST    2
                 ;#define     TR    3
                 ;#define     RN    4
                 ;#define     SN    5
                 ;#define     TN    6
                 ;
                 ;#define     RS_INPUT    PINC.0
                 ;#define     ST_INPUT    PINC.1
                 ;#define     TR_INPUT    PINC.2
                 ;#define     RN_INPUT    PINC.3
                 ;#define     SN_INPUT    PINC.4
                 ;#define     TN_INPUT    PINC.5
                 ;
                 ;#define     SELECT_S0   PORTD.1
                 ;#define     SELECT_S1   PORTD.2
                 ;#define     SELECT_S2   PORTD.3
                 ;
                 ;#define     BUZZER      PORTD.0
                 ;
                 ;#define     BUZZER_ON   BUZZER = 1
                 ;#define     BUZZER_OFF   BUZZER = 0
                 ;
                 ;/* So luong mau */
                 ;#define     NUM_SAMPLE  40
                 ;/* So luong mau loai do noise 2*NUM_FILTER = LOW_NOISE + HIGH_NOISE */
                 ;#define     NUM_FILTER  13
                 ;/* Thoi gian lay mau 10ms*TIME_GET_SAMPLE */
                 ;#define     TIME_GET_SAMPLE   3
                 ;/* 10ms*TIME_GET_SAMPLE*(NUM_SAMPLE-NUM_FILTER) */
                 ;
                 ;/* Thoi gian cap nhat gia tri hien thi 4,44ms*TIME_UPDATE_DISPLAY */
                 ;#define     TIME_UPDATE_DISPLAY     200
                 ;
                 ;/* He so cac gia tri doc duoc tu ADE7753*/
                 ;#define     SR_RATIO    266
                 ;#define     ST_RATIO    244
                 ;#define     TR_RATIO    252
                 ;#define     RN_RATIO    276
                 ;#define     SN_RATIO    258
                 ;#define     TN_RATIO    229
                 ;
                 ;//global variables here
                 ;unsigned char     led_cnt = 1;
                 ;unsigned char     data_led;
                 ;unsigned char     data_single_led = 0xff;
                 ;unsigned int      data = 0;
                 ;unsigned long      data_temp = 0;
                 ;unsigned long int      data_buff[NUM_SAMPLE];
                 ;unsigned char     buff_cnt = 0;
                 ;unsigned char     loop_cnt = 0;
                 ;unsigned char     loop_read_cnt = 0;
                 ;unsigned char     loop_timer = 0;
                 ;unsigned char     Uc_Last_Select;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;void    SCAN_LED(unsigned char num_led,unsigned char    data_in);
                 ;void  READ_SELECT(void);
                 ;// Timer1 overflow interrupt service routine
                 ;/* 4,44 ms */
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 005C {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000047 920a      	ST   -Y,R0
000048 921a      	ST   -Y,R1
000049 92fa      	ST   -Y,R15
00004a 936a      	ST   -Y,R22
00004b 937a      	ST   -Y,R23
00004c 938a      	ST   -Y,R24
00004d 939a      	ST   -Y,R25
00004e 93aa      	ST   -Y,R26
00004f 93ba      	ST   -Y,R27
000050 93ea      	ST   -Y,R30
000051 93fa      	ST   -Y,R31
000052 b7ef      	IN   R30,SREG
000053 93ea      	ST   -Y,R30
                 ; 0000 005D // Reinitialize Timer1 value
                 ; 0000 005E       TCNT1H=0xE800 >> 8;
000054 eee8      	LDI  R30,LOW(232)
000055 bded      	OUT  0x2D,R30
                 ; 0000 005F       TCNT1L=0xE800 & 0xff;
000056 e0e0      	LDI  R30,LOW(0)
000057 bdec      	OUT  0x2C,R30
                 ; 0000 0060 
                 ; 0000 0061       if(led_cnt == 1)  data_led = data/1000;
000058 e0e1      	LDI  R30,LOW(1)
000059 15e7      	CP   R30,R7
00005a f431      	BRNE _0x3
00005b 01d5      	MOVW R26,R10
00005c eee8      	LDI  R30,LOW(1000)
00005d e0f3      	LDI  R31,HIGH(1000)
00005e d924      	RCALL __DIVW21U
00005f 2e6e      	MOV  R6,R30
                 ; 0000 0062       else if(led_cnt == 2)  data_led = data%1000/100;
000060 c027      	RJMP _0x4
                 _0x3:
000061 e0e2      	LDI  R30,LOW(2)
000062 15e7      	CP   R30,R7
000063 f451      	BRNE _0x5
000064 01d5      	MOVW R26,R10
000065 eee8      	LDI  R30,LOW(1000)
000066 e0f3      	LDI  R31,HIGH(1000)
000067 d953      	RCALL __MODW21U
000068 01df      	MOVW R26,R30
000069 e6e4      	LDI  R30,LOW(100)
00006a e0f0      	LDI  R31,HIGH(100)
00006b d917      	RCALL __DIVW21U
00006c 2e6e      	MOV  R6,R30
                 ; 0000 0063       else if(led_cnt == 3)  data_led = data%100/10;
00006d c01a      	RJMP _0x6
                 _0x5:
00006e e0e3      	LDI  R30,LOW(3)
00006f 15e7      	CP   R30,R7
000070 f451      	BRNE _0x7
000071 01d5      	MOVW R26,R10
000072 e6e4      	LDI  R30,LOW(100)
000073 e0f0      	LDI  R31,HIGH(100)
000074 d946      	RCALL __MODW21U
000075 01df      	MOVW R26,R30
000076 e0ea      	LDI  R30,LOW(10)
000077 e0f0      	LDI  R31,HIGH(10)
000078 d90a      	RCALL __DIVW21U
000079 2e6e      	MOV  R6,R30
                 ; 0000 0064       else if(led_cnt == 4)  data_led = data%10;
00007a c00d      	RJMP _0x8
                 _0x7:
00007b e0e4      	LDI  R30,LOW(4)
00007c 15e7      	CP   R30,R7
00007d f431      	BRNE _0x9
00007e 01d5      	MOVW R26,R10
00007f e0ea      	LDI  R30,LOW(10)
000080 e0f0      	LDI  R31,HIGH(10)
000081 d939      	RCALL __MODW21U
000082 2e6e      	MOV  R6,R30
                 ; 0000 0065       else if(led_cnt == 5)   data_led = data_single_led;
000083 c004      	RJMP _0xA
                 _0x9:
000084 e0e5      	LDI  R30,LOW(5)
000085 15e7      	CP   R30,R7
000086 f409      	BRNE _0xB
000087 2c69      	MOV  R6,R9
                 ; 0000 0066 
                 ; 0000 0067       SCAN_LED(led_cnt++,data_led);
                 _0xB:
                 _0xA:
                 _0x8:
                 _0x6:
                 _0x4:
000088 2de7      	MOV  R30,R7
000089 9473      	INC  R7
00008a 93ea      	ST   -Y,R30
00008b 2da6      	MOV  R26,R6
00008c d01c      	RCALL _SCAN_LED
                 ; 0000 0068       if(led_cnt > 5)   led_cnt = 1;
00008d e0e5      	LDI  R30,LOW(5)
00008e 15e7      	CP   R30,R7
00008f f410      	BRSH _0xC
000090 e0e1      	LDI  R30,LOW(1)
000091 2e7e      	MOV  R7,R30
                 ; 0000 0069       if(loop_timer < TIME_UPDATE_DISPLAY)    loop_timer++;
                 _0xC:
000092 91a0 0204 	LDS  R26,_loop_timer
000094 3ca8      	CPI  R26,LOW(0xC8)
000095 f428      	BRSH _0xD
000096 91e0 0204 	LDS  R30,_loop_timer
000098 5fef      	SUBI R30,-LOW(1)
000099 93e0 0204 	STS  _loop_timer,R30
                 ; 0000 006A }
                 _0xD:
00009b 91e9      	LD   R30,Y+
00009c bfef      	OUT  SREG,R30
00009d 91f9      	LD   R31,Y+
00009e 91e9      	LD   R30,Y+
00009f 91b9      	LD   R27,Y+
0000a0 91a9      	LD   R26,Y+
0000a1 9199      	LD   R25,Y+
0000a2 9189      	LD   R24,Y+
0000a3 9179      	LD   R23,Y+
0000a4 9169      	LD   R22,Y+
0000a5 90f9      	LD   R15,Y+
0000a6 9019      	LD   R1,Y+
0000a7 9009      	LD   R0,Y+
0000a8 9518      	RETI
                 ; .FEND
                 ;
                 ;void    SCAN_LED(unsigned char num_led,unsigned char    data_in)
                 ; 0000 006D {
                 _SCAN_LED:
                 ; .FSTART _SCAN_LED
                 ; 0000 006E     unsigned char   byte1,byte2;
                 ; 0000 006F     byte1 = 0xFF;
0000a9 93aa      	ST   -Y,R26
0000aa d931      	RCALL __SAVELOCR2
                 ;	num_led -> Y+3
                 ;	data_in -> Y+2
                 ;	byte1 -> R17
                 ;	byte2 -> R16
0000ab ef1f      	LDI  R17,LOW(255)
                 ; 0000 0070     byte2 = 0;
0000ac e000      	LDI  R16,LOW(0)
                 ; 0000 0071 
                 ; 0000 0072       switch(data_in)
0000ad 81ea      	LDD  R30,Y+2
0000ae e0f0      	LDI  R31,0
                 ; 0000 0073       {
                 ; 0000 0074         case    0:
0000af 9730      	SBIW R30,0
0000b0 f411      	BRNE _0x11
                 ; 0000 0075         {
                 ; 0000 0076             byte1 = 0x05;
0000b1 e015      	LDI  R17,LOW(5)
                 ; 0000 0077             break;
0000b2 c035      	RJMP _0x10
                 ; 0000 0078         }
                 ; 0000 0079         case    1:
                 _0x11:
0000b3 30e1      	CPI  R30,LOW(0x1)
0000b4 e0a0      	LDI  R26,HIGH(0x1)
0000b5 07fa      	CPC  R31,R26
0000b6 f411      	BRNE _0x12
                 ; 0000 007A         {
                 ; 0000 007B             byte1 = 0x7D;
0000b7 e71d      	LDI  R17,LOW(125)
                 ; 0000 007C             break;
0000b8 c02f      	RJMP _0x10
                 ; 0000 007D         }
                 ; 0000 007E         case    2:
                 _0x12:
0000b9 30e2      	CPI  R30,LOW(0x2)
0000ba e0a0      	LDI  R26,HIGH(0x2)
0000bb 07fa      	CPC  R31,R26
0000bc f411      	BRNE _0x13
                 ; 0000 007F         {
                 ; 0000 0080             byte1 = 0x46;
0000bd e416      	LDI  R17,LOW(70)
                 ; 0000 0081             break;
0000be c029      	RJMP _0x10
                 ; 0000 0082         }
                 ; 0000 0083         case    3:
                 _0x13:
0000bf 30e3      	CPI  R30,LOW(0x3)
0000c0 e0a0      	LDI  R26,HIGH(0x3)
0000c1 07fa      	CPC  R31,R26
0000c2 f411      	BRNE _0x14
                 ; 0000 0084         {
                 ; 0000 0085             byte1 = 0x54;
0000c3 e514      	LDI  R17,LOW(84)
                 ; 0000 0086             break;
0000c4 c023      	RJMP _0x10
                 ; 0000 0087         }
                 ; 0000 0088         case    4:
                 _0x14:
0000c5 30e4      	CPI  R30,LOW(0x4)
0000c6 e0a0      	LDI  R26,HIGH(0x4)
0000c7 07fa      	CPC  R31,R26
0000c8 f411      	BRNE _0x15
                 ; 0000 0089         {
                 ; 0000 008A             byte1 = 0x3C;
0000c9 e31c      	LDI  R17,LOW(60)
                 ; 0000 008B             break;
0000ca c01d      	RJMP _0x10
                 ; 0000 008C         }
                 ; 0000 008D         case    5:
                 _0x15:
0000cb 30e5      	CPI  R30,LOW(0x5)
0000cc e0a0      	LDI  R26,HIGH(0x5)
0000cd 07fa      	CPC  R31,R26
0000ce f411      	BRNE _0x16
                 ; 0000 008E         {
                 ; 0000 008F             byte1 = 0x94;
0000cf e914      	LDI  R17,LOW(148)
                 ; 0000 0090             break;
0000d0 c017      	RJMP _0x10
                 ; 0000 0091         }
                 ; 0000 0092         case    6:
                 _0x16:
0000d1 30e6      	CPI  R30,LOW(0x6)
0000d2 e0a0      	LDI  R26,HIGH(0x6)
0000d3 07fa      	CPC  R31,R26
0000d4 f411      	BRNE _0x17
                 ; 0000 0093         {
                 ; 0000 0094             byte1 = 0x84;
0000d5 e814      	LDI  R17,LOW(132)
                 ; 0000 0095             break;
0000d6 c011      	RJMP _0x10
                 ; 0000 0096         }
                 ; 0000 0097         case    7:
                 _0x17:
0000d7 30e7      	CPI  R30,LOW(0x7)
0000d8 e0a0      	LDI  R26,HIGH(0x7)
0000d9 07fa      	CPC  R31,R26
0000da f411      	BRNE _0x18
                 ; 0000 0098         {
                 ; 0000 0099             byte1 = 0x5D;
0000db e51d      	LDI  R17,LOW(93)
                 ; 0000 009A             break;
0000dc c00b      	RJMP _0x10
                 ; 0000 009B         }
                 ; 0000 009C         case    8:
                 _0x18:
0000dd 30e8      	CPI  R30,LOW(0x8)
0000de e0a0      	LDI  R26,HIGH(0x8)
0000df 07fa      	CPC  R31,R26
0000e0 f411      	BRNE _0x19
                 ; 0000 009D         {
                 ; 0000 009E             byte1 = 0x04;
0000e1 e014      	LDI  R17,LOW(4)
                 ; 0000 009F             break;
0000e2 c005      	RJMP _0x10
                 ; 0000 00A0         }
                 ; 0000 00A1         case    9:
                 _0x19:
0000e3 30e9      	CPI  R30,LOW(0x9)
0000e4 e0a0      	LDI  R26,HIGH(0x9)
0000e5 07fa      	CPC  R31,R26
0000e6 f409      	BRNE _0x10
                 ; 0000 00A2         {
                 ; 0000 00A3             byte1 = 0x14;
0000e7 e114      	LDI  R17,LOW(20)
                 ; 0000 00A4             break;
                 ; 0000 00A5         }
                 ; 0000 00A6     }
                 _0x10:
                 ; 0000 00A7 
                 ; 0000 00A8 
                 ; 0000 00A9     switch(num_led)
0000e8 81eb      	LDD  R30,Y+3
0000e9 e0f0      	LDI  R31,0
                 ; 0000 00AA     {
                 ; 0000 00AB         case    1:
0000ea 30e1      	CPI  R30,LOW(0x1)
0000eb e0a0      	LDI  R26,HIGH(0x1)
0000ec 07fa      	CPC  R31,R26
0000ed f411      	BRNE _0x1E
                 ; 0000 00AC         {
                 ; 0000 00AD             byte2 = 0xFD;
0000ee ef0d      	LDI  R16,LOW(253)
                 ; 0000 00AE             break;
0000ef c019      	RJMP _0x1D
                 ; 0000 00AF         }
                 ; 0000 00B0         case    2:
                 _0x1E:
0000f0 30e2      	CPI  R30,LOW(0x2)
0000f1 e0a0      	LDI  R26,HIGH(0x2)
0000f2 07fa      	CPC  R31,R26
0000f3 f411      	BRNE _0x1F
                 ; 0000 00B1         {
                 ; 0000 00B2             byte2 = 0xFB;
0000f4 ef0b      	LDI  R16,LOW(251)
                 ; 0000 00B3             break;
0000f5 c013      	RJMP _0x1D
                 ; 0000 00B4         }
                 ; 0000 00B5         case    3:
                 _0x1F:
0000f6 30e3      	CPI  R30,LOW(0x3)
0000f7 e0a0      	LDI  R26,HIGH(0x3)
0000f8 07fa      	CPC  R31,R26
0000f9 f419      	BRNE _0x20
                 ; 0000 00B6         {
                 ; 0000 00B7             byte2 = 0xF7;
0000fa ef07      	LDI  R16,LOW(247)
                 ; 0000 00B8             byte1 &= 0xFB;
0000fb 7f1b      	ANDI R17,LOW(251)
                 ; 0000 00B9             break;
0000fc c00c      	RJMP _0x1D
                 ; 0000 00BA         }
                 ; 0000 00BB         case    4:
                 _0x20:
0000fd 30e4      	CPI  R30,LOW(0x4)
0000fe e0a0      	LDI  R26,HIGH(0x4)
0000ff 07fa      	CPC  R31,R26
000100 f411      	BRNE _0x21
                 ; 0000 00BC         {
                 ; 0000 00BD             byte2 = 0xDF;
000101 ed0f      	LDI  R16,LOW(223)
                 ; 0000 00BE             break;
000102 c006      	RJMP _0x1D
                 ; 0000 00BF         }
                 ; 0000 00C0         case    5:
                 _0x21:
000103 30e5      	CPI  R30,LOW(0x5)
000104 e0a0      	LDI  R26,HIGH(0x5)
000105 07fa      	CPC  R31,R26
000106 f411      	BRNE _0x1D
                 ; 0000 00C1         {
                 ; 0000 00C2               byte2 = 0xBF;
000107 eb0f      	LDI  R16,LOW(191)
                 ; 0000 00C3               byte1 = data_in;
000108 811a      	LDD  R17,Y+2
                 ; 0000 00C4               break;
                 ; 0000 00C5         }
                 ; 0000 00C6     }
                 _0x1D:
                 ; 0000 00C7 
                 ; 0000 00C8     SPI_SENDBYTE(byte2,0);
000109 930a      	ST   -Y,R16
00010a e0a0      	LDI  R26,LOW(0)
00010b d738      	RCALL _SPI_SENDBYTE
                 ; 0000 00C9     SPI_SENDBYTE(byte1,1);
00010c 931a      	ST   -Y,R17
00010d e0a1      	LDI  R26,LOW(1)
00010e d735      	RCALL _SPI_SENDBYTE
                 ; 0000 00CA }
00010f d8d3      	RCALL __LOADLOCR2
000110 9624      	ADIW R28,4
000111 9508      	RET
                 ; .FEND
                 ;
                 ;void LED_SELECT(unsigned char      led)
                 ; 0000 00CD {
                 _LED_SELECT:
                 ; .FSTART _LED_SELECT
                 ; 0000 00CE 
                 ; 0000 00CF       if( Uc_Last_Select != led)
000112 93aa      	ST   -Y,R26
                 ;	led -> Y+0
000113 81e8      	LD   R30,Y
000114 91a0 0205 	LDS  R26,_Uc_Last_Select
000116 17ea      	CP   R30,R26
000117 f059      	BREQ _0x23
                 ; 0000 00D0       {
                 ; 0000 00D1             BUZZER_ON;
000118 9a90      	SBI  0x12,0
                 ; 0000 00D2             delay_ms(50);
000119 e3a2      	LDI  R26,LOW(50)
00011a e0b0      	LDI  R27,0
00011b d836      	RCALL _delay_ms
                 ; 0000 00D3             BUZZER_OFF;
00011c 9890      	CBI  0x12,0
                 ; 0000 00D4             delay_ms(50);
00011d e3a2      	LDI  R26,LOW(50)
00011e e0b0      	LDI  R27,0
00011f d832      	RCALL _delay_ms
                 ; 0000 00D5             Uc_Last_Select = led;
000120 81e8      	LD   R30,Y
000121 93e0 0205 	STS  _Uc_Last_Select,R30
                 ; 0000 00D6       }
                 ; 0000 00D7 
                 ; 0000 00D8       switch(led)
                 _0x23:
000123 81e8      	LD   R30,Y
000124 e0f0      	LDI  R31,0
                 ; 0000 00D9       {
                 ; 0000 00DA             case RS:
000125 30e1      	CPI  R30,LOW(0x1)
000126 e0a0      	LDI  R26,HIGH(0x1)
000127 07fa      	CPC  R31,R26
000128 f411      	BRNE _0x2B
                 ; 0000 00DB             {
                 ; 0000 00DC                   data_single_led = 0xDF;
000129 edef      	LDI  R30,LOW(223)
00012a c01d      	RJMP _0x106
                 ; 0000 00DD                   break;
                 ; 0000 00DE             }
                 ; 0000 00DF             case ST:
                 _0x2B:
00012b 30e2      	CPI  R30,LOW(0x2)
00012c e0a0      	LDI  R26,HIGH(0x2)
00012d 07fa      	CPC  R31,R26
00012e f411      	BRNE _0x2C
                 ; 0000 00E0             {
                 ; 0000 00E1                   data_single_led = 0xEF;
00012f eeef      	LDI  R30,LOW(239)
000130 c017      	RJMP _0x106
                 ; 0000 00E2                   break;
                 ; 0000 00E3             }
                 ; 0000 00E4             case TR:
                 _0x2C:
000131 30e3      	CPI  R30,LOW(0x3)
000132 e0a0      	LDI  R26,HIGH(0x3)
000133 07fa      	CPC  R31,R26
000134 f411      	BRNE _0x2D
                 ; 0000 00E5             {
                 ; 0000 00E6                   data_single_led = 0xF7;
000135 efe7      	LDI  R30,LOW(247)
000136 c011      	RJMP _0x106
                 ; 0000 00E7                   break;
                 ; 0000 00E8             }
                 ; 0000 00E9             case RN:
                 _0x2D:
000137 30e4      	CPI  R30,LOW(0x4)
000138 e0a0      	LDI  R26,HIGH(0x4)
000139 07fa      	CPC  R31,R26
00013a f411      	BRNE _0x2E
                 ; 0000 00EA             {
                 ; 0000 00EB                   data_single_led = 0xFB;
00013b efeb      	LDI  R30,LOW(251)
00013c c00b      	RJMP _0x106
                 ; 0000 00EC                   break;
                 ; 0000 00ED             }
                 ; 0000 00EE             case SN:
                 _0x2E:
00013d 30e5      	CPI  R30,LOW(0x5)
00013e e0a0      	LDI  R26,HIGH(0x5)
00013f 07fa      	CPC  R31,R26
000140 f411      	BRNE _0x2F
                 ; 0000 00EF             {
                 ; 0000 00F0                   data_single_led = 0xFD;
000141 efed      	LDI  R30,LOW(253)
000142 c005      	RJMP _0x106
                 ; 0000 00F1                   break;
                 ; 0000 00F2             }
                 ; 0000 00F3             case TN:
                 _0x2F:
000143 30e6      	CPI  R30,LOW(0x6)
000144 e0a0      	LDI  R26,HIGH(0x6)
000145 07fa      	CPC  R31,R26
000146 f411      	BRNE _0x2A
                 ; 0000 00F4             {
                 ; 0000 00F5                   data_single_led = 0xFE;
000147 efee      	LDI  R30,LOW(254)
                 _0x106:
000148 2e9e      	MOV  R9,R30
                 ; 0000 00F6                   break;
                 ; 0000 00F7             }
                 ; 0000 00F8       }
                 _0x2A:
                 ; 0000 00F9 }
000149 c064      	RJMP _0x2000003
                 ; .FEND
                 ;
                 ;void  SELECT_INPUT(unsigned char    num)
                 ; 0000 00FC {
                 _SELECT_INPUT:
                 ; .FSTART _SELECT_INPUT
                 ; 0000 00FD       switch(num)
00014a 93aa      	ST   -Y,R26
                 ;	num -> Y+0
00014b 81e8      	LD   R30,Y
00014c e0f0      	LDI  R31,0
                 ; 0000 00FE       {
                 ; 0000 00FF             case 0:
00014d 9730      	SBIW R30,0
00014e f421      	BRNE _0x34
                 ; 0000 0100             {
                 ; 0000 0101                   SELECT_S0 = 0;
00014f 9891      	CBI  0x12,1
                 ; 0000 0102                   SELECT_S1 = 0;
000150 9892      	CBI  0x12,2
                 ; 0000 0103                   SELECT_S2 = 0;
000151 9893      	CBI  0x12,3
                 ; 0000 0104                   break;
000152 c033      	RJMP _0x33
                 ; 0000 0105             }
                 ; 0000 0106             case 1:
                 _0x34:
000153 30e1      	CPI  R30,LOW(0x1)
000154 e0a0      	LDI  R26,HIGH(0x1)
000155 07fa      	CPC  R31,R26
000156 f421      	BRNE _0x3B
                 ; 0000 0107             {
                 ; 0000 0108                   SELECT_S0 = 1;
000157 9a91      	SBI  0x12,1
                 ; 0000 0109                   SELECT_S1 = 0;
000158 9892      	CBI  0x12,2
                 ; 0000 010A                   SELECT_S2 = 0;
000159 9893      	CBI  0x12,3
                 ; 0000 010B                   break;
00015a c02b      	RJMP _0x33
                 ; 0000 010C             }
                 ; 0000 010D             case 2:
                 _0x3B:
00015b 30e2      	CPI  R30,LOW(0x2)
00015c e0a0      	LDI  R26,HIGH(0x2)
00015d 07fa      	CPC  R31,R26
00015e f421      	BRNE _0x42
                 ; 0000 010E             {
                 ; 0000 010F                   SELECT_S0 = 0;
00015f 9891      	CBI  0x12,1
                 ; 0000 0110                   SELECT_S1 = 1;
000160 9a92      	SBI  0x12,2
                 ; 0000 0111                   SELECT_S2 = 0;
000161 9893      	CBI  0x12,3
                 ; 0000 0112                   break;
000162 c023      	RJMP _0x33
                 ; 0000 0113             }
                 ; 0000 0114             case 3:
                 _0x42:
000163 30e3      	CPI  R30,LOW(0x3)
000164 e0a0      	LDI  R26,HIGH(0x3)
000165 07fa      	CPC  R31,R26
000166 f421      	BRNE _0x49
                 ; 0000 0115             {
                 ; 0000 0116                   SELECT_S0 = 1;
000167 9a91      	SBI  0x12,1
                 ; 0000 0117                   SELECT_S1 = 1;
000168 9a92      	SBI  0x12,2
                 ; 0000 0118                   SELECT_S2 = 0;
000169 9893      	CBI  0x12,3
                 ; 0000 0119                   break;
00016a c01b      	RJMP _0x33
                 ; 0000 011A             }
                 ; 0000 011B             case 4:
                 _0x49:
00016b 30e4      	CPI  R30,LOW(0x4)
00016c e0a0      	LDI  R26,HIGH(0x4)
00016d 07fa      	CPC  R31,R26
00016e f419      	BRNE _0x50
                 ; 0000 011C             {
                 ; 0000 011D                   SELECT_S0 = 0;
00016f 9891      	CBI  0x12,1
                 ; 0000 011E                   SELECT_S1 = 0;
000170 9892      	CBI  0x12,2
                 ; 0000 011F                   SELECT_S2 = 1;
000171 c013      	RJMP _0x107
                 ; 0000 0120                   break;
                 ; 0000 0121             }
                 ; 0000 0122             case 5:
                 _0x50:
000172 30e5      	CPI  R30,LOW(0x5)
000173 e0a0      	LDI  R26,HIGH(0x5)
000174 07fa      	CPC  R31,R26
000175 f419      	BRNE _0x57
                 ; 0000 0123             {
                 ; 0000 0124                   SELECT_S0 = 1;
000176 9a91      	SBI  0x12,1
                 ; 0000 0125                   SELECT_S1 = 0;
000177 9892      	CBI  0x12,2
                 ; 0000 0126                   SELECT_S2 = 1;
000178 c00c      	RJMP _0x107
                 ; 0000 0127                   break;
                 ; 0000 0128             }
                 ; 0000 0129             case 6:
                 _0x57:
000179 30e6      	CPI  R30,LOW(0x6)
00017a e0a0      	LDI  R26,HIGH(0x6)
00017b 07fa      	CPC  R31,R26
00017c f411      	BRNE _0x5E
                 ; 0000 012A             {
                 ; 0000 012B                   SELECT_S0 = 0;
00017d 9891      	CBI  0x12,1
                 ; 0000 012C                   SELECT_S1 = 1;
00017e c005      	RJMP _0x108
                 ; 0000 012D                   SELECT_S2 = 1;
                 ; 0000 012E                   break;
                 ; 0000 012F             }
                 ; 0000 0130             case 7:
                 _0x5E:
00017f 30e7      	CPI  R30,LOW(0x7)
000180 e0a0      	LDI  R26,HIGH(0x7)
000181 07fa      	CPC  R31,R26
000182 f419      	BRNE _0x33
                 ; 0000 0131             {
                 ; 0000 0132                   SELECT_S0 = 1;
000183 9a91      	SBI  0x12,1
                 ; 0000 0133                   SELECT_S1 = 1;
                 _0x108:
000184 9a92      	SBI  0x12,2
                 ; 0000 0134                   SELECT_S2 = 1;
                 _0x107:
000185 9a93      	SBI  0x12,3
                 ; 0000 0135                   break;
                 ; 0000 0136             }
                 ; 0000 0137       }
                 _0x33:
                 ; 0000 0138 }
000186 c027      	RJMP _0x2000003
                 ; .FEND
                 ;
                 ;void  SELECT_INPUT_COMPARE(unsigned char  input)
                 ; 0000 013B {
                 _SELECT_INPUT_COMPARE:
                 ; .FSTART _SELECT_INPUT_COMPARE
                 ; 0000 013C       switch(input)
000187 93aa      	ST   -Y,R26
                 ;	input -> Y+0
000188 81e8      	LD   R30,Y
000189 e0f0      	LDI  R31,0
                 ; 0000 013D       {
                 ; 0000 013E             case RS:
00018a 30e1      	CPI  R30,LOW(0x1)
00018b e0a0      	LDI  R26,HIGH(0x1)
00018c 07fa      	CPC  R31,R26
00018d f411      	BRNE _0x6F
                 ; 0000 013F             {
                 ; 0000 0140                   SELECT_INPUT(1);
00018e e0a1      	LDI  R26,LOW(1)
00018f c01d      	RJMP _0x109
                 ; 0000 0141                   break;
                 ; 0000 0142             }
                 ; 0000 0143             case ST:
                 _0x6F:
000190 30e2      	CPI  R30,LOW(0x2)
000191 e0a0      	LDI  R26,HIGH(0x2)
000192 07fa      	CPC  R31,R26
000193 f411      	BRNE _0x70
                 ; 0000 0144             {
                 ; 0000 0145                   SELECT_INPUT(3);
000194 e0a3      	LDI  R26,LOW(3)
000195 c017      	RJMP _0x109
                 ; 0000 0146                   break;
                 ; 0000 0147             }
                 ; 0000 0148             case TR:
                 _0x70:
000196 30e3      	CPI  R30,LOW(0x3)
000197 e0a0      	LDI  R26,HIGH(0x3)
000198 07fa      	CPC  R31,R26
000199 f411      	BRNE _0x71
                 ; 0000 0149             {
                 ; 0000 014A                   SELECT_INPUT(5);
00019a e0a5      	LDI  R26,LOW(5)
00019b c011      	RJMP _0x109
                 ; 0000 014B                   break;
                 ; 0000 014C             }
                 ; 0000 014D             case RN:
                 _0x71:
00019c 30e4      	CPI  R30,LOW(0x4)
00019d e0a0      	LDI  R26,HIGH(0x4)
00019e 07fa      	CPC  R31,R26
00019f f411      	BRNE _0x72
                 ; 0000 014E             {
                 ; 0000 014F                   SELECT_INPUT(0);
0001a0 e0a0      	LDI  R26,LOW(0)
0001a1 c00b      	RJMP _0x109
                 ; 0000 0150                   break;
                 ; 0000 0151             }
                 ; 0000 0152             case SN:
                 _0x72:
0001a2 30e5      	CPI  R30,LOW(0x5)
0001a3 e0a0      	LDI  R26,HIGH(0x5)
0001a4 07fa      	CPC  R31,R26
0001a5 f411      	BRNE _0x73
                 ; 0000 0153             {
                 ; 0000 0154                   SELECT_INPUT(2);
0001a6 e0a2      	LDI  R26,LOW(2)
0001a7 c005      	RJMP _0x109
                 ; 0000 0155                   break;
                 ; 0000 0156             }
                 ; 0000 0157             case TN:
                 _0x73:
0001a8 30e6      	CPI  R30,LOW(0x6)
0001a9 e0a0      	LDI  R26,HIGH(0x6)
0001aa 07fa      	CPC  R31,R26
0001ab f411      	BRNE _0x6E
                 ; 0000 0158             {
                 ; 0000 0159                   SELECT_INPUT(4);
0001ac e0a4      	LDI  R26,LOW(4)
                 _0x109:
0001ad df9c      	RCALL _SELECT_INPUT
                 ; 0000 015A                   break;
                 ; 0000 015B             }
                 ; 0000 015C       }
                 _0x6E:
                 ; 0000 015D }
                 _0x2000003:
0001ae 9621      	ADIW R28,1
0001af 9508      	RET
                 ; .FEND
                 ;
                 ;void  READ_SELECT(void)
                 ; 0000 0160 {
                 _READ_SELECT:
                 ; .FSTART _READ_SELECT
                 ; 0000 0161      unsigned long int Uint_data_temp[40];
                 ; 0000 0162      unsigned char Uc_temp_cnt;
                 ; 0000 0163      unsigned int Uint_temp;
                 ; 0000 0164      unsigned int data_temp2;
                 ; 0000 0165       if(!RS_INPUT)
0001b0 97ef      	SBIW R28,63
0001b1 97ef      	SBIW R28,63
0001b2 97a2      	SBIW R28,34
0001b3 d824      	RCALL __SAVELOCR6
                 ;	Uint_data_temp -> Y+6
                 ;	Uc_temp_cnt -> R17
                 ;	Uint_temp -> R18,R19
                 ;	data_temp2 -> R20,R21
0001b4 9998      	SBIC 0x13,0
0001b5 c0fa      	RJMP _0x75
                 ; 0000 0166       {
                 ; 0000 0167             LED_SELECT(RS);
0001b6 e0a1      	LDI  R26,LOW(1)
0001b7 df5a      	RCALL _LED_SELECT
                 ; 0000 0168             SELECT_INPUT_COMPARE(RS);
0001b8 e0a1      	LDI  R26,LOW(1)
0001b9 dfcd      	RCALL _SELECT_INPUT_COMPARE
                 ; 0000 0169             if(loop_read_cnt > TIME_GET_SAMPLE)
0001ba e0e3      	LDI  R30,LOW(3)
0001bb 15ec      	CP   R30,R12
0001bc f008      	BRLO PC+2
0001bd c0f1      	RJMP _0x76
                 ; 0000 016A             {
                 ; 0000 016B                   // data = ADE7753_READ(1,VRMS)/253;
                 ; 0000 016C                   loop_read_cnt = 0;
0001be 24cc      	CLR  R12
                 ; 0000 016D                   data_buff[buff_cnt++] = ADE7753_READ(1,VRMS);
0001bf 2de8      	MOV  R30,R8
0001c0 9483      	INC  R8
0001c1 e6a4      	LDI  R26,LOW(_data_buff)
0001c2 e0b1      	LDI  R27,HIGH(_data_buff)
0001c3 e0f0      	LDI  R31,0
0001c4 d7b4      	RCALL __LSLW2
0001c5 0fea      	ADD  R30,R26
0001c6 1ffb      	ADC  R31,R27
0001c7 93ff      	PUSH R31
0001c8 93ef      	PUSH R30
0001c9 e0e1      	LDI  R30,LOW(1)
0001ca 93ea      	ST   -Y,R30
0001cb e1e7      	LDI  R30,LOW(23)
0001cc 93ea      	ST   -Y,R30
0001cd e0a3      	LDI  R26,LOW(3)
0001ce d709      	RCALL _ADE7753_READ
0001cf 91af      	POP  R26
0001d0 91bf      	POP  R27
0001d1 d7f2      	RCALL __PUTDP1
                 ; 0000 016E                   if(buff_cnt >= NUM_SAMPLE)
0001d2 e2e8      	LDI  R30,LOW(40)
0001d3 168e      	CP   R8,R30
0001d4 f008      	BRLO _0x77
                 ; 0000 016F                   {
                 ; 0000 0170                         buff_cnt = 0;
0001d5 2488      	CLR  R8
                 ; 0000 0171                   }
                 ; 0000 0172                   data_temp = 0;
                 _0x77:
0001d6 e0e0      	LDI  R30,LOW(0)
0001d7 93e0 0160 	STS  _data_temp,R30
0001d9 93e0 0161 	STS  _data_temp+1,R30
0001db 93e0 0162 	STS  _data_temp+2,R30
0001dd 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 0173                   for(loop_cnt = 0;loop_cnt<NUM_SAMPLE;loop_cnt++)
0001df 24dd      	CLR  R13
                 _0x79:
0001e0 e2e8      	LDI  R30,LOW(40)
0001e1 16de      	CP   R13,R30
0001e2 f4d8      	BRSH _0x7A
                 ; 0000 0174                   {
                 ; 0000 0175                         data_temp += data_buff[loop_cnt];
0001e3 2ded      	MOV  R30,R13
0001e4 e6a4      	LDI  R26,LOW(_data_buff)
0001e5 e0b1      	LDI  R27,HIGH(_data_buff)
0001e6 e0f0      	LDI  R31,0
0001e7 d791      	RCALL __LSLW2
0001e8 0fae      	ADD  R26,R30
0001e9 1fbf      	ADC  R27,R31
0001ea d7d3      	RCALL __GETD1P
0001eb 91a0 0160 	LDS  R26,_data_temp
0001ed 91b0 0161 	LDS  R27,_data_temp+1
0001ef 9180 0162 	LDS  R24,_data_temp+2
0001f1 9190 0163 	LDS  R25,_data_temp+3
0001f3 d768      	RCALL __ADDD12
0001f4 93e0 0160 	STS  _data_temp,R30
0001f6 93f0 0161 	STS  _data_temp+1,R31
0001f8 9360 0162 	STS  _data_temp+2,R22
0001fa 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 0176                   }
0001fc 94d3      	INC  R13
0001fd cfe2      	RJMP _0x79
                 _0x7A:
                 ; 0000 0177 
                 ; 0000 0178                   for(loop_cnt = 0;loop_cnt<NUM_SAMPLE;loop_cnt++)
0001fe 24dd      	CLR  R13
                 _0x7C:
0001ff e2e8      	LDI  R30,LOW(40)
000200 16de      	CP   R13,R30
000201 f4a0      	BRSH _0x7D
                 ; 0000 0179                   {
                 ; 0000 017A                         Uint_data_temp[loop_cnt] = data_buff[loop_cnt];
000202 2ded      	MOV  R30,R13
000203 e0f0      	LDI  R31,0
000204 01de      	MOVW R26,R28
000205 9616      	ADIW R26,6
000206 d772      	RCALL __LSLW2
000207 0fea      	ADD  R30,R26
000208 1ffb      	ADC  R31,R27
000209 010f      	MOVW R0,R30
00020a 2ded      	MOV  R30,R13
00020b e6a4      	LDI  R26,LOW(_data_buff)
00020c e0b1      	LDI  R27,HIGH(_data_buff)
00020d e0f0      	LDI  R31,0
00020e d76a      	RCALL __LSLW2
00020f 0fae      	ADD  R26,R30
000210 1fbf      	ADC  R27,R31
000211 d7ac      	RCALL __GETD1P
000212 01d0      	MOVW R26,R0
000213 d7b0      	RCALL __PUTDP1
                 ; 0000 017B                   }
000214 94d3      	INC  R13
000215 cfe9      	RJMP _0x7C
                 _0x7D:
                 ; 0000 017C 
                 ; 0000 017D                   for(loop_cnt = 0;loop_cnt<NUM_SAMPLE;loop_cnt++)
000216 24dd      	CLR  R13
                 _0x7F:
000217 e2e8      	LDI  R30,LOW(40)
000218 16de      	CP   R13,R30
000219 f008      	BRLO PC+2
00021a c048      	RJMP _0x80
                 ; 0000 017E                   {
                 ; 0000 017F                         for(Uc_temp_cnt = loop_cnt;Uc_temp_cnt<NUM_SAMPLE;Uc_temp_cnt++)
00021b 2d1d      	MOV  R17,R13
                 _0x82:
00021c 3218      	CPI  R17,40
00021d f008      	BRLO PC+2
00021e c042      	RJMP _0x83
                 ; 0000 0180                         {
                 ; 0000 0181                               if(Uint_data_temp[loop_cnt] > Uint_data_temp[Uc_temp_cnt])
00021f 2ded      	MOV  R30,R13
000220 e0f0      	LDI  R31,0
000221 01de      	MOVW R26,R28
000222 9616      	ADIW R26,6
000223 d755      	RCALL __LSLW2
000224 0fae      	ADD  R26,R30
000225 1fbf      	ADC  R27,R31
000226 d797      	RCALL __GETD1P
000227 937f      	PUSH R23
000228 936f      	PUSH R22
000229 93ff      	PUSH R31
00022a 93ef      	PUSH R30
00022b 2fe1      	MOV  R30,R17
00022c e0f0      	LDI  R31,0
00022d 01de      	MOVW R26,R28
00022e 9616      	ADIW R26,6
00022f d749      	RCALL __LSLW2
000230 0fae      	ADD  R26,R30
000231 1fbf      	ADC  R27,R31
000232 d78b      	RCALL __GETD1P
000233 91af      	POP  R26
000234 91bf      	POP  R27
000235 918f      	POP  R24
000236 919f      	POP  R25
000237 d79b      	RCALL __CPD12
000238 f530      	BRSH _0x84
                 ; 0000 0182                               {
                 ; 0000 0183                                     Uint_temp = Uint_data_temp[loop_cnt];
000239 2ded      	MOV  R30,R13
00023a e0f0      	LDI  R31,0
00023b 01de      	MOVW R26,R28
00023c 9616      	ADIW R26,6
00023d d73b      	RCALL __LSLW2
00023e 0fae      	ADD  R26,R30
00023f 1fbf      	ADC  R27,R31
000240 912d      	LD   R18,X+
000241 913c      	LD   R19,X
                 ; 0000 0184                                     Uint_data_temp[loop_cnt] = Uint_data_temp[Uc_temp_cnt];
000242 2ded      	MOV  R30,R13
000243 e0f0      	LDI  R31,0
000244 01de      	MOVW R26,R28
000245 9616      	ADIW R26,6
000246 d732      	RCALL __LSLW2
000247 0fea      	ADD  R30,R26
000248 1ffb      	ADC  R31,R27
000249 010f      	MOVW R0,R30
00024a 2fe1      	MOV  R30,R17
00024b e0f0      	LDI  R31,0
00024c 01de      	MOVW R26,R28
00024d 9616      	ADIW R26,6
00024e d72a      	RCALL __LSLW2
00024f 0fae      	ADD  R26,R30
000250 1fbf      	ADC  R27,R31
000251 d76c      	RCALL __GETD1P
000252 01d0      	MOVW R26,R0
000253 d770      	RCALL __PUTDP1
                 ; 0000 0185                                     Uint_data_temp[Uc_temp_cnt] = Uint_temp;
000254 2fe1      	MOV  R30,R17
000255 e0f0      	LDI  R31,0
000256 01de      	MOVW R26,R28
000257 9616      	ADIW R26,6
000258 d720      	RCALL __LSLW2
000259 0fae      	ADD  R26,R30
00025a 1fbf      	ADC  R27,R31
00025b 01f9      	MOVW R30,R18
00025c 2766      	CLR  R22
00025d 2777      	CLR  R23
00025e d765      	RCALL __PUTDP1
                 ; 0000 0186                               }
                 ; 0000 0187                         }
                 _0x84:
00025f 5f1f      	SUBI R17,-1
000260 cfbb      	RJMP _0x82
                 _0x83:
                 ; 0000 0188                   }
000261 94d3      	INC  R13
000262 cfb4      	RJMP _0x7F
                 _0x80:
                 ; 0000 0189 
                 ; 0000 018A                   data_temp = 0;
000263 e0e0      	LDI  R30,LOW(0)
000264 93e0 0160 	STS  _data_temp,R30
000266 93e0 0161 	STS  _data_temp+1,R30
000268 93e0 0162 	STS  _data_temp+2,R30
00026a 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 018B                   for(loop_cnt = NUM_FILTER;loop_cnt<NUM_SAMPLE-NUM_FILTER;loop_cnt++)
00026c e0ed      	LDI  R30,LOW(13)
00026d 2ede      	MOV  R13,R30
                 _0x86:
00026e e1eb      	LDI  R30,LOW(27)
00026f 16de      	CP   R13,R30
000270 f4d8      	BRSH _0x87
                 ; 0000 018C                   {
                 ; 0000 018D                         data_temp += data_buff[loop_cnt];
000271 2ded      	MOV  R30,R13
000272 e6a4      	LDI  R26,LOW(_data_buff)
000273 e0b1      	LDI  R27,HIGH(_data_buff)
000274 e0f0      	LDI  R31,0
000275 d703      	RCALL __LSLW2
000276 0fae      	ADD  R26,R30
000277 1fbf      	ADC  R27,R31
000278 d745      	RCALL __GETD1P
000279 91a0 0160 	LDS  R26,_data_temp
00027b 91b0 0161 	LDS  R27,_data_temp+1
00027d 9180 0162 	LDS  R24,_data_temp+2
00027f 9190 0163 	LDS  R25,_data_temp+3
000281 d6da      	RCALL __ADDD12
000282 93e0 0160 	STS  _data_temp,R30
000284 93f0 0161 	STS  _data_temp+1,R31
000286 9360 0162 	STS  _data_temp+2,R22
000288 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 018E                   }
00028a 94d3      	INC  R13
00028b cfe2      	RJMP _0x86
                 _0x87:
                 ; 0000 018F                   //data = (unsigned int)data_temp/6;
                 ; 0000 0190                   if(loop_timer == TIME_UPDATE_DISPLAY)
00028c 91a0 0204 	LDS  R26,_loop_timer
00028e 3ca8      	CPI  R26,LOW(0xC8)
00028f f4f9      	BRNE _0x88
                 ; 0000 0191                   {
                 ; 0000 0192                         loop_timer = 0;
000290 e0e0      	LDI  R30,LOW(0)
000291 93e0 0204 	STS  _loop_timer,R30
                 ; 0000 0193                         data_temp2 = (unsigned int)(data_temp/SR_RATIO)/(NUM_SAMPLE-2*NUM_FILTER);
000293 91a0 0160 	LDS  R26,_data_temp
000295 91b0 0161 	LDS  R27,_data_temp+1
000297 9180 0162 	LDS  R24,_data_temp+2
000299 9190 0163 	LDS  R25,_data_temp+3
                +
00029b e0ea     +LDI R30 , LOW ( 0x10A )
00029c e0f1     +LDI R31 , HIGH ( 0x10A )
00029d e060     +LDI R22 , BYTE3 ( 0x10A )
00029e e070     +LDI R23 , BYTE4 ( 0x10A )
                 	__GETD1N 0x10A
00029f d6f6      	RCALL __DIVD21U
0002a0 2766      	CLR  R22
0002a1 2777      	CLR  R23
0002a2 01df      	MOVW R26,R30
0002a3 e0ee      	LDI  R30,LOW(14)
0002a4 e0f0      	LDI  R31,HIGH(14)
0002a5 d6dd      	RCALL __DIVW21U
0002a6 01af      	MOVW R20,R30
                 ; 0000 0194                         if(data_temp2 > 100)    data = data_temp2;
                +
0002a7 3645     +CPI R20 , LOW ( 101 )
0002a8 e0e0     +LDI R30 , HIGH ( 101 )
0002a9 075e     +CPC R21 , R30
                 	__CPWRN 20,21,101
0002aa f010      	BRLO _0x89
0002ab 015a      	MOVW R10,R20
                 ; 0000 0195                         else data = 0;
0002ac c002      	RJMP _0x8A
                 _0x89:
0002ad 24aa      	CLR  R10
0002ae 24bb      	CLR  R11
                 ; 0000 0196                   }
                 _0x8A:
                 ; 0000 0197             }
                 _0x88:
                 ; 0000 0198       }
                 _0x76:
                 ; 0000 0199       else if(!ST_INPUT)
0002af c4eb      	RJMP _0x8B
                 _0x75:
0002b0 9999      	SBIC 0x13,1
0002b1 c0fa      	RJMP _0x8C
                 ; 0000 019A       {
                 ; 0000 019B             LED_SELECT(ST);
0002b2 e0a2      	LDI  R26,LOW(2)
0002b3 de5e      	RCALL _LED_SELECT
                 ; 0000 019C             SELECT_INPUT_COMPARE(ST);
0002b4 e0a2      	LDI  R26,LOW(2)
0002b5 ded1      	RCALL _SELECT_INPUT_COMPARE
                 ; 0000 019D             if(loop_read_cnt > TIME_GET_SAMPLE)
0002b6 e0e3      	LDI  R30,LOW(3)
0002b7 15ec      	CP   R30,R12
0002b8 f008      	BRLO PC+2
0002b9 c0f1      	RJMP _0x8D
                 ; 0000 019E             {
                 ; 0000 019F                   // data = ADE7753_READ(1,VRMS)/253;
                 ; 0000 01A0                   loop_read_cnt = 0;
0002ba 24cc      	CLR  R12
                 ; 0000 01A1                   data_buff[buff_cnt++] = ADE7753_READ(1,VRMS);
0002bb 2de8      	MOV  R30,R8
0002bc 9483      	INC  R8
0002bd e6a4      	LDI  R26,LOW(_data_buff)
0002be e0b1      	LDI  R27,HIGH(_data_buff)
0002bf e0f0      	LDI  R31,0
0002c0 d6b8      	RCALL __LSLW2
0002c1 0fea      	ADD  R30,R26
0002c2 1ffb      	ADC  R31,R27
0002c3 93ff      	PUSH R31
0002c4 93ef      	PUSH R30
0002c5 e0e1      	LDI  R30,LOW(1)
0002c6 93ea      	ST   -Y,R30
0002c7 e1e7      	LDI  R30,LOW(23)
0002c8 93ea      	ST   -Y,R30
0002c9 e0a3      	LDI  R26,LOW(3)
0002ca d60d      	RCALL _ADE7753_READ
0002cb 91af      	POP  R26
0002cc 91bf      	POP  R27
0002cd d6f6      	RCALL __PUTDP1
                 ; 0000 01A2                   if(buff_cnt >= NUM_SAMPLE)
0002ce e2e8      	LDI  R30,LOW(40)
0002cf 168e      	CP   R8,R30
0002d0 f008      	BRLO _0x8E
                 ; 0000 01A3                   {
                 ; 0000 01A4                         buff_cnt = 0;
0002d1 2488      	CLR  R8
                 ; 0000 01A5                   }
                 ; 0000 01A6                   data_temp = 0;
                 _0x8E:
0002d2 e0e0      	LDI  R30,LOW(0)
0002d3 93e0 0160 	STS  _data_temp,R30
0002d5 93e0 0161 	STS  _data_temp+1,R30
0002d7 93e0 0162 	STS  _data_temp+2,R30
0002d9 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 01A7                   for(loop_cnt = 0;loop_cnt<NUM_SAMPLE;loop_cnt++)
0002db 24dd      	CLR  R13
                 _0x90:
0002dc e2e8      	LDI  R30,LOW(40)
0002dd 16de      	CP   R13,R30
0002de f4d8      	BRSH _0x91
                 ; 0000 01A8                   {
                 ; 0000 01A9                         data_temp += data_buff[loop_cnt];
0002df 2ded      	MOV  R30,R13
0002e0 e6a4      	LDI  R26,LOW(_data_buff)
0002e1 e0b1      	LDI  R27,HIGH(_data_buff)
0002e2 e0f0      	LDI  R31,0
0002e3 d695      	RCALL __LSLW2
0002e4 0fae      	ADD  R26,R30
0002e5 1fbf      	ADC  R27,R31
0002e6 d6d7      	RCALL __GETD1P
0002e7 91a0 0160 	LDS  R26,_data_temp
0002e9 91b0 0161 	LDS  R27,_data_temp+1
0002eb 9180 0162 	LDS  R24,_data_temp+2
0002ed 9190 0163 	LDS  R25,_data_temp+3
0002ef d66c      	RCALL __ADDD12
0002f0 93e0 0160 	STS  _data_temp,R30
0002f2 93f0 0161 	STS  _data_temp+1,R31
0002f4 9360 0162 	STS  _data_temp+2,R22
0002f6 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 01AA                   }
0002f8 94d3      	INC  R13
0002f9 cfe2      	RJMP _0x90
                 _0x91:
                 ; 0000 01AB 
                 ; 0000 01AC                   for(loop_cnt = 0;loop_cnt<NUM_SAMPLE;loop_cnt++)
0002fa 24dd      	CLR  R13
                 _0x93:
0002fb e2e8      	LDI  R30,LOW(40)
0002fc 16de      	CP   R13,R30
0002fd f4a0      	BRSH _0x94
                 ; 0000 01AD                   {
                 ; 0000 01AE                         Uint_data_temp[loop_cnt] = data_buff[loop_cnt];
0002fe 2ded      	MOV  R30,R13
0002ff e0f0      	LDI  R31,0
000300 01de      	MOVW R26,R28
000301 9616      	ADIW R26,6
000302 d676      	RCALL __LSLW2
000303 0fea      	ADD  R30,R26
000304 1ffb      	ADC  R31,R27
000305 010f      	MOVW R0,R30
000306 2ded      	MOV  R30,R13
000307 e6a4      	LDI  R26,LOW(_data_buff)
000308 e0b1      	LDI  R27,HIGH(_data_buff)
000309 e0f0      	LDI  R31,0
00030a d66e      	RCALL __LSLW2
00030b 0fae      	ADD  R26,R30
00030c 1fbf      	ADC  R27,R31
00030d d6b0      	RCALL __GETD1P
00030e 01d0      	MOVW R26,R0
00030f d6b4      	RCALL __PUTDP1
                 ; 0000 01AF                   }
000310 94d3      	INC  R13
000311 cfe9      	RJMP _0x93
                 _0x94:
                 ; 0000 01B0 
                 ; 0000 01B1                   for(loop_cnt = 0;loop_cnt<NUM_SAMPLE;loop_cnt++)
000312 24dd      	CLR  R13
                 _0x96:
000313 e2e8      	LDI  R30,LOW(40)
000314 16de      	CP   R13,R30
000315 f008      	BRLO PC+2
000316 c048      	RJMP _0x97
                 ; 0000 01B2                   {
                 ; 0000 01B3                         for(Uc_temp_cnt = loop_cnt;Uc_temp_cnt<NUM_SAMPLE;Uc_temp_cnt++)
000317 2d1d      	MOV  R17,R13
                 _0x99:
000318 3218      	CPI  R17,40
000319 f008      	BRLO PC+2
00031a c042      	RJMP _0x9A
                 ; 0000 01B4                         {
                 ; 0000 01B5                               if(Uint_data_temp[loop_cnt] > Uint_data_temp[Uc_temp_cnt])
00031b 2ded      	MOV  R30,R13
00031c e0f0      	LDI  R31,0
00031d 01de      	MOVW R26,R28
00031e 9616      	ADIW R26,6
00031f d659      	RCALL __LSLW2
000320 0fae      	ADD  R26,R30
000321 1fbf      	ADC  R27,R31
000322 d69b      	RCALL __GETD1P
000323 937f      	PUSH R23
000324 936f      	PUSH R22
000325 93ff      	PUSH R31
000326 93ef      	PUSH R30
000327 2fe1      	MOV  R30,R17
000328 e0f0      	LDI  R31,0
000329 01de      	MOVW R26,R28
00032a 9616      	ADIW R26,6
00032b d64d      	RCALL __LSLW2
00032c 0fae      	ADD  R26,R30
00032d 1fbf      	ADC  R27,R31
00032e d68f      	RCALL __GETD1P
00032f 91af      	POP  R26
000330 91bf      	POP  R27
000331 918f      	POP  R24
000332 919f      	POP  R25
000333 d69f      	RCALL __CPD12
000334 f530      	BRSH _0x9B
                 ; 0000 01B6                               {
                 ; 0000 01B7                                     Uint_temp = Uint_data_temp[loop_cnt];
000335 2ded      	MOV  R30,R13
000336 e0f0      	LDI  R31,0
000337 01de      	MOVW R26,R28
000338 9616      	ADIW R26,6
000339 d63f      	RCALL __LSLW2
00033a 0fae      	ADD  R26,R30
00033b 1fbf      	ADC  R27,R31
00033c 912d      	LD   R18,X+
00033d 913c      	LD   R19,X
                 ; 0000 01B8                                     Uint_data_temp[loop_cnt] = Uint_data_temp[Uc_temp_cnt];
00033e 2ded      	MOV  R30,R13
00033f e0f0      	LDI  R31,0
000340 01de      	MOVW R26,R28
000341 9616      	ADIW R26,6
000342 d636      	RCALL __LSLW2
000343 0fea      	ADD  R30,R26
000344 1ffb      	ADC  R31,R27
000345 010f      	MOVW R0,R30
000346 2fe1      	MOV  R30,R17
000347 e0f0      	LDI  R31,0
000348 01de      	MOVW R26,R28
000349 9616      	ADIW R26,6
00034a d62e      	RCALL __LSLW2
00034b 0fae      	ADD  R26,R30
00034c 1fbf      	ADC  R27,R31
00034d d670      	RCALL __GETD1P
00034e 01d0      	MOVW R26,R0
00034f d674      	RCALL __PUTDP1
                 ; 0000 01B9                                     Uint_data_temp[Uc_temp_cnt] = Uint_temp;
000350 2fe1      	MOV  R30,R17
000351 e0f0      	LDI  R31,0
000352 01de      	MOVW R26,R28
000353 9616      	ADIW R26,6
000354 d624      	RCALL __LSLW2
000355 0fae      	ADD  R26,R30
000356 1fbf      	ADC  R27,R31
000357 01f9      	MOVW R30,R18
000358 2766      	CLR  R22
000359 2777      	CLR  R23
00035a d669      	RCALL __PUTDP1
                 ; 0000 01BA                               }
                 ; 0000 01BB                         }
                 _0x9B:
00035b 5f1f      	SUBI R17,-1
00035c cfbb      	RJMP _0x99
                 _0x9A:
                 ; 0000 01BC                   }
00035d 94d3      	INC  R13
00035e cfb4      	RJMP _0x96
                 _0x97:
                 ; 0000 01BD 
                 ; 0000 01BE                   data_temp = 0;
00035f e0e0      	LDI  R30,LOW(0)
000360 93e0 0160 	STS  _data_temp,R30
000362 93e0 0161 	STS  _data_temp+1,R30
000364 93e0 0162 	STS  _data_temp+2,R30
000366 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 01BF                   for(loop_cnt = NUM_FILTER;loop_cnt<NUM_SAMPLE-NUM_FILTER;loop_cnt++)
000368 e0ed      	LDI  R30,LOW(13)
000369 2ede      	MOV  R13,R30
                 _0x9D:
00036a e1eb      	LDI  R30,LOW(27)
00036b 16de      	CP   R13,R30
00036c f4d8      	BRSH _0x9E
                 ; 0000 01C0                   {
                 ; 0000 01C1                         data_temp += data_buff[loop_cnt];
00036d 2ded      	MOV  R30,R13
00036e e6a4      	LDI  R26,LOW(_data_buff)
00036f e0b1      	LDI  R27,HIGH(_data_buff)
000370 e0f0      	LDI  R31,0
000371 d607      	RCALL __LSLW2
000372 0fae      	ADD  R26,R30
000373 1fbf      	ADC  R27,R31
000374 d649      	RCALL __GETD1P
000375 91a0 0160 	LDS  R26,_data_temp
000377 91b0 0161 	LDS  R27,_data_temp+1
000379 9180 0162 	LDS  R24,_data_temp+2
00037b 9190 0163 	LDS  R25,_data_temp+3
00037d d5de      	RCALL __ADDD12
00037e 93e0 0160 	STS  _data_temp,R30
000380 93f0 0161 	STS  _data_temp+1,R31
000382 9360 0162 	STS  _data_temp+2,R22
000384 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 01C2                   }
000386 94d3      	INC  R13
000387 cfe2      	RJMP _0x9D
                 _0x9E:
                 ; 0000 01C3                   //data = (unsigned int)data_temp/6;
                 ; 0000 01C4                   if(loop_timer == TIME_UPDATE_DISPLAY)
000388 91a0 0204 	LDS  R26,_loop_timer
00038a 3ca8      	CPI  R26,LOW(0xC8)
00038b f4f9      	BRNE _0x9F
                 ; 0000 01C5                   {
                 ; 0000 01C6                         loop_timer = 0;
00038c e0e0      	LDI  R30,LOW(0)
00038d 93e0 0204 	STS  _loop_timer,R30
                 ; 0000 01C7                         data_temp2 = (unsigned int)(data_temp/ST_RATIO)/(NUM_SAMPLE-2*NUM_FILTER);
00038f 91a0 0160 	LDS  R26,_data_temp
000391 91b0 0161 	LDS  R27,_data_temp+1
000393 9180 0162 	LDS  R24,_data_temp+2
000395 9190 0163 	LDS  R25,_data_temp+3
                +
000397 efe4     +LDI R30 , LOW ( 0xF4 )
000398 e0f0     +LDI R31 , HIGH ( 0xF4 )
000399 e060     +LDI R22 , BYTE3 ( 0xF4 )
00039a e070     +LDI R23 , BYTE4 ( 0xF4 )
                 	__GETD1N 0xF4
00039b d5fa      	RCALL __DIVD21U
00039c 2766      	CLR  R22
00039d 2777      	CLR  R23
00039e 01df      	MOVW R26,R30
00039f e0ee      	LDI  R30,LOW(14)
0003a0 e0f0      	LDI  R31,HIGH(14)
0003a1 d5e1      	RCALL __DIVW21U
0003a2 01af      	MOVW R20,R30
                 ; 0000 01C8                         if(data_temp2 > 100)    data = data_temp2;
                +
0003a3 3645     +CPI R20 , LOW ( 101 )
0003a4 e0e0     +LDI R30 , HIGH ( 101 )
0003a5 075e     +CPC R21 , R30
                 	__CPWRN 20,21,101
0003a6 f010      	BRLO _0xA0
0003a7 015a      	MOVW R10,R20
                 ; 0000 01C9                         else data = 0;
0003a8 c002      	RJMP _0xA1
                 _0xA0:
0003a9 24aa      	CLR  R10
0003aa 24bb      	CLR  R11
                 ; 0000 01CA                   }
                 _0xA1:
                 ; 0000 01CB             }
                 _0x9F:
                 ; 0000 01CC       }
                 _0x8D:
                 ; 0000 01CD       else if(!TR_INPUT)
0003ab c3ef      	RJMP _0xA2
                 _0x8C:
0003ac 999a      	SBIC 0x13,2
0003ad c0fa      	RJMP _0xA3
                 ; 0000 01CE       {
                 ; 0000 01CF             LED_SELECT(TR);
0003ae e0a3      	LDI  R26,LOW(3)
0003af dd62      	RCALL _LED_SELECT
                 ; 0000 01D0             SELECT_INPUT_COMPARE(TR);
0003b0 e0a3      	LDI  R26,LOW(3)
0003b1 ddd5      	RCALL _SELECT_INPUT_COMPARE
                 ; 0000 01D1             if(loop_read_cnt > TIME_GET_SAMPLE)
0003b2 e0e3      	LDI  R30,LOW(3)
0003b3 15ec      	CP   R30,R12
0003b4 f008      	BRLO PC+2
0003b5 c0f1      	RJMP _0xA4
                 ; 0000 01D2             {
                 ; 0000 01D3                   // data = ADE7753_READ(1,VRMS)/253;
                 ; 0000 01D4                   loop_read_cnt = 0;
0003b6 24cc      	CLR  R12
                 ; 0000 01D5                   data_buff[buff_cnt++] = ADE7753_READ(1,VRMS);
0003b7 2de8      	MOV  R30,R8
0003b8 9483      	INC  R8
0003b9 e6a4      	LDI  R26,LOW(_data_buff)
0003ba e0b1      	LDI  R27,HIGH(_data_buff)
0003bb e0f0      	LDI  R31,0
0003bc d5bc      	RCALL __LSLW2
0003bd 0fea      	ADD  R30,R26
0003be 1ffb      	ADC  R31,R27
0003bf 93ff      	PUSH R31
0003c0 93ef      	PUSH R30
0003c1 e0e1      	LDI  R30,LOW(1)
0003c2 93ea      	ST   -Y,R30
0003c3 e1e7      	LDI  R30,LOW(23)
0003c4 93ea      	ST   -Y,R30
0003c5 e0a3      	LDI  R26,LOW(3)
0003c6 d511      	RCALL _ADE7753_READ
0003c7 91af      	POP  R26
0003c8 91bf      	POP  R27
0003c9 d5fa      	RCALL __PUTDP1
                 ; 0000 01D6                   if(buff_cnt >= NUM_SAMPLE)
0003ca e2e8      	LDI  R30,LOW(40)
0003cb 168e      	CP   R8,R30
0003cc f008      	BRLO _0xA5
                 ; 0000 01D7                   {
                 ; 0000 01D8                         buff_cnt = 0;
0003cd 2488      	CLR  R8
                 ; 0000 01D9                   }
                 ; 0000 01DA                   data_temp = 0;
                 _0xA5:
0003ce e0e0      	LDI  R30,LOW(0)
0003cf 93e0 0160 	STS  _data_temp,R30
0003d1 93e0 0161 	STS  _data_temp+1,R30
0003d3 93e0 0162 	STS  _data_temp+2,R30
0003d5 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 01DB                   for(loop_cnt = 0;loop_cnt<NUM_SAMPLE;loop_cnt++)
0003d7 24dd      	CLR  R13
                 _0xA7:
0003d8 e2e8      	LDI  R30,LOW(40)
0003d9 16de      	CP   R13,R30
0003da f4d8      	BRSH _0xA8
                 ; 0000 01DC                   {
                 ; 0000 01DD                         data_temp += data_buff[loop_cnt];
0003db 2ded      	MOV  R30,R13
0003dc e6a4      	LDI  R26,LOW(_data_buff)
0003dd e0b1      	LDI  R27,HIGH(_data_buff)
0003de e0f0      	LDI  R31,0
0003df d599      	RCALL __LSLW2
0003e0 0fae      	ADD  R26,R30
0003e1 1fbf      	ADC  R27,R31
0003e2 d5db      	RCALL __GETD1P
0003e3 91a0 0160 	LDS  R26,_data_temp
0003e5 91b0 0161 	LDS  R27,_data_temp+1
0003e7 9180 0162 	LDS  R24,_data_temp+2
0003e9 9190 0163 	LDS  R25,_data_temp+3
0003eb d570      	RCALL __ADDD12
0003ec 93e0 0160 	STS  _data_temp,R30
0003ee 93f0 0161 	STS  _data_temp+1,R31
0003f0 9360 0162 	STS  _data_temp+2,R22
0003f2 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 01DE                   }
0003f4 94d3      	INC  R13
0003f5 cfe2      	RJMP _0xA7
                 _0xA8:
                 ; 0000 01DF 
                 ; 0000 01E0                   for(loop_cnt = 0;loop_cnt<NUM_SAMPLE;loop_cnt++)
0003f6 24dd      	CLR  R13
                 _0xAA:
0003f7 e2e8      	LDI  R30,LOW(40)
0003f8 16de      	CP   R13,R30
0003f9 f4a0      	BRSH _0xAB
                 ; 0000 01E1                   {
                 ; 0000 01E2                         Uint_data_temp[loop_cnt] = data_buff[loop_cnt];
0003fa 2ded      	MOV  R30,R13
0003fb e0f0      	LDI  R31,0
0003fc 01de      	MOVW R26,R28
0003fd 9616      	ADIW R26,6
0003fe d57a      	RCALL __LSLW2
0003ff 0fea      	ADD  R30,R26
000400 1ffb      	ADC  R31,R27
000401 010f      	MOVW R0,R30
000402 2ded      	MOV  R30,R13
000403 e6a4      	LDI  R26,LOW(_data_buff)
000404 e0b1      	LDI  R27,HIGH(_data_buff)
000405 e0f0      	LDI  R31,0
000406 d572      	RCALL __LSLW2
000407 0fae      	ADD  R26,R30
000408 1fbf      	ADC  R27,R31
000409 d5b4      	RCALL __GETD1P
00040a 01d0      	MOVW R26,R0
00040b d5b8      	RCALL __PUTDP1
                 ; 0000 01E3                   }
00040c 94d3      	INC  R13
00040d cfe9      	RJMP _0xAA
                 _0xAB:
                 ; 0000 01E4 
                 ; 0000 01E5                   for(loop_cnt = 0;loop_cnt<NUM_SAMPLE;loop_cnt++)
00040e 24dd      	CLR  R13
                 _0xAD:
00040f e2e8      	LDI  R30,LOW(40)
000410 16de      	CP   R13,R30
000411 f008      	BRLO PC+2
000412 c048      	RJMP _0xAE
                 ; 0000 01E6                   {
                 ; 0000 01E7                         for(Uc_temp_cnt = loop_cnt;Uc_temp_cnt<NUM_SAMPLE;Uc_temp_cnt++)
000413 2d1d      	MOV  R17,R13
                 _0xB0:
000414 3218      	CPI  R17,40
000415 f008      	BRLO PC+2
000416 c042      	RJMP _0xB1
                 ; 0000 01E8                         {
                 ; 0000 01E9                               if(Uint_data_temp[loop_cnt] > Uint_data_temp[Uc_temp_cnt])
000417 2ded      	MOV  R30,R13
000418 e0f0      	LDI  R31,0
000419 01de      	MOVW R26,R28
00041a 9616      	ADIW R26,6
00041b d55d      	RCALL __LSLW2
00041c 0fae      	ADD  R26,R30
00041d 1fbf      	ADC  R27,R31
00041e d59f      	RCALL __GETD1P
00041f 937f      	PUSH R23
000420 936f      	PUSH R22
000421 93ff      	PUSH R31
000422 93ef      	PUSH R30
000423 2fe1      	MOV  R30,R17
000424 e0f0      	LDI  R31,0
000425 01de      	MOVW R26,R28
000426 9616      	ADIW R26,6
000427 d551      	RCALL __LSLW2
000428 0fae      	ADD  R26,R30
000429 1fbf      	ADC  R27,R31
00042a d593      	RCALL __GETD1P
00042b 91af      	POP  R26
00042c 91bf      	POP  R27
00042d 918f      	POP  R24
00042e 919f      	POP  R25
00042f d5a3      	RCALL __CPD12
000430 f530      	BRSH _0xB2
                 ; 0000 01EA                               {
                 ; 0000 01EB                                     Uint_temp = Uint_data_temp[loop_cnt];
000431 2ded      	MOV  R30,R13
000432 e0f0      	LDI  R31,0
000433 01de      	MOVW R26,R28
000434 9616      	ADIW R26,6
000435 d543      	RCALL __LSLW2
000436 0fae      	ADD  R26,R30
000437 1fbf      	ADC  R27,R31
000438 912d      	LD   R18,X+
000439 913c      	LD   R19,X
                 ; 0000 01EC                                     Uint_data_temp[loop_cnt] = Uint_data_temp[Uc_temp_cnt];
00043a 2ded      	MOV  R30,R13
00043b e0f0      	LDI  R31,0
00043c 01de      	MOVW R26,R28
00043d 9616      	ADIW R26,6
00043e d53a      	RCALL __LSLW2
00043f 0fea      	ADD  R30,R26
000440 1ffb      	ADC  R31,R27
000441 010f      	MOVW R0,R30
000442 2fe1      	MOV  R30,R17
000443 e0f0      	LDI  R31,0
000444 01de      	MOVW R26,R28
000445 9616      	ADIW R26,6
000446 d532      	RCALL __LSLW2
000447 0fae      	ADD  R26,R30
000448 1fbf      	ADC  R27,R31
000449 d574      	RCALL __GETD1P
00044a 01d0      	MOVW R26,R0
00044b d578      	RCALL __PUTDP1
                 ; 0000 01ED                                     Uint_data_temp[Uc_temp_cnt] = Uint_temp;
00044c 2fe1      	MOV  R30,R17
00044d e0f0      	LDI  R31,0
00044e 01de      	MOVW R26,R28
00044f 9616      	ADIW R26,6
000450 d528      	RCALL __LSLW2
000451 0fae      	ADD  R26,R30
000452 1fbf      	ADC  R27,R31
000453 01f9      	MOVW R30,R18
000454 2766      	CLR  R22
000455 2777      	CLR  R23
000456 d56d      	RCALL __PUTDP1
                 ; 0000 01EE                               }
                 ; 0000 01EF                         }
                 _0xB2:
000457 5f1f      	SUBI R17,-1
000458 cfbb      	RJMP _0xB0
                 _0xB1:
                 ; 0000 01F0                   }
000459 94d3      	INC  R13
00045a cfb4      	RJMP _0xAD
                 _0xAE:
                 ; 0000 01F1 
                 ; 0000 01F2                   data_temp = 0;
00045b e0e0      	LDI  R30,LOW(0)
00045c 93e0 0160 	STS  _data_temp,R30
00045e 93e0 0161 	STS  _data_temp+1,R30
000460 93e0 0162 	STS  _data_temp+2,R30
000462 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 01F3                   for(loop_cnt = NUM_FILTER;loop_cnt<NUM_SAMPLE-NUM_FILTER;loop_cnt++)
000464 e0ed      	LDI  R30,LOW(13)
000465 2ede      	MOV  R13,R30
                 _0xB4:
000466 e1eb      	LDI  R30,LOW(27)
000467 16de      	CP   R13,R30
000468 f4d8      	BRSH _0xB5
                 ; 0000 01F4                   {
                 ; 0000 01F5                         data_temp += data_buff[loop_cnt];
000469 2ded      	MOV  R30,R13
00046a e6a4      	LDI  R26,LOW(_data_buff)
00046b e0b1      	LDI  R27,HIGH(_data_buff)
00046c e0f0      	LDI  R31,0
00046d d50b      	RCALL __LSLW2
00046e 0fae      	ADD  R26,R30
00046f 1fbf      	ADC  R27,R31
000470 d54d      	RCALL __GETD1P
000471 91a0 0160 	LDS  R26,_data_temp
000473 91b0 0161 	LDS  R27,_data_temp+1
000475 9180 0162 	LDS  R24,_data_temp+2
000477 9190 0163 	LDS  R25,_data_temp+3
000479 d4e2      	RCALL __ADDD12
00047a 93e0 0160 	STS  _data_temp,R30
00047c 93f0 0161 	STS  _data_temp+1,R31
00047e 9360 0162 	STS  _data_temp+2,R22
000480 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 01F6                   }
000482 94d3      	INC  R13
000483 cfe2      	RJMP _0xB4
                 _0xB5:
                 ; 0000 01F7                   if(loop_timer == TIME_UPDATE_DISPLAY)
000484 91a0 0204 	LDS  R26,_loop_timer
000486 3ca8      	CPI  R26,LOW(0xC8)
000487 f4f9      	BRNE _0xB6
                 ; 0000 01F8                   {
                 ; 0000 01F9                         loop_timer = 0;
000488 e0e0      	LDI  R30,LOW(0)
000489 93e0 0204 	STS  _loop_timer,R30
                 ; 0000 01FA                         data_temp2 = (unsigned int)(data_temp/TR_RATIO)/(NUM_SAMPLE-2*NUM_FILTER);
00048b 91a0 0160 	LDS  R26,_data_temp
00048d 91b0 0161 	LDS  R27,_data_temp+1
00048f 9180 0162 	LDS  R24,_data_temp+2
000491 9190 0163 	LDS  R25,_data_temp+3
                +
000493 efec     +LDI R30 , LOW ( 0xFC )
000494 e0f0     +LDI R31 , HIGH ( 0xFC )
000495 e060     +LDI R22 , BYTE3 ( 0xFC )
000496 e070     +LDI R23 , BYTE4 ( 0xFC )
                 	__GETD1N 0xFC
000497 d4fe      	RCALL __DIVD21U
000498 2766      	CLR  R22
000499 2777      	CLR  R23
00049a 01df      	MOVW R26,R30
00049b e0ee      	LDI  R30,LOW(14)
00049c e0f0      	LDI  R31,HIGH(14)
00049d d4e5      	RCALL __DIVW21U
00049e 01af      	MOVW R20,R30
                 ; 0000 01FB                         if(data_temp2 > 100)    data = data_temp2;
                +
00049f 3645     +CPI R20 , LOW ( 101 )
0004a0 e0e0     +LDI R30 , HIGH ( 101 )
0004a1 075e     +CPC R21 , R30
                 	__CPWRN 20,21,101
0004a2 f010      	BRLO _0xB7
0004a3 015a      	MOVW R10,R20
                 ; 0000 01FC                         else data = 0;
0004a4 c002      	RJMP _0xB8
                 _0xB7:
0004a5 24aa      	CLR  R10
0004a6 24bb      	CLR  R11
                 ; 0000 01FD                   }
                 _0xB8:
                 ; 0000 01FE             }
                 _0xB6:
                 ; 0000 01FF       }
                 _0xA4:
                 ; 0000 0200       else if(!RN_INPUT)
0004a7 c2f3      	RJMP _0xB9
                 _0xA3:
0004a8 999b      	SBIC 0x13,3
0004a9 c0fa      	RJMP _0xBA
                 ; 0000 0201       {
                 ; 0000 0202             LED_SELECT(RN);
0004aa e0a4      	LDI  R26,LOW(4)
0004ab dc66      	RCALL _LED_SELECT
                 ; 0000 0203             SELECT_INPUT_COMPARE(RN);
0004ac e0a4      	LDI  R26,LOW(4)
0004ad dcd9      	RCALL _SELECT_INPUT_COMPARE
                 ; 0000 0204            if(loop_read_cnt > TIME_GET_SAMPLE)
0004ae e0e3      	LDI  R30,LOW(3)
0004af 15ec      	CP   R30,R12
0004b0 f008      	BRLO PC+2
0004b1 c0f1      	RJMP _0xBB
                 ; 0000 0205             {
                 ; 0000 0206                   loop_read_cnt = 0;
0004b2 24cc      	CLR  R12
                 ; 0000 0207                   data_buff[buff_cnt++] = ADE7753_READ(1,VRMS);
0004b3 2de8      	MOV  R30,R8
0004b4 9483      	INC  R8
0004b5 e6a4      	LDI  R26,LOW(_data_buff)
0004b6 e0b1      	LDI  R27,HIGH(_data_buff)
0004b7 e0f0      	LDI  R31,0
0004b8 d4c0      	RCALL __LSLW2
0004b9 0fea      	ADD  R30,R26
0004ba 1ffb      	ADC  R31,R27
0004bb 93ff      	PUSH R31
0004bc 93ef      	PUSH R30
0004bd e0e1      	LDI  R30,LOW(1)
0004be 93ea      	ST   -Y,R30
0004bf e1e7      	LDI  R30,LOW(23)
0004c0 93ea      	ST   -Y,R30
0004c1 e0a3      	LDI  R26,LOW(3)
0004c2 d415      	RCALL _ADE7753_READ
0004c3 91af      	POP  R26
0004c4 91bf      	POP  R27
0004c5 d4fe      	RCALL __PUTDP1
                 ; 0000 0208                   if(buff_cnt >= NUM_SAMPLE)
0004c6 e2e8      	LDI  R30,LOW(40)
0004c7 168e      	CP   R8,R30
0004c8 f008      	BRLO _0xBC
                 ; 0000 0209                   {
                 ; 0000 020A                         buff_cnt = 0;
0004c9 2488      	CLR  R8
                 ; 0000 020B                   }
                 ; 0000 020C                   data_temp = 0;
                 _0xBC:
0004ca e0e0      	LDI  R30,LOW(0)
0004cb 93e0 0160 	STS  _data_temp,R30
0004cd 93e0 0161 	STS  _data_temp+1,R30
0004cf 93e0 0162 	STS  _data_temp+2,R30
0004d1 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 020D                   for(loop_cnt = 0;loop_cnt<NUM_SAMPLE;loop_cnt++)
0004d3 24dd      	CLR  R13
                 _0xBE:
0004d4 e2e8      	LDI  R30,LOW(40)
0004d5 16de      	CP   R13,R30
0004d6 f4d8      	BRSH _0xBF
                 ; 0000 020E                   {
                 ; 0000 020F                         data_temp += data_buff[loop_cnt];
0004d7 2ded      	MOV  R30,R13
0004d8 e6a4      	LDI  R26,LOW(_data_buff)
0004d9 e0b1      	LDI  R27,HIGH(_data_buff)
0004da e0f0      	LDI  R31,0
0004db d49d      	RCALL __LSLW2
0004dc 0fae      	ADD  R26,R30
0004dd 1fbf      	ADC  R27,R31
0004de d4df      	RCALL __GETD1P
0004df 91a0 0160 	LDS  R26,_data_temp
0004e1 91b0 0161 	LDS  R27,_data_temp+1
0004e3 9180 0162 	LDS  R24,_data_temp+2
0004e5 9190 0163 	LDS  R25,_data_temp+3
0004e7 d474      	RCALL __ADDD12
0004e8 93e0 0160 	STS  _data_temp,R30
0004ea 93f0 0161 	STS  _data_temp+1,R31
0004ec 9360 0162 	STS  _data_temp+2,R22
0004ee 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 0210                   }
0004f0 94d3      	INC  R13
0004f1 cfe2      	RJMP _0xBE
                 _0xBF:
                 ; 0000 0211 
                 ; 0000 0212                   for(loop_cnt = 0;loop_cnt<NUM_SAMPLE;loop_cnt++)
0004f2 24dd      	CLR  R13
                 _0xC1:
0004f3 e2e8      	LDI  R30,LOW(40)
0004f4 16de      	CP   R13,R30
0004f5 f4a0      	BRSH _0xC2
                 ; 0000 0213                   {
                 ; 0000 0214                         Uint_data_temp[loop_cnt] = data_buff[loop_cnt];
0004f6 2ded      	MOV  R30,R13
0004f7 e0f0      	LDI  R31,0
0004f8 01de      	MOVW R26,R28
0004f9 9616      	ADIW R26,6
0004fa d47e      	RCALL __LSLW2
0004fb 0fea      	ADD  R30,R26
0004fc 1ffb      	ADC  R31,R27
0004fd 010f      	MOVW R0,R30
0004fe 2ded      	MOV  R30,R13
0004ff e6a4      	LDI  R26,LOW(_data_buff)
000500 e0b1      	LDI  R27,HIGH(_data_buff)
000501 e0f0      	LDI  R31,0
000502 d476      	RCALL __LSLW2
000503 0fae      	ADD  R26,R30
000504 1fbf      	ADC  R27,R31
000505 d4b8      	RCALL __GETD1P
000506 01d0      	MOVW R26,R0
000507 d4bc      	RCALL __PUTDP1
                 ; 0000 0215                   }
000508 94d3      	INC  R13
000509 cfe9      	RJMP _0xC1
                 _0xC2:
                 ; 0000 0216 
                 ; 0000 0217                   for(loop_cnt = 0;loop_cnt<40;loop_cnt++)
00050a 24dd      	CLR  R13
                 _0xC4:
00050b e2e8      	LDI  R30,LOW(40)
00050c 16de      	CP   R13,R30
00050d f008      	BRLO PC+2
00050e c048      	RJMP _0xC5
                 ; 0000 0218                   {
                 ; 0000 0219                         for(Uc_temp_cnt = loop_cnt;Uc_temp_cnt<NUM_SAMPLE;Uc_temp_cnt++)
00050f 2d1d      	MOV  R17,R13
                 _0xC7:
000510 3218      	CPI  R17,40
000511 f008      	BRLO PC+2
000512 c042      	RJMP _0xC8
                 ; 0000 021A                         {
                 ; 0000 021B                               if(Uint_data_temp[loop_cnt] > Uint_data_temp[Uc_temp_cnt])
000513 2ded      	MOV  R30,R13
000514 e0f0      	LDI  R31,0
000515 01de      	MOVW R26,R28
000516 9616      	ADIW R26,6
000517 d461      	RCALL __LSLW2
000518 0fae      	ADD  R26,R30
000519 1fbf      	ADC  R27,R31
00051a d4a3      	RCALL __GETD1P
00051b 937f      	PUSH R23
00051c 936f      	PUSH R22
00051d 93ff      	PUSH R31
00051e 93ef      	PUSH R30
00051f 2fe1      	MOV  R30,R17
000520 e0f0      	LDI  R31,0
000521 01de      	MOVW R26,R28
000522 9616      	ADIW R26,6
000523 d455      	RCALL __LSLW2
000524 0fae      	ADD  R26,R30
000525 1fbf      	ADC  R27,R31
000526 d497      	RCALL __GETD1P
000527 91af      	POP  R26
000528 91bf      	POP  R27
000529 918f      	POP  R24
00052a 919f      	POP  R25
00052b d4a7      	RCALL __CPD12
00052c f530      	BRSH _0xC9
                 ; 0000 021C                               {
                 ; 0000 021D                                     Uint_temp = Uint_data_temp[loop_cnt];
00052d 2ded      	MOV  R30,R13
00052e e0f0      	LDI  R31,0
00052f 01de      	MOVW R26,R28
000530 9616      	ADIW R26,6
000531 d447      	RCALL __LSLW2
000532 0fae      	ADD  R26,R30
000533 1fbf      	ADC  R27,R31
000534 912d      	LD   R18,X+
000535 913c      	LD   R19,X
                 ; 0000 021E                                     Uint_data_temp[loop_cnt] = Uint_data_temp[Uc_temp_cnt];
000536 2ded      	MOV  R30,R13
000537 e0f0      	LDI  R31,0
000538 01de      	MOVW R26,R28
000539 9616      	ADIW R26,6
00053a d43e      	RCALL __LSLW2
00053b 0fea      	ADD  R30,R26
00053c 1ffb      	ADC  R31,R27
00053d 010f      	MOVW R0,R30
00053e 2fe1      	MOV  R30,R17
00053f e0f0      	LDI  R31,0
000540 01de      	MOVW R26,R28
000541 9616      	ADIW R26,6
000542 d436      	RCALL __LSLW2
000543 0fae      	ADD  R26,R30
000544 1fbf      	ADC  R27,R31
000545 d478      	RCALL __GETD1P
000546 01d0      	MOVW R26,R0
000547 d47c      	RCALL __PUTDP1
                 ; 0000 021F                                     Uint_data_temp[Uc_temp_cnt] = Uint_temp;
000548 2fe1      	MOV  R30,R17
000549 e0f0      	LDI  R31,0
00054a 01de      	MOVW R26,R28
00054b 9616      	ADIW R26,6
00054c d42c      	RCALL __LSLW2
00054d 0fae      	ADD  R26,R30
00054e 1fbf      	ADC  R27,R31
00054f 01f9      	MOVW R30,R18
000550 2766      	CLR  R22
000551 2777      	CLR  R23
000552 d471      	RCALL __PUTDP1
                 ; 0000 0220                               }
                 ; 0000 0221                         }
                 _0xC9:
000553 5f1f      	SUBI R17,-1
000554 cfbb      	RJMP _0xC7
                 _0xC8:
                 ; 0000 0222                   }
000555 94d3      	INC  R13
000556 cfb4      	RJMP _0xC4
                 _0xC5:
                 ; 0000 0223 
                 ; 0000 0224                   data_temp = 0;
000557 e0e0      	LDI  R30,LOW(0)
000558 93e0 0160 	STS  _data_temp,R30
00055a 93e0 0161 	STS  _data_temp+1,R30
00055c 93e0 0162 	STS  _data_temp+2,R30
00055e 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 0225                   for(loop_cnt = NUM_FILTER;loop_cnt<(NUM_SAMPLE-NUM_FILTER);loop_cnt++)
000560 e0ed      	LDI  R30,LOW(13)
000561 2ede      	MOV  R13,R30
                 _0xCB:
000562 e1eb      	LDI  R30,LOW(27)
000563 16de      	CP   R13,R30
000564 f4d8      	BRSH _0xCC
                 ; 0000 0226                   {
                 ; 0000 0227                         data_temp += data_buff[loop_cnt];
000565 2ded      	MOV  R30,R13
000566 e6a4      	LDI  R26,LOW(_data_buff)
000567 e0b1      	LDI  R27,HIGH(_data_buff)
000568 e0f0      	LDI  R31,0
000569 d40f      	RCALL __LSLW2
00056a 0fae      	ADD  R26,R30
00056b 1fbf      	ADC  R27,R31
00056c d451      	RCALL __GETD1P
00056d 91a0 0160 	LDS  R26,_data_temp
00056f 91b0 0161 	LDS  R27,_data_temp+1
000571 9180 0162 	LDS  R24,_data_temp+2
000573 9190 0163 	LDS  R25,_data_temp+3
000575 d3e6      	RCALL __ADDD12
000576 93e0 0160 	STS  _data_temp,R30
000578 93f0 0161 	STS  _data_temp+1,R31
00057a 9360 0162 	STS  _data_temp+2,R22
00057c 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 0228                   }
00057e 94d3      	INC  R13
00057f cfe2      	RJMP _0xCB
                 _0xCC:
                 ; 0000 0229                   if(loop_timer == TIME_UPDATE_DISPLAY)
000580 91a0 0204 	LDS  R26,_loop_timer
000582 3ca8      	CPI  R26,LOW(0xC8)
000583 f4f9      	BRNE _0xCD
                 ; 0000 022A                   {
                 ; 0000 022B                         loop_timer = 0;
000584 e0e0      	LDI  R30,LOW(0)
000585 93e0 0204 	STS  _loop_timer,R30
                 ; 0000 022C                         data_temp2 = (unsigned int)(data_temp/RN_RATIO)/(NUM_SAMPLE-2*NUM_FILTER);
000587 91a0 0160 	LDS  R26,_data_temp
000589 91b0 0161 	LDS  R27,_data_temp+1
00058b 9180 0162 	LDS  R24,_data_temp+2
00058d 9190 0163 	LDS  R25,_data_temp+3
                +
00058f e1e4     +LDI R30 , LOW ( 0x114 )
000590 e0f1     +LDI R31 , HIGH ( 0x114 )
000591 e060     +LDI R22 , BYTE3 ( 0x114 )
000592 e070     +LDI R23 , BYTE4 ( 0x114 )
                 	__GETD1N 0x114
000593 d402      	RCALL __DIVD21U
000594 2766      	CLR  R22
000595 2777      	CLR  R23
000596 01df      	MOVW R26,R30
000597 e0ee      	LDI  R30,LOW(14)
000598 e0f0      	LDI  R31,HIGH(14)
000599 d3e9      	RCALL __DIVW21U
00059a 01af      	MOVW R20,R30
                 ; 0000 022D                         if(data_temp2 > 100)    data = data_temp2;
                +
00059b 3645     +CPI R20 , LOW ( 101 )
00059c e0e0     +LDI R30 , HIGH ( 101 )
00059d 075e     +CPC R21 , R30
                 	__CPWRN 20,21,101
00059e f010      	BRLO _0xCE
00059f 015a      	MOVW R10,R20
                 ; 0000 022E                         else data = 0;
0005a0 c002      	RJMP _0xCF
                 _0xCE:
0005a1 24aa      	CLR  R10
0005a2 24bb      	CLR  R11
                 ; 0000 022F                   }
                 _0xCF:
                 ; 0000 0230             }
                 _0xCD:
                 ; 0000 0231 
                 ; 0000 0232       }
                 _0xBB:
                 ; 0000 0233       else if(!SN_INPUT)
0005a3 c1f7      	RJMP _0xD0
                 _0xBA:
0005a4 999c      	SBIC 0x13,4
0005a5 c0fa      	RJMP _0xD1
                 ; 0000 0234       {
                 ; 0000 0235             LED_SELECT(SN);
0005a6 e0a5      	LDI  R26,LOW(5)
0005a7 db6a      	RCALL _LED_SELECT
                 ; 0000 0236             SELECT_INPUT_COMPARE(SN);
0005a8 e0a5      	LDI  R26,LOW(5)
0005a9 dbdd      	RCALL _SELECT_INPUT_COMPARE
                 ; 0000 0237             if(loop_read_cnt > TIME_GET_SAMPLE)
0005aa e0e3      	LDI  R30,LOW(3)
0005ab 15ec      	CP   R30,R12
0005ac f008      	BRLO PC+2
0005ad c0f1      	RJMP _0xD2
                 ; 0000 0238             {
                 ; 0000 0239                   loop_read_cnt = 0;
0005ae 24cc      	CLR  R12
                 ; 0000 023A                   data_buff[buff_cnt++] = ADE7753_READ(1,VRMS);
0005af 2de8      	MOV  R30,R8
0005b0 9483      	INC  R8
0005b1 e6a4      	LDI  R26,LOW(_data_buff)
0005b2 e0b1      	LDI  R27,HIGH(_data_buff)
0005b3 e0f0      	LDI  R31,0
0005b4 d3c4      	RCALL __LSLW2
0005b5 0fea      	ADD  R30,R26
0005b6 1ffb      	ADC  R31,R27
0005b7 93ff      	PUSH R31
0005b8 93ef      	PUSH R30
0005b9 e0e1      	LDI  R30,LOW(1)
0005ba 93ea      	ST   -Y,R30
0005bb e1e7      	LDI  R30,LOW(23)
0005bc 93ea      	ST   -Y,R30
0005bd e0a3      	LDI  R26,LOW(3)
0005be d319      	RCALL _ADE7753_READ
0005bf 91af      	POP  R26
0005c0 91bf      	POP  R27
0005c1 d402      	RCALL __PUTDP1
                 ; 0000 023B                   if(buff_cnt >= NUM_SAMPLE)
0005c2 e2e8      	LDI  R30,LOW(40)
0005c3 168e      	CP   R8,R30
0005c4 f008      	BRLO _0xD3
                 ; 0000 023C                   {
                 ; 0000 023D                         buff_cnt = 0;
0005c5 2488      	CLR  R8
                 ; 0000 023E                   }
                 ; 0000 023F                   data_temp = 0;
                 _0xD3:
0005c6 e0e0      	LDI  R30,LOW(0)
0005c7 93e0 0160 	STS  _data_temp,R30
0005c9 93e0 0161 	STS  _data_temp+1,R30
0005cb 93e0 0162 	STS  _data_temp+2,R30
0005cd 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 0240                   for(loop_cnt = 0;loop_cnt<NUM_SAMPLE;loop_cnt++)
0005cf 24dd      	CLR  R13
                 _0xD5:
0005d0 e2e8      	LDI  R30,LOW(40)
0005d1 16de      	CP   R13,R30
0005d2 f4d8      	BRSH _0xD6
                 ; 0000 0241                   {
                 ; 0000 0242                         data_temp += data_buff[loop_cnt];
0005d3 2ded      	MOV  R30,R13
0005d4 e6a4      	LDI  R26,LOW(_data_buff)
0005d5 e0b1      	LDI  R27,HIGH(_data_buff)
0005d6 e0f0      	LDI  R31,0
0005d7 d3a1      	RCALL __LSLW2
0005d8 0fae      	ADD  R26,R30
0005d9 1fbf      	ADC  R27,R31
0005da d3e3      	RCALL __GETD1P
0005db 91a0 0160 	LDS  R26,_data_temp
0005dd 91b0 0161 	LDS  R27,_data_temp+1
0005df 9180 0162 	LDS  R24,_data_temp+2
0005e1 9190 0163 	LDS  R25,_data_temp+3
0005e3 d378      	RCALL __ADDD12
0005e4 93e0 0160 	STS  _data_temp,R30
0005e6 93f0 0161 	STS  _data_temp+1,R31
0005e8 9360 0162 	STS  _data_temp+2,R22
0005ea 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 0243                   }
0005ec 94d3      	INC  R13
0005ed cfe2      	RJMP _0xD5
                 _0xD6:
                 ; 0000 0244 
                 ; 0000 0245                   for(loop_cnt = 0;loop_cnt<NUM_SAMPLE;loop_cnt++)
0005ee 24dd      	CLR  R13
                 _0xD8:
0005ef e2e8      	LDI  R30,LOW(40)
0005f0 16de      	CP   R13,R30
0005f1 f4a0      	BRSH _0xD9
                 ; 0000 0246                   {
                 ; 0000 0247                         Uint_data_temp[loop_cnt] = data_buff[loop_cnt];
0005f2 2ded      	MOV  R30,R13
0005f3 e0f0      	LDI  R31,0
0005f4 01de      	MOVW R26,R28
0005f5 9616      	ADIW R26,6
0005f6 d382      	RCALL __LSLW2
0005f7 0fea      	ADD  R30,R26
0005f8 1ffb      	ADC  R31,R27
0005f9 010f      	MOVW R0,R30
0005fa 2ded      	MOV  R30,R13
0005fb e6a4      	LDI  R26,LOW(_data_buff)
0005fc e0b1      	LDI  R27,HIGH(_data_buff)
0005fd e0f0      	LDI  R31,0
0005fe d37a      	RCALL __LSLW2
0005ff 0fae      	ADD  R26,R30
000600 1fbf      	ADC  R27,R31
000601 d3bc      	RCALL __GETD1P
000602 01d0      	MOVW R26,R0
000603 d3c0      	RCALL __PUTDP1
                 ; 0000 0248                   }
000604 94d3      	INC  R13
000605 cfe9      	RJMP _0xD8
                 _0xD9:
                 ; 0000 0249 
                 ; 0000 024A                   for(loop_cnt = 0;loop_cnt<NUM_SAMPLE;loop_cnt++)
000606 24dd      	CLR  R13
                 _0xDB:
000607 e2e8      	LDI  R30,LOW(40)
000608 16de      	CP   R13,R30
000609 f008      	BRLO PC+2
00060a c048      	RJMP _0xDC
                 ; 0000 024B                   {
                 ; 0000 024C                         for(Uc_temp_cnt = loop_cnt;Uc_temp_cnt<NUM_SAMPLE;Uc_temp_cnt++)
00060b 2d1d      	MOV  R17,R13
                 _0xDE:
00060c 3218      	CPI  R17,40
00060d f008      	BRLO PC+2
00060e c042      	RJMP _0xDF
                 ; 0000 024D                         {
                 ; 0000 024E                               if(Uint_data_temp[loop_cnt] > Uint_data_temp[Uc_temp_cnt])
00060f 2ded      	MOV  R30,R13
000610 e0f0      	LDI  R31,0
000611 01de      	MOVW R26,R28
000612 9616      	ADIW R26,6
000613 d365      	RCALL __LSLW2
000614 0fae      	ADD  R26,R30
000615 1fbf      	ADC  R27,R31
000616 d3a7      	RCALL __GETD1P
000617 937f      	PUSH R23
000618 936f      	PUSH R22
000619 93ff      	PUSH R31
00061a 93ef      	PUSH R30
00061b 2fe1      	MOV  R30,R17
00061c e0f0      	LDI  R31,0
00061d 01de      	MOVW R26,R28
00061e 9616      	ADIW R26,6
00061f d359      	RCALL __LSLW2
000620 0fae      	ADD  R26,R30
000621 1fbf      	ADC  R27,R31
000622 d39b      	RCALL __GETD1P
000623 91af      	POP  R26
000624 91bf      	POP  R27
000625 918f      	POP  R24
000626 919f      	POP  R25
000627 d3ab      	RCALL __CPD12
000628 f530      	BRSH _0xE0
                 ; 0000 024F                               {
                 ; 0000 0250                                     Uint_temp = Uint_data_temp[loop_cnt];
000629 2ded      	MOV  R30,R13
00062a e0f0      	LDI  R31,0
00062b 01de      	MOVW R26,R28
00062c 9616      	ADIW R26,6
00062d d34b      	RCALL __LSLW2
00062e 0fae      	ADD  R26,R30
00062f 1fbf      	ADC  R27,R31
000630 912d      	LD   R18,X+
000631 913c      	LD   R19,X
                 ; 0000 0251                                     Uint_data_temp[loop_cnt] = Uint_data_temp[Uc_temp_cnt];
000632 2ded      	MOV  R30,R13
000633 e0f0      	LDI  R31,0
000634 01de      	MOVW R26,R28
000635 9616      	ADIW R26,6
000636 d342      	RCALL __LSLW2
000637 0fea      	ADD  R30,R26
000638 1ffb      	ADC  R31,R27
000639 010f      	MOVW R0,R30
00063a 2fe1      	MOV  R30,R17
00063b e0f0      	LDI  R31,0
00063c 01de      	MOVW R26,R28
00063d 9616      	ADIW R26,6
00063e d33a      	RCALL __LSLW2
00063f 0fae      	ADD  R26,R30
000640 1fbf      	ADC  R27,R31
000641 d37c      	RCALL __GETD1P
000642 01d0      	MOVW R26,R0
000643 d380      	RCALL __PUTDP1
                 ; 0000 0252                                     Uint_data_temp[Uc_temp_cnt] = Uint_temp;
000644 2fe1      	MOV  R30,R17
000645 e0f0      	LDI  R31,0
000646 01de      	MOVW R26,R28
000647 9616      	ADIW R26,6
000648 d330      	RCALL __LSLW2
000649 0fae      	ADD  R26,R30
00064a 1fbf      	ADC  R27,R31
00064b 01f9      	MOVW R30,R18
00064c 2766      	CLR  R22
00064d 2777      	CLR  R23
00064e d375      	RCALL __PUTDP1
                 ; 0000 0253                               }
                 ; 0000 0254                         }
                 _0xE0:
00064f 5f1f      	SUBI R17,-1
000650 cfbb      	RJMP _0xDE
                 _0xDF:
                 ; 0000 0255                   }
000651 94d3      	INC  R13
000652 cfb4      	RJMP _0xDB
                 _0xDC:
                 ; 0000 0256 
                 ; 0000 0257                   data_temp = 0;
000653 e0e0      	LDI  R30,LOW(0)
000654 93e0 0160 	STS  _data_temp,R30
000656 93e0 0161 	STS  _data_temp+1,R30
000658 93e0 0162 	STS  _data_temp+2,R30
00065a 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 0258                   for(loop_cnt = NUM_FILTER;loop_cnt<(NUM_SAMPLE-NUM_FILTER);loop_cnt++)
00065c e0ed      	LDI  R30,LOW(13)
00065d 2ede      	MOV  R13,R30
                 _0xE2:
00065e e1eb      	LDI  R30,LOW(27)
00065f 16de      	CP   R13,R30
000660 f4d8      	BRSH _0xE3
                 ; 0000 0259                   {
                 ; 0000 025A                         data_temp += data_buff[loop_cnt];
000661 2ded      	MOV  R30,R13
000662 e6a4      	LDI  R26,LOW(_data_buff)
000663 e0b1      	LDI  R27,HIGH(_data_buff)
000664 e0f0      	LDI  R31,0
000665 d313      	RCALL __LSLW2
000666 0fae      	ADD  R26,R30
000667 1fbf      	ADC  R27,R31
000668 d355      	RCALL __GETD1P
000669 91a0 0160 	LDS  R26,_data_temp
00066b 91b0 0161 	LDS  R27,_data_temp+1
00066d 9180 0162 	LDS  R24,_data_temp+2
00066f 9190 0163 	LDS  R25,_data_temp+3
000671 d2ea      	RCALL __ADDD12
000672 93e0 0160 	STS  _data_temp,R30
000674 93f0 0161 	STS  _data_temp+1,R31
000676 9360 0162 	STS  _data_temp+2,R22
000678 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 025B                   }
00067a 94d3      	INC  R13
00067b cfe2      	RJMP _0xE2
                 _0xE3:
                 ; 0000 025C                   if(loop_timer == TIME_UPDATE_DISPLAY)
00067c 91a0 0204 	LDS  R26,_loop_timer
00067e 3ca8      	CPI  R26,LOW(0xC8)
00067f f4f9      	BRNE _0xE4
                 ; 0000 025D                   {
                 ; 0000 025E                         loop_timer = 0;
000680 e0e0      	LDI  R30,LOW(0)
000681 93e0 0204 	STS  _loop_timer,R30
                 ; 0000 025F                         data_temp2 = (unsigned int)(data_temp/SN_RATIO)/(NUM_SAMPLE-2*NUM_FILTER);
000683 91a0 0160 	LDS  R26,_data_temp
000685 91b0 0161 	LDS  R27,_data_temp+1
000687 9180 0162 	LDS  R24,_data_temp+2
000689 9190 0163 	LDS  R25,_data_temp+3
                +
00068b e0e2     +LDI R30 , LOW ( 0x102 )
00068c e0f1     +LDI R31 , HIGH ( 0x102 )
00068d e060     +LDI R22 , BYTE3 ( 0x102 )
00068e e070     +LDI R23 , BYTE4 ( 0x102 )
                 	__GETD1N 0x102
00068f d306      	RCALL __DIVD21U
000690 2766      	CLR  R22
000691 2777      	CLR  R23
000692 01df      	MOVW R26,R30
000693 e0ee      	LDI  R30,LOW(14)
000694 e0f0      	LDI  R31,HIGH(14)
000695 d2ed      	RCALL __DIVW21U
000696 01af      	MOVW R20,R30
                 ; 0000 0260                         if(data_temp2 > 100)    data = data_temp2;
                +
000697 3645     +CPI R20 , LOW ( 101 )
000698 e0e0     +LDI R30 , HIGH ( 101 )
000699 075e     +CPC R21 , R30
                 	__CPWRN 20,21,101
00069a f010      	BRLO _0xE5
00069b 015a      	MOVW R10,R20
                 ; 0000 0261                         else data = 0;
00069c c002      	RJMP _0xE6
                 _0xE5:
00069d 24aa      	CLR  R10
00069e 24bb      	CLR  R11
                 ; 0000 0262                   }
                 _0xE6:
                 ; 0000 0263             }
                 _0xE4:
                 ; 0000 0264       }
                 _0xD2:
                 ; 0000 0265       else if(!TN_INPUT)
00069f c0fb      	RJMP _0xE7
                 _0xD1:
0006a0 999d      	SBIC 0x13,5
0006a1 c0f9      	RJMP _0xE8
                 ; 0000 0266       {
                 ; 0000 0267             LED_SELECT(TN);
0006a2 e0a6      	LDI  R26,LOW(6)
0006a3 da6e      	RCALL _LED_SELECT
                 ; 0000 0268             SELECT_INPUT_COMPARE(TN);
0006a4 e0a6      	LDI  R26,LOW(6)
0006a5 dae1      	RCALL _SELECT_INPUT_COMPARE
                 ; 0000 0269             if(loop_read_cnt > TIME_GET_SAMPLE)
0006a6 e0e3      	LDI  R30,LOW(3)
0006a7 15ec      	CP   R30,R12
0006a8 f008      	BRLO PC+2
0006a9 c0f1      	RJMP _0xE9
                 ; 0000 026A             {
                 ; 0000 026B                   loop_read_cnt = 0;
0006aa 24cc      	CLR  R12
                 ; 0000 026C                   data_buff[buff_cnt++] = ADE7753_READ(1,VRMS);
0006ab 2de8      	MOV  R30,R8
0006ac 9483      	INC  R8
0006ad e6a4      	LDI  R26,LOW(_data_buff)
0006ae e0b1      	LDI  R27,HIGH(_data_buff)
0006af e0f0      	LDI  R31,0
0006b0 d2c8      	RCALL __LSLW2
0006b1 0fea      	ADD  R30,R26
0006b2 1ffb      	ADC  R31,R27
0006b3 93ff      	PUSH R31
0006b4 93ef      	PUSH R30
0006b5 e0e1      	LDI  R30,LOW(1)
0006b6 93ea      	ST   -Y,R30
0006b7 e1e7      	LDI  R30,LOW(23)
0006b8 93ea      	ST   -Y,R30
0006b9 e0a3      	LDI  R26,LOW(3)
0006ba d21d      	RCALL _ADE7753_READ
0006bb 91af      	POP  R26
0006bc 91bf      	POP  R27
0006bd d306      	RCALL __PUTDP1
                 ; 0000 026D                   if(buff_cnt >= NUM_SAMPLE)
0006be e2e8      	LDI  R30,LOW(40)
0006bf 168e      	CP   R8,R30
0006c0 f008      	BRLO _0xEA
                 ; 0000 026E                   {
                 ; 0000 026F                         buff_cnt = 0;
0006c1 2488      	CLR  R8
                 ; 0000 0270                   }
                 ; 0000 0271                   data_temp = 0;
                 _0xEA:
0006c2 e0e0      	LDI  R30,LOW(0)
0006c3 93e0 0160 	STS  _data_temp,R30
0006c5 93e0 0161 	STS  _data_temp+1,R30
0006c7 93e0 0162 	STS  _data_temp+2,R30
0006c9 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 0272                   for(loop_cnt = 0;loop_cnt<NUM_SAMPLE;loop_cnt++)
0006cb 24dd      	CLR  R13
                 _0xEC:
0006cc e2e8      	LDI  R30,LOW(40)
0006cd 16de      	CP   R13,R30
0006ce f4d8      	BRSH _0xED
                 ; 0000 0273                   {
                 ; 0000 0274                         data_temp += data_buff[loop_cnt];
0006cf 2ded      	MOV  R30,R13
0006d0 e6a4      	LDI  R26,LOW(_data_buff)
0006d1 e0b1      	LDI  R27,HIGH(_data_buff)
0006d2 e0f0      	LDI  R31,0
0006d3 d2a5      	RCALL __LSLW2
0006d4 0fae      	ADD  R26,R30
0006d5 1fbf      	ADC  R27,R31
0006d6 d2e7      	RCALL __GETD1P
0006d7 91a0 0160 	LDS  R26,_data_temp
0006d9 91b0 0161 	LDS  R27,_data_temp+1
0006db 9180 0162 	LDS  R24,_data_temp+2
0006dd 9190 0163 	LDS  R25,_data_temp+3
0006df d27c      	RCALL __ADDD12
0006e0 93e0 0160 	STS  _data_temp,R30
0006e2 93f0 0161 	STS  _data_temp+1,R31
0006e4 9360 0162 	STS  _data_temp+2,R22
0006e6 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 0275                   }
0006e8 94d3      	INC  R13
0006e9 cfe2      	RJMP _0xEC
                 _0xED:
                 ; 0000 0276 
                 ; 0000 0277                   for(loop_cnt = 0;loop_cnt<NUM_SAMPLE;loop_cnt++)
0006ea 24dd      	CLR  R13
                 _0xEF:
0006eb e2e8      	LDI  R30,LOW(40)
0006ec 16de      	CP   R13,R30
0006ed f4a0      	BRSH _0xF0
                 ; 0000 0278                   {
                 ; 0000 0279                         Uint_data_temp[loop_cnt] = data_buff[loop_cnt];
0006ee 2ded      	MOV  R30,R13
0006ef e0f0      	LDI  R31,0
0006f0 01de      	MOVW R26,R28
0006f1 9616      	ADIW R26,6
0006f2 d286      	RCALL __LSLW2
0006f3 0fea      	ADD  R30,R26
0006f4 1ffb      	ADC  R31,R27
0006f5 010f      	MOVW R0,R30
0006f6 2ded      	MOV  R30,R13
0006f7 e6a4      	LDI  R26,LOW(_data_buff)
0006f8 e0b1      	LDI  R27,HIGH(_data_buff)
0006f9 e0f0      	LDI  R31,0
0006fa d27e      	RCALL __LSLW2
0006fb 0fae      	ADD  R26,R30
0006fc 1fbf      	ADC  R27,R31
0006fd d2c0      	RCALL __GETD1P
0006fe 01d0      	MOVW R26,R0
0006ff d2c4      	RCALL __PUTDP1
                 ; 0000 027A                   }
000700 94d3      	INC  R13
000701 cfe9      	RJMP _0xEF
                 _0xF0:
                 ; 0000 027B 
                 ; 0000 027C                   for(loop_cnt = 0;loop_cnt<NUM_SAMPLE;loop_cnt++)
000702 24dd      	CLR  R13
                 _0xF2:
000703 e2e8      	LDI  R30,LOW(40)
000704 16de      	CP   R13,R30
000705 f008      	BRLO PC+2
000706 c048      	RJMP _0xF3
                 ; 0000 027D                   {
                 ; 0000 027E                         for(Uc_temp_cnt = loop_cnt;Uc_temp_cnt<NUM_SAMPLE;Uc_temp_cnt++)
000707 2d1d      	MOV  R17,R13
                 _0xF5:
000708 3218      	CPI  R17,40
000709 f008      	BRLO PC+2
00070a c042      	RJMP _0xF6
                 ; 0000 027F                         {
                 ; 0000 0280                               if(Uint_data_temp[loop_cnt] > Uint_data_temp[Uc_temp_cnt])
00070b 2ded      	MOV  R30,R13
00070c e0f0      	LDI  R31,0
00070d 01de      	MOVW R26,R28
00070e 9616      	ADIW R26,6
00070f d269      	RCALL __LSLW2
000710 0fae      	ADD  R26,R30
000711 1fbf      	ADC  R27,R31
000712 d2ab      	RCALL __GETD1P
000713 937f      	PUSH R23
000714 936f      	PUSH R22
000715 93ff      	PUSH R31
000716 93ef      	PUSH R30
000717 2fe1      	MOV  R30,R17
000718 e0f0      	LDI  R31,0
000719 01de      	MOVW R26,R28
00071a 9616      	ADIW R26,6
00071b d25d      	RCALL __LSLW2
00071c 0fae      	ADD  R26,R30
00071d 1fbf      	ADC  R27,R31
00071e d29f      	RCALL __GETD1P
00071f 91af      	POP  R26
000720 91bf      	POP  R27
000721 918f      	POP  R24
000722 919f      	POP  R25
000723 d2af      	RCALL __CPD12
000724 f530      	BRSH _0xF7
                 ; 0000 0281                               {
                 ; 0000 0282                                     Uint_temp = Uint_data_temp[loop_cnt];
000725 2ded      	MOV  R30,R13
000726 e0f0      	LDI  R31,0
000727 01de      	MOVW R26,R28
000728 9616      	ADIW R26,6
000729 d24f      	RCALL __LSLW2
00072a 0fae      	ADD  R26,R30
00072b 1fbf      	ADC  R27,R31
00072c 912d      	LD   R18,X+
00072d 913c      	LD   R19,X
                 ; 0000 0283                                     Uint_data_temp[loop_cnt] = Uint_data_temp[Uc_temp_cnt];
00072e 2ded      	MOV  R30,R13
00072f e0f0      	LDI  R31,0
000730 01de      	MOVW R26,R28
000731 9616      	ADIW R26,6
000732 d246      	RCALL __LSLW2
000733 0fea      	ADD  R30,R26
000734 1ffb      	ADC  R31,R27
000735 010f      	MOVW R0,R30
000736 2fe1      	MOV  R30,R17
000737 e0f0      	LDI  R31,0
000738 01de      	MOVW R26,R28
000739 9616      	ADIW R26,6
00073a d23e      	RCALL __LSLW2
00073b 0fae      	ADD  R26,R30
00073c 1fbf      	ADC  R27,R31
00073d d280      	RCALL __GETD1P
00073e 01d0      	MOVW R26,R0
00073f d284      	RCALL __PUTDP1
                 ; 0000 0284                                     Uint_data_temp[Uc_temp_cnt] = Uint_temp;
000740 2fe1      	MOV  R30,R17
000741 e0f0      	LDI  R31,0
000742 01de      	MOVW R26,R28
000743 9616      	ADIW R26,6
000744 d234      	RCALL __LSLW2
000745 0fae      	ADD  R26,R30
000746 1fbf      	ADC  R27,R31
000747 01f9      	MOVW R30,R18
000748 2766      	CLR  R22
000749 2777      	CLR  R23
00074a d279      	RCALL __PUTDP1
                 ; 0000 0285                               }
                 ; 0000 0286                         }
                 _0xF7:
00074b 5f1f      	SUBI R17,-1
00074c cfbb      	RJMP _0xF5
                 _0xF6:
                 ; 0000 0287                   }
00074d 94d3      	INC  R13
00074e cfb4      	RJMP _0xF2
                 _0xF3:
                 ; 0000 0288 
                 ; 0000 0289                   data_temp = 0;
00074f e0e0      	LDI  R30,LOW(0)
000750 93e0 0160 	STS  _data_temp,R30
000752 93e0 0161 	STS  _data_temp+1,R30
000754 93e0 0162 	STS  _data_temp+2,R30
000756 93e0 0163 	STS  _data_temp+3,R30
                 ; 0000 028A                   for(loop_cnt = NUM_FILTER;loop_cnt<(NUM_SAMPLE-NUM_FILTER);loop_cnt++)
000758 e0ed      	LDI  R30,LOW(13)
000759 2ede      	MOV  R13,R30
                 _0xF9:
00075a e1eb      	LDI  R30,LOW(27)
00075b 16de      	CP   R13,R30
00075c f4d8      	BRSH _0xFA
                 ; 0000 028B                   {
                 ; 0000 028C                         data_temp += data_buff[loop_cnt];
00075d 2ded      	MOV  R30,R13
00075e e6a4      	LDI  R26,LOW(_data_buff)
00075f e0b1      	LDI  R27,HIGH(_data_buff)
000760 e0f0      	LDI  R31,0
000761 d217      	RCALL __LSLW2
000762 0fae      	ADD  R26,R30
000763 1fbf      	ADC  R27,R31
000764 d259      	RCALL __GETD1P
000765 91a0 0160 	LDS  R26,_data_temp
000767 91b0 0161 	LDS  R27,_data_temp+1
000769 9180 0162 	LDS  R24,_data_temp+2
00076b 9190 0163 	LDS  R25,_data_temp+3
00076d d1ee      	RCALL __ADDD12
00076e 93e0 0160 	STS  _data_temp,R30
000770 93f0 0161 	STS  _data_temp+1,R31
000772 9360 0162 	STS  _data_temp+2,R22
000774 9370 0163 	STS  _data_temp+3,R23
                 ; 0000 028D                   }
000776 94d3      	INC  R13
000777 cfe2      	RJMP _0xF9
                 _0xFA:
                 ; 0000 028E                   if(loop_timer == TIME_UPDATE_DISPLAY)
000778 91a0 0204 	LDS  R26,_loop_timer
00077a 3ca8      	CPI  R26,LOW(0xC8)
00077b f4f9      	BRNE _0xFB
                 ; 0000 028F                   {
                 ; 0000 0290                         loop_timer = 0;
00077c e0e0      	LDI  R30,LOW(0)
00077d 93e0 0204 	STS  _loop_timer,R30
                 ; 0000 0291                         data_temp2 = (unsigned int)(data_temp/TN_RATIO)/(NUM_SAMPLE-2*NUM_FILTER);
00077f 91a0 0160 	LDS  R26,_data_temp
000781 91b0 0161 	LDS  R27,_data_temp+1
000783 9180 0162 	LDS  R24,_data_temp+2
000785 9190 0163 	LDS  R25,_data_temp+3
                +
000787 eee5     +LDI R30 , LOW ( 0xE5 )
000788 e0f0     +LDI R31 , HIGH ( 0xE5 )
000789 e060     +LDI R22 , BYTE3 ( 0xE5 )
00078a e070     +LDI R23 , BYTE4 ( 0xE5 )
                 	__GETD1N 0xE5
00078b d20a      	RCALL __DIVD21U
00078c 2766      	CLR  R22
00078d 2777      	CLR  R23
00078e 01df      	MOVW R26,R30
00078f e0ee      	LDI  R30,LOW(14)
000790 e0f0      	LDI  R31,HIGH(14)
000791 d1f1      	RCALL __DIVW21U
000792 01af      	MOVW R20,R30
                 ; 0000 0292                         if(data_temp2 > 100)    data = data_temp2;
                +
000793 3645     +CPI R20 , LOW ( 101 )
000794 e0e0     +LDI R30 , HIGH ( 101 )
000795 075e     +CPC R21 , R30
                 	__CPWRN 20,21,101
000796 f010      	BRLO _0xFC
000797 015a      	MOVW R10,R20
                 ; 0000 0293                         else data = 0;
000798 c002      	RJMP _0xFD
                 _0xFC:
000799 24aa      	CLR  R10
00079a 24bb      	CLR  R11
                 ; 0000 0294                   }
                 _0xFD:
                 ; 0000 0295             }
                 _0xFB:
                 ; 0000 0296       }
                 _0xE9:
                 ; 0000 0297 
                 ; 0000 0298       delay_ms(10);
                 _0xE8:
                 _0xE7:
                 _0xD0:
                 _0xB9:
                 _0xA2:
                 _0x8B:
00079b e0aa      	LDI  R26,LOW(10)
00079c e0b0      	LDI  R27,0
00079d d1b4      	RCALL _delay_ms
                 ; 0000 0299       loop_read_cnt++;
00079e 94c3      	INC  R12
                 ; 0000 029A 
                 ; 0000 029B }
00079f d23f      	RCALL __LOADLOCR6
0007a0 96ef      	ADIW R28,63
0007a1 96ef      	ADIW R28,63
0007a2 96a8      	ADIW R28,40
0007a3 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 02A1 {
                 _main:
                 ; .FSTART _main
                 ; 0000 02A2 // Declare your local variables here
                 ; 0000 02A3 unsigned long int   reg = 0;
                 ; 0000 02A4 // Input/Output Ports initialization
                 ; 0000 02A5 // Port B initialization
                 ; 0000 02A6 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=In Bit1=Out Bit0=In
                 ; 0000 02A7 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (0<<DDB0);
0007a4 9724      	SBIW R28,4
0007a5 e0e0      	LDI  R30,LOW(0)
0007a6 83e8      	ST   Y,R30
0007a7 83e9      	STD  Y+1,R30
0007a8 83ea      	STD  Y+2,R30
0007a9 83eb      	STD  Y+3,R30
                 ;	reg -> Y+0
0007aa e2ea      	LDI  R30,LOW(42)
0007ab bbe7      	OUT  0x17,R30
                 ; 0000 02A8 // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=T Bit1=0 Bit0=T
                 ; 0000 02A9 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0007ac e0e0      	LDI  R30,LOW(0)
0007ad bbe8      	OUT  0x18,R30
                 ; 0000 02AA 
                 ; 0000 02AB // Port C initialization
                 ; 0000 02AC // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 02AD DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0007ae bbe4      	OUT  0x14,R30
                 ; 0000 02AE // State: Bit6=T Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 02AF PORTC=(0<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
0007af e3ef      	LDI  R30,LOW(63)
0007b0 bbe5      	OUT  0x15,R30
                 ; 0000 02B0 
                 ; 0000 02B1 // Port D initialization
                 ; 0000 02B2 // Function: Bit7=Out Bit6=Out Bit5=In Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 02B3 DDRD=(1<<DDD7) | (1<<DDD6) | (0<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
0007b1 edef      	LDI  R30,LOW(223)
0007b2 bbe1      	OUT  0x11,R30
                 ; 0000 02B4 // State: Bit7=0 Bit6=0 Bit5=T Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 02B5 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0007b3 e0e0      	LDI  R30,LOW(0)
0007b4 bbe2      	OUT  0x12,R30
                 ; 0000 02B6 
                 ; 0000 02B7 // Timer/Counter 0 initialization
                 ; 0000 02B8 // Clock source: System Clock
                 ; 0000 02B9 // Clock value: Timer 0 Stopped
                 ; 0000 02BA TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
0007b5 bfe3      	OUT  0x33,R30
                 ; 0000 02BB TCNT0=0x00;
0007b6 bfe2      	OUT  0x32,R30
                 ; 0000 02BC 
                 ; 0000 02BD // Timer/Counter 1 initialization
                 ; 0000 02BE // Clock source: System Clock
                 ; 0000 02BF // Clock value: 1382,400 kHz
                 ; 0000 02C0 // Mode: Normal top=0xFFFF
                 ; 0000 02C1 // OC1A output: Disconnected
                 ; 0000 02C2 // OC1B output: Disconnected
                 ; 0000 02C3 // Noise Canceler: Off
                 ; 0000 02C4 // Input Capture on Falling Edge
                 ; 0000 02C5 // Timer Period: 5,9997 ms
                 ; 0000 02C6 // Timer1 Overflow Interrupt: On
                 ; 0000 02C7 // Input Capture Interrupt: Off
                 ; 0000 02C8 // Compare A Match Interrupt: Off
                 ; 0000 02C9 // Compare B Match Interrupt: Off
                 ; 0000 02CA TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0007b7 bdef      	OUT  0x2F,R30
                 ; 0000 02CB TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
0007b8 e0e2      	LDI  R30,LOW(2)
0007b9 bdee      	OUT  0x2E,R30
                 ; 0000 02CC TCNT1H=0xDF;
0007ba edef      	LDI  R30,LOW(223)
0007bb bded      	OUT  0x2D,R30
                 ; 0000 02CD TCNT1L=0x9A;
0007bc e9ea      	LDI  R30,LOW(154)
0007bd bdec      	OUT  0x2C,R30
                 ; 0000 02CE ICR1H=0x00;
0007be e0e0      	LDI  R30,LOW(0)
0007bf bde7      	OUT  0x27,R30
                 ; 0000 02CF ICR1L=0x00;
0007c0 bde6      	OUT  0x26,R30
                 ; 0000 02D0 OCR1AH=0x00;
0007c1 bdeb      	OUT  0x2B,R30
                 ; 0000 02D1 OCR1AL=0x00;
0007c2 bdea      	OUT  0x2A,R30
                 ; 0000 02D2 OCR1BH=0x00;
0007c3 bde9      	OUT  0x29,R30
                 ; 0000 02D3 OCR1BL=0x00;
0007c4 bde8      	OUT  0x28,R30
                 ; 0000 02D4 
                 ; 0000 02D5 // Timer/Counter 2 initialization
                 ; 0000 02D6 // Clock source: System Clock
                 ; 0000 02D7 // Clock value: Timer2 Stopped
                 ; 0000 02D8 // Mode: Normal top=0xFF
                 ; 0000 02D9 // OC2 output: Disconnected
                 ; 0000 02DA ASSR=0<<AS2;
0007c5 bde2      	OUT  0x22,R30
                 ; 0000 02DB TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0007c6 bde5      	OUT  0x25,R30
                 ; 0000 02DC TCNT2=0x00;
0007c7 bde4      	OUT  0x24,R30
                 ; 0000 02DD OCR2=0x00;
0007c8 bde3      	OUT  0x23,R30
                 ; 0000 02DE 
                 ; 0000 02DF // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 02E0 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<TOIE0);
0007c9 e0e4      	LDI  R30,LOW(4)
0007ca bfe9      	OUT  0x39,R30
                 ; 0000 02E1 
                 ; 0000 02E2 // External Interrupt(s) initialization
                 ; 0000 02E3 // INT0: Off
                 ; 0000 02E4 // INT1: Off
                 ; 0000 02E5 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0007cb e0e0      	LDI  R30,LOW(0)
0007cc bfe5      	OUT  0x35,R30
                 ; 0000 02E6 
                 ; 0000 02E7 // USART initialization
                 ; 0000 02E8 // USART disabled
                 ; 0000 02E9 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0007cd b9ea      	OUT  0xA,R30
                 ; 0000 02EA 
                 ; 0000 02EB // Analog Comparator initialization
                 ; 0000 02EC // Analog Comparator: Off
                 ; 0000 02ED // The Analog Comparator's positive input is
                 ; 0000 02EE // connected to the AIN0 pin
                 ; 0000 02EF // The Analog Comparator's negative input is
                 ; 0000 02F0 // connected to the AIN1 pin
                 ; 0000 02F1 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0007ce e8e0      	LDI  R30,LOW(128)
0007cf b9e8      	OUT  0x8,R30
                 ; 0000 02F2 SFIOR=(0<<ACME);
0007d0 e0e0      	LDI  R30,LOW(0)
0007d1 bfe0      	OUT  0x30,R30
                 ; 0000 02F3 
                 ; 0000 02F4 // ADC initialization
                 ; 0000 02F5 // ADC disabled
                 ; 0000 02F6 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0007d2 b9e6      	OUT  0x6,R30
                 ; 0000 02F7 
                 ; 0000 02F8 // SPI initialization
                 ; 0000 02F9 // SPI disabled
                 ; 0000 02FA SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0007d3 b9ed      	OUT  0xD,R30
                 ; 0000 02FB 
                 ; 0000 02FC // TWI initialization
                 ; 0000 02FD // TWI disabled
                 ; 0000 02FE TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0007d4 bfe6      	OUT  0x36,R30
                 ; 0000 02FF 
                 ; 0000 0300 // Global enable interrupts
                 ; 0000 0301 #asm("sei")
0007d5 9478      	sei
                 ; 0000 0302 data = 8888;
0007d6 ebe8      	LDI  R30,LOW(8888)
0007d7 e2f2      	LDI  R31,HIGH(8888)
0007d8 015f      	MOVW R10,R30
                 ; 0000 0303 reg = 0;
0007d9 e0e0      	LDI  R30,LOW(0)
0007da d1f3      	RCALL __CLRD1S0
                 ; 0000 0304 reg |= (1<<SWRST);
0007db 81e8      	LD   R30,Y
0007dc 64e0      	ORI  R30,0x40
0007dd 83e8      	ST   Y,R30
                 ; 0000 0305 ADE7753_WRITE(1,MODE,(reg>>8) & 0xFF,reg & 0xFF,0x00);
0007de e0e1      	LDI  R30,LOW(1)
0007df 93ea      	ST   -Y,R30
0007e0 e0e9      	LDI  R30,LOW(9)
0007e1 93ea      	ST   -Y,R30
0007e2 e0e2      	LDI  R30,LOW(2)
0007e3 93ea      	ST   -Y,R30
                +
0007e4 81ab     +LDD R26 , Y + 3
0007e5 81bc     +LDD R27 , Y + 3 + 1
0007e6 818d     +LDD R24 , Y + 3 + 2
0007e7 819e     +LDD R25 , Y + 3 + 3
                 	__GETD2S 3
0007e8 e0e8      	LDI  R30,LOW(8)
0007e9 d183      	RCALL __LSRD12
0007ea 93ea      	ST   -Y,R30
0007eb 81ec      	LDD  R30,Y+4
0007ec 93ea      	ST   -Y,R30
0007ed e0a0      	LDI  R26,LOW(0)
0007ee d0a0      	RCALL _ADE7753_WRITE
                 ; 0000 0306 delay_ms(500);
0007ef efa4      	LDI  R26,LOW(500)
0007f0 e0b1      	LDI  R27,HIGH(500)
0007f1 d160      	RCALL _delay_ms
                 ; 0000 0307 reg = ADE7753_READ(1,MODE);
0007f2 e0e1      	LDI  R30,LOW(1)
0007f3 93ea      	ST   -Y,R30
0007f4 e0e9      	LDI  R30,LOW(9)
0007f5 93ea      	ST   -Y,R30
0007f6 e0a2      	LDI  R26,LOW(2)
0007f7 d0e0      	RCALL _ADE7753_READ
0007f8 d1d0      	RCALL __PUTD1S0
                 ; 0000 0308 
                 ; 0000 0309 reg = ADE7753_READ(1,MODE);
0007f9 e0e1      	LDI  R30,LOW(1)
0007fa 93ea      	ST   -Y,R30
0007fb e0e9      	LDI  R30,LOW(9)
0007fc 93ea      	ST   -Y,R30
0007fd e0a2      	LDI  R26,LOW(2)
0007fe d0d9      	RCALL _ADE7753_READ
0007ff d1c9      	RCALL __PUTD1S0
                 ; 0000 030A reg |= (1<<WAVSEL0) | (1<<WAVSEL1) | (1<<DTRT0) | (1<<DTRT1) ;
000800 81e9      	LDD  R30,Y+1
000801 67e8      	ORI  R30,LOW(0x78)
000802 83e9      	STD  Y+1,R30
                 ; 0000 030B ADE7753_WRITE(1,MODE,(reg>>8) & 0xFF,reg & 0xFF,0x00);
000803 e0e1      	LDI  R30,LOW(1)
000804 93ea      	ST   -Y,R30
000805 e0e9      	LDI  R30,LOW(9)
000806 93ea      	ST   -Y,R30
000807 e0e2      	LDI  R30,LOW(2)
000808 93ea      	ST   -Y,R30
                +
000809 81ab     +LDD R26 , Y + 3
00080a 81bc     +LDD R27 , Y + 3 + 1
00080b 818d     +LDD R24 , Y + 3 + 2
00080c 819e     +LDD R25 , Y + 3 + 3
                 	__GETD2S 3
00080d e0e8      	LDI  R30,LOW(8)
00080e d15e      	RCALL __LSRD12
00080f 93ea      	ST   -Y,R30
000810 81ec      	LDD  R30,Y+4
000811 93ea      	ST   -Y,R30
000812 e0a0      	LDI  R26,LOW(0)
000813 d07b      	RCALL _ADE7753_WRITE
                 ; 0000 030C reg = ADE7753_READ(1,MODE);
000814 e0e1      	LDI  R30,LOW(1)
000815 93ea      	ST   -Y,R30
000816 e0e9      	LDI  R30,LOW(9)
000817 93ea      	ST   -Y,R30
000818 e0a2      	LDI  R26,LOW(2)
000819 d0be      	RCALL _ADE7753_READ
00081a d1ae      	RCALL __PUTD1S0
                 ; 0000 030D 
                 ; 0000 030E delay_ms(500);
00081b efa4      	LDI  R26,LOW(500)
00081c e0b1      	LDI  R27,HIGH(500)
00081d d134      	RCALL _delay_ms
                 ; 0000 030F ADE7753_WRITE(1,SAGLVL,0X2a,0X00,0X00);
00081e e0e1      	LDI  R30,LOW(1)
00081f 93ea      	ST   -Y,R30
000820 e1ef      	LDI  R30,LOW(31)
000821 93ea      	ST   -Y,R30
000822 e0e1      	LDI  R30,LOW(1)
000823 93ea      	ST   -Y,R30
000824 e2ea      	LDI  R30,LOW(42)
000825 93ea      	ST   -Y,R30
000826 e0e0      	LDI  R30,LOW(0)
000827 93ea      	ST   -Y,R30
000828 e0a0      	LDI  R26,LOW(0)
000829 d065      	RCALL _ADE7753_WRITE
                 ; 0000 0310 delay_ms(500);
00082a efa4      	LDI  R26,LOW(500)
00082b e0b1      	LDI  R27,HIGH(500)
00082c d125      	RCALL _delay_ms
                 ; 0000 0311 ADE7753_WRITE(1,SAGCYC,0XFF,0X00,0X00);
00082d e0e1      	LDI  R30,LOW(1)
00082e 93ea      	ST   -Y,R30
00082f e1ee      	LDI  R30,LOW(30)
000830 93ea      	ST   -Y,R30
000831 e0e1      	LDI  R30,LOW(1)
000832 93ea      	ST   -Y,R30
000833 efef      	LDI  R30,LOW(255)
000834 93ea      	ST   -Y,R30
000835 e0e0      	LDI  R30,LOW(0)
000836 93ea      	ST   -Y,R30
000837 e0a0      	LDI  R26,LOW(0)
000838 d056      	RCALL _ADE7753_WRITE
                 ; 0000 0312 delay_ms(500);
000839 efa4      	LDI  R26,LOW(500)
00083a e0b1      	LDI  R27,HIGH(500)
00083b d116      	RCALL _delay_ms
                 ; 0000 0313 
                 ; 0000 0314 BUZZER_ON;
00083c 9a90      	SBI  0x12,0
                 ; 0000 0315 delay_ms(100);
00083d e6a4      	LDI  R26,LOW(100)
00083e e0b0      	LDI  R27,0
00083f d112      	RCALL _delay_ms
                 ; 0000 0316 BUZZER_OFF;
000840 9890      	CBI  0x12,0
                 ; 0000 0317       while (1)
                 _0x102:
                 ; 0000 0318       {
                 ; 0000 0319       // Place your code here
                 ; 0000 031A             READ_SELECT();
000841 d96e      	RCALL _READ_SELECT
                 ; 0000 031B       }
000842 cffe      	RJMP _0x102
                 ; 0000 031C }
                 _0x105:
000843 cfff      	RJMP _0x105
                 ; .FEND
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;void    SPI_SENDBYTE(unsigned char  data,unsigned char action)
                 ; 0001 0005 {
                 
                 	.CSEG
                 _SPI_SENDBYTE:
                 ; .FSTART _SPI_SENDBYTE
                 ; 0001 0006     unsigned char   i;
                 ; 0001 0007     for(i=0;i<8;i++)
000844 93aa      	ST   -Y,R26
000845 931a      	ST   -Y,R17
                 ;	data -> Y+2
                 ;	action -> Y+1
                 ;	i -> R17
000846 e010      	LDI  R17,LOW(0)
                 _0x20004:
000847 3018      	CPI  R17,8
000848 f470      	BRSH _0x20005
                 ; 0001 0008     {
                 ; 0001 0009         if((data & 0x80) == 0x80)    DO_SPI_MOSI = 1;
000849 81ea      	LDD  R30,Y+2
00084a 78e0      	ANDI R30,LOW(0x80)
00084b 38e0      	CPI  R30,LOW(0x80)
00084c f411      	BRNE _0x20006
00084d 9ac3      	SBI  0x18,3
                 ; 0001 000A         else    DO_SPI_MOSI = 0;
00084e c001      	RJMP _0x20009
                 _0x20006:
00084f 98c3      	CBI  0x18,3
                 ; 0001 000B         data <<= 1;
                 _0x20009:
000850 81ea      	LDD  R30,Y+2
000851 0fee      	LSL  R30
000852 83ea      	STD  Y+2,R30
                 ; 0001 000C         DO_SPI_SCK = 1;
000853 9ac5      	SBI  0x18,5
                 ; 0001 000D         DO_SPI_SCK = 0;
000854 98c5      	CBI  0x18,5
                 ; 0001 000E     }
000855 5f1f      	SUBI R17,-1
000856 cff0      	RJMP _0x20004
                 _0x20005:
                 ; 0001 000F     if(action)
000857 81e9      	LDD  R30,Y+1
000858 30e0      	CPI  R30,0
000859 f011      	BREQ _0x20010
                 ; 0001 0010     {
                 ; 0001 0011         DO_SPI_LATCH = 1;
00085a 9ac1      	SBI  0x18,1
                 ; 0001 0012         DO_SPI_LATCH = 0;
00085b 98c1      	CBI  0x18,1
                 ; 0001 0013     }
                 ; 0001 0014 }
                 _0x20010:
00085c 8118      	LDD  R17,Y+0
00085d c019      	RJMP _0x2000002
                 ; .FEND
                 ;#include "ADE7753.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "delay.h"
                 ;
                 ;
                 ;void    SPI_7753_SEND(unsigned char data)
                 ; 0002 0006 {
                 
                 	.CSEG
                 _SPI_7753_SEND:
                 ; .FSTART _SPI_7753_SEND
                 ; 0002 0007     unsigned char   cnt;
                 ; 0002 0008     unsigned char   tmp = data;
                 ; 0002 0009 
                 ; 0002 000A     for(cnt = 0;cnt < 8; cnt++)
00085e 93aa      	ST   -Y,R26
00085f d17c      	RCALL __SAVELOCR2
                 ;	data -> Y+2
                 ;	cnt -> R17
                 ;	tmp -> R16
000860 810a      	LDD  R16,Y+2
000861 e010      	LDI  R17,LOW(0)
                 _0x40004:
000862 3018      	CPI  R17,8
000863 f490      	BRSH _0x40005
                 ; 0002 000B     {
                 ; 0002 000C         if((tmp & 0x80) == 0x80)   SPI_MOSI_HIGHT;
000864 2fe0      	MOV  R30,R16
000865 78e0      	ANDI R30,LOW(0x80)
000866 38e0      	CPI  R30,LOW(0x80)
000867 f411      	BRNE _0x40006
000868 9894      	CBI  0x12,4
                 ; 0002 000D         else SPI_MOSI_LOW;
000869 c001      	RJMP _0x40009
                 _0x40006:
00086a 9a94      	SBI  0x12,4
                 ; 0002 000E 
                 ; 0002 000F         SPI_SCK_HIGHT;
                 _0x40009:
00086b 9897      	CBI  0x12,7
                 ; 0002 0010         delay_us(50);
                +
00086c eb88     +LDI R24 , LOW ( 184 )
                +__DELAY_USB_LOOP :
00086d 958a     +DEC R24
00086e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 184
                 ; 0002 0011         SPI_SCK_LOW;
00086f 9a97      	SBI  0x12,7
                 ; 0002 0012         delay_us(50);
                +
000870 eb88     +LDI R24 , LOW ( 184 )
                +__DELAY_USB_LOOP :
000871 958a     +DEC R24
000872 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 184
                 ; 0002 0013         tmp <<= 1;
000873 0f00      	LSL  R16
                 ; 0002 0014     }
000874 5f1f      	SUBI R17,-1
000875 cfec      	RJMP _0x40004
                 _0x40005:
                 ; 0002 0015 }
000876 d16c      	RCALL __LOADLOCR2
                 _0x2000002:
000877 9623      	ADIW R28,3
000878 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char    SPI_7753_RECEIVE(void)
                 ; 0002 0018 {
                 _SPI_7753_RECEIVE:
                 ; .FSTART _SPI_7753_RECEIVE
                 ; 0002 0019     unsigned char cnt;
                 ; 0002 001A     unsigned char data;
                 ; 0002 001B     data = 0;
000879 d162      	RCALL __SAVELOCR2
                 ;	cnt -> R17
                 ;	data -> R16
00087a e000      	LDI  R16,LOW(0)
                 ; 0002 001C     for(cnt = 0;cnt < 8; cnt++)
00087b e010      	LDI  R17,LOW(0)
                 _0x40011:
00087c 3018      	CPI  R17,8
00087d f468      	BRSH _0x40012
                 ; 0002 001D     {
                 ; 0002 001E         data <<= 1;
00087e 0f00      	LSL  R16
                 ; 0002 001F         SPI_SCK_HIGHT;
00087f 9897      	CBI  0x12,7
                 ; 0002 0020         delay_us(50);
                +
000880 eb88     +LDI R24 , LOW ( 184 )
                +__DELAY_USB_LOOP :
000881 958a     +DEC R24
000882 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 184
                 ; 0002 0021         SPI_SCK_LOW;
000883 9a97      	SBI  0x12,7
                 ; 0002 0022         if(SPI_MISO_HIGHT)   data += 1;
000884 9985      	SBIC 0x10,5
000885 5f0f      	SUBI R16,-LOW(1)
                 ; 0002 0023         delay_us(50);
                +
000886 eb88     +LDI R24 , LOW ( 184 )
                +__DELAY_USB_LOOP :
000887 958a     +DEC R24
000888 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 184
                 ; 0002 0024 
                 ; 0002 0025     }
000889 5f1f      	SUBI R17,-1
00088a cff1      	RJMP _0x40011
                 _0x40012:
                 ; 0002 0026     return data;
00088b 2fe0      	MOV  R30,R16
00088c 9109      	LD   R16,Y+
00088d 9119      	LD   R17,Y+
00088e 9508      	RET
                 ; 0002 0027 }
                 ; .FEND
                 ;
                 ;void    ADE7753_WRITE(unsigned char IC_CS,unsigned char addr,unsigned char num_data,unsigned char data_1,unsigned char d ...
                 ; 0002 002A {
                 _ADE7753_WRITE:
                 ; .FSTART _ADE7753_WRITE
                 ; 0002 002B     unsigned char data[4];
                 ; 0002 002C     unsigned char   i;
                 ; 0002 002D     data[0] = data_1;
00088f 93aa      	ST   -Y,R26
000890 9724      	SBIW R28,4
000891 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+10
                 ;	addr -> Y+9
                 ;	num_data -> Y+8
                 ;	data_1 -> Y+7
                 ;	data_2 -> Y+6
                 ;	data_3 -> Y+5
                 ;	data -> Y+1
                 ;	i -> R17
000892 81ef      	LDD  R30,Y+7
000893 83e9      	STD  Y+1,R30
                 ; 0002 002E     data[1] = data_2;
000894 81ee      	LDD  R30,Y+6
000895 83ea      	STD  Y+2,R30
                 ; 0002 002F     data[2] = data_3;
000896 81ed      	LDD  R30,Y+5
000897 83eb      	STD  Y+3,R30
                 ; 0002 0030 
                 ; 0002 0031     switch (IC_CS)
000898 85ea      	LDD  R30,Y+10
000899 e0f0      	LDI  R31,0
                 ; 0002 0032     {
                 ; 0002 0033         case 1:
00089a 30e1      	CPI  R30,LOW(0x1)
00089b e0a0      	LDI  R26,HIGH(0x1)
00089c 07fa      	CPC  R31,R26
00089d f421      	BRNE _0x4001B
                 ; 0002 0034         {
                 ; 0002 0035             PHASE_1_ON;
00089e 9a96      	SBI  0x12,6
                 ; 0002 0036             PHASE_2_OFF;
00089f 98c0      	CBI  0x18,0
                 ; 0002 0037             PHASE_3_OFF;
0008a0 98c0      	CBI  0x18,0
                 ; 0002 0038             break;
0008a1 c00f      	RJMP _0x4001A
                 ; 0002 0039         }
                 ; 0002 003A         case 2:
                 _0x4001B:
0008a2 30e2      	CPI  R30,LOW(0x2)
0008a3 e0a0      	LDI  R26,HIGH(0x2)
0008a4 07fa      	CPC  R31,R26
0008a5 f421      	BRNE _0x40022
                 ; 0002 003B         {
                 ; 0002 003C             PHASE_1_OFF;
0008a6 9896      	CBI  0x12,6
                 ; 0002 003D             PHASE_2_ON;
0008a7 9ac0      	SBI  0x18,0
                 ; 0002 003E             PHASE_3_OFF;
0008a8 98c0      	CBI  0x18,0
                 ; 0002 003F             break;
0008a9 c007      	RJMP _0x4001A
                 ; 0002 0040         }
                 ; 0002 0041         case 3:
                 _0x40022:
0008aa 30e3      	CPI  R30,LOW(0x3)
0008ab e0a0      	LDI  R26,HIGH(0x3)
0008ac 07fa      	CPC  R31,R26
0008ad f419      	BRNE _0x4001A
                 ; 0002 0042         {
                 ; 0002 0043             PHASE_1_OFF;
0008ae 9896      	CBI  0x12,6
                 ; 0002 0044             PHASE_2_OFF;
0008af 98c0      	CBI  0x18,0
                 ; 0002 0045             PHASE_3_ON;
0008b0 9ac0      	SBI  0x18,0
                 ; 0002 0046             break;
                 ; 0002 0047         }
                 ; 0002 0048     }
                 _0x4001A:
                 ; 0002 0049     addr &= 0x3F;
0008b1 85e9      	LDD  R30,Y+9
0008b2 73ef      	ANDI R30,LOW(0x3F)
0008b3 87e9      	STD  Y+9,R30
                 ; 0002 004A     addr |= 0x80;
0008b4 68e0      	ORI  R30,0x80
0008b5 87e9      	STD  Y+9,R30
                 ; 0002 004B     delay_us(100);
                +
0008b6 e184     +LDI R24 , LOW ( 276 )
0008b7 e091     +LDI R25 , HIGH ( 276 )
                +__DELAY_USW_LOOP :
0008b8 9701     +SBIW R24 , 1
0008b9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 276
                 ; 0002 004C     SPI_7753_SEND(addr);
0008ba 85a9      	LDD  R26,Y+9
0008bb dfa2      	RCALL _SPI_7753_SEND
                 ; 0002 004D     delay_us(100);
                +
0008bc e184     +LDI R24 , LOW ( 276 )
0008bd e091     +LDI R25 , HIGH ( 276 )
                +__DELAY_USW_LOOP :
0008be 9701     +SBIW R24 , 1
0008bf f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 276
                 ; 0002 004E     for(i=0;i<num_data;i++)    SPI_7753_SEND(data[i]);
0008c0 e010      	LDI  R17,LOW(0)
                 _0x40031:
0008c1 85e8      	LDD  R30,Y+8
0008c2 171e      	CP   R17,R30
0008c3 f450      	BRSH _0x40032
0008c4 2fe1      	MOV  R30,R17
0008c5 e0f0      	LDI  R31,0
0008c6 01de      	MOVW R26,R28
0008c7 9611      	ADIW R26,1
0008c8 0fae      	ADD  R26,R30
0008c9 1fbf      	ADC  R27,R31
0008ca 91ac      	LD   R26,X
0008cb df92      	RCALL _SPI_7753_SEND
0008cc 5f1f      	SUBI R17,-1
0008cd cff3      	RJMP _0x40031
                 _0x40032:
                 ; 0002 004F delay_us(100);
                +
0008ce e184     +LDI R24 , LOW ( 276 )
0008cf e091     +LDI R25 , HIGH ( 276 )
                +__DELAY_USW_LOOP :
0008d0 9701     +SBIW R24 , 1
0008d1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 276
                 ; 0002 0050     PHASE_1_OFF;
0008d2 9896      	CBI  0x12,6
                 ; 0002 0051     PHASE_2_OFF;
0008d3 98c0      	CBI  0x18,0
                 ; 0002 0052     PHASE_3_OFF;
0008d4 98c0      	CBI  0x18,0
                 ; 0002 0053 }
0008d5 8118      	LDD  R17,Y+0
0008d6 962b      	ADIW R28,11
0008d7 9508      	RET
                 ; .FEND
                 ;unsigned long int    ADE7753_READ(unsigned char IC_CS,unsigned char addr,unsigned char num_data)
                 ; 0002 0055 {
                 _ADE7753_READ:
                 ; .FSTART _ADE7753_READ
                 ; 0002 0056     unsigned char   i;
                 ; 0002 0057     unsigned char   data[4];
                 ; 0002 0058     unsigned long int res;
                 ; 0002 0059     for(i=0;i<4;i++)    data[i] = 0;
0008d8 93aa      	ST   -Y,R26
0008d9 9728      	SBIW R28,8
0008da 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+11
                 ;	addr -> Y+10
                 ;	num_data -> Y+9
                 ;	i -> R17
                 ;	data -> Y+5
                 ;	res -> Y+1
0008db e010      	LDI  R17,LOW(0)
                 _0x4003A:
0008dc 3014      	CPI  R17,4
0008dd f450      	BRSH _0x4003B
0008de 2fe1      	MOV  R30,R17
0008df e0f0      	LDI  R31,0
0008e0 01de      	MOVW R26,R28
0008e1 9615      	ADIW R26,5
0008e2 0fae      	ADD  R26,R30
0008e3 1fbf      	ADC  R27,R31
0008e4 e0e0      	LDI  R30,LOW(0)
0008e5 93ec      	ST   X,R30
0008e6 5f1f      	SUBI R17,-1
0008e7 cff4      	RJMP _0x4003A
                 _0x4003B:
                 ; 0002 005A switch (IC_CS)
0008e8 85eb      	LDD  R30,Y+11
0008e9 e0f0      	LDI  R31,0
                 ; 0002 005B     {
                 ; 0002 005C         case 1:
0008ea 30e1      	CPI  R30,LOW(0x1)
0008eb e0a0      	LDI  R26,HIGH(0x1)
0008ec 07fa      	CPC  R31,R26
0008ed f421      	BRNE _0x4003F
                 ; 0002 005D         {
                 ; 0002 005E             PHASE_1_ON;
0008ee 9a96      	SBI  0x12,6
                 ; 0002 005F             PHASE_2_OFF;
0008ef 98c0      	CBI  0x18,0
                 ; 0002 0060             PHASE_3_OFF;
0008f0 98c0      	CBI  0x18,0
                 ; 0002 0061             break;
0008f1 c00f      	RJMP _0x4003E
                 ; 0002 0062         }
                 ; 0002 0063         case 2:
                 _0x4003F:
0008f2 30e2      	CPI  R30,LOW(0x2)
0008f3 e0a0      	LDI  R26,HIGH(0x2)
0008f4 07fa      	CPC  R31,R26
0008f5 f421      	BRNE _0x40046
                 ; 0002 0064         {
                 ; 0002 0065             PHASE_1_OFF;
0008f6 9896      	CBI  0x12,6
                 ; 0002 0066             PHASE_2_ON;
0008f7 9ac0      	SBI  0x18,0
                 ; 0002 0067             PHASE_3_OFF;
0008f8 98c0      	CBI  0x18,0
                 ; 0002 0068             break;
0008f9 c007      	RJMP _0x4003E
                 ; 0002 0069         }
                 ; 0002 006A         case 3:
                 _0x40046:
0008fa 30e3      	CPI  R30,LOW(0x3)
0008fb e0a0      	LDI  R26,HIGH(0x3)
0008fc 07fa      	CPC  R31,R26
0008fd f419      	BRNE _0x4003E
                 ; 0002 006B         {
                 ; 0002 006C             PHASE_1_OFF;
0008fe 9896      	CBI  0x12,6
                 ; 0002 006D             PHASE_2_OFF;
0008ff 98c0      	CBI  0x18,0
                 ; 0002 006E             PHASE_3_ON;
000900 9ac0      	SBI  0x18,0
                 ; 0002 006F             break;
                 ; 0002 0070         }
                 ; 0002 0071     }
                 _0x4003E:
                 ; 0002 0072     delay_us(10);
                +
000901 e285     +LDI R24 , LOW ( 37 )
                +__DELAY_USB_LOOP :
000902 958a     +DEC R24
000903 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 37
                 ; 0002 0073     addr &= 0x3F;
000904 85ea      	LDD  R30,Y+10
000905 73ef      	ANDI R30,LOW(0x3F)
000906 87ea      	STD  Y+10,R30
                 ; 0002 0074     SPI_7753_SEND(addr);
000907 85aa      	LDD  R26,Y+10
000908 df55      	RCALL _SPI_7753_SEND
                 ; 0002 0075     delay_us(10);
                +
000909 e285     +LDI R24 , LOW ( 37 )
                +__DELAY_USB_LOOP :
00090a 958a     +DEC R24
00090b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 37
                 ; 0002 0076     for(i=0;i<num_data;i++) data[i] = SPI_7753_RECEIVE();
00090c e010      	LDI  R17,LOW(0)
                 _0x40055:
00090d 85e9      	LDD  R30,Y+9
00090e 171e      	CP   R17,R30
00090f f470      	BRSH _0x40056
000910 2fe1      	MOV  R30,R17
000911 e0f0      	LDI  R31,0
000912 01de      	MOVW R26,R28
000913 9615      	ADIW R26,5
000914 0fea      	ADD  R30,R26
000915 1ffb      	ADC  R31,R27
000916 93ff      	PUSH R31
000917 93ef      	PUSH R30
000918 df60      	RCALL _SPI_7753_RECEIVE
000919 91af      	POP  R26
00091a 91bf      	POP  R27
00091b 93ec      	ST   X,R30
00091c 5f1f      	SUBI R17,-1
00091d cfef      	RJMP _0x40055
                 _0x40056:
                 ; 0002 0077 delay_us(10);
                +
00091e e285     +LDI R24 , LOW ( 37 )
                +__DELAY_USB_LOOP :
00091f 958a     +DEC R24
000920 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 37
                 ; 0002 0078     PHASE_1_OFF;
000921 9896      	CBI  0x12,6
                 ; 0002 0079     PHASE_2_OFF;
000922 98c0      	CBI  0x18,0
                 ; 0002 007A     PHASE_3_OFF;
000923 98c0      	CBI  0x18,0
                 ; 0002 007B     res = 0;
000924 e0e0      	LDI  R30,LOW(0)
                +
000925 83e9     +STD Y + 1 , R30
000926 83ea     +STD Y + 1 + 1 , R30
000927 83eb     +STD Y + 1 + 2 , R30
000928 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
                 ; 0002 007C     for(i=0;i<num_data;i++)
000929 e010      	LDI  R17,LOW(0)
                 _0x4005E:
00092a 85e9      	LDD  R30,Y+9
00092b 171e      	CP   R17,R30
00092c f4f0      	BRSH _0x4005F
                 ; 0002 007D     {
                 ; 0002 007E         res <<= 8;
                +
00092d 81a9     +LDD R26 , Y + 1
00092e 81ba     +LDD R27 , Y + 1 + 1
00092f 818b     +LDD R24 , Y + 1 + 2
000930 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
000931 e0e8      	LDI  R30,LOW(8)
000932 d02e      	RCALL __LSLD12
                +
000933 83e9     +STD Y + 1 , R30
000934 83fa     +STD Y + 1 + 1 , R31
000935 836b     +STD Y + 1 + 2 , R22
000936 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0002 007F         res += data[i];
000937 2fe1      	MOV  R30,R17
000938 e0f0      	LDI  R31,0
000939 01de      	MOVW R26,R28
00093a 9615      	ADIW R26,5
00093b 0fae      	ADD  R26,R30
00093c 1fbf      	ADC  R27,R31
00093d 91ec      	LD   R30,X
00093e e0f0      	LDI  R31,0
                +
00093f 81a9     +LDD R26 , Y + 1
000940 81ba     +LDD R27 , Y + 1 + 1
000941 818b     +LDD R24 , Y + 1 + 2
000942 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
000943 d03a      	RCALL __CWD1
000944 d017      	RCALL __ADDD12
                +
000945 83e9     +STD Y + 1 , R30
000946 83fa     +STD Y + 1 + 1 , R31
000947 836b     +STD Y + 1 + 2 , R22
000948 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0002 0080     }
000949 5f1f      	SUBI R17,-1
00094a cfdf      	RJMP _0x4005E
                 _0x4005F:
                 ; 0002 0081     return res;
                +
00094b 81e9     +LDD R30 , Y + 1
00094c 81fa     +LDD R31 , Y + 1 + 1
00094d 816b     +LDD R22 , Y + 1 + 2
00094e 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
                 ; 0002 0082     return  (res/480);
                 _0x2000001:
00094f 8118      	LDD  R17,Y+0
000950 962c      	ADIW R28,12
000951 9508      	RET
                 ; 0002 0083     //return data[0]+data[1] + data[2];
                 ; 0002 0084 }
                 ; .FEND
                 ;
                 ;void    ADE7753_INIT(void)
                 ; 0002 0087 {
                 ; 0002 0088     unsigned int   reg = 0;
                 ; 0002 0089     ADE7753_WRITE(1,MODE,0x00,0x00,0x00);
                 ;	reg -> R16,R17
                 ; 0002 008A     delay_ms(500);
                 ; 0002 008B     reg = 0;
                 ; 0002 008C     reg |= (1<<SWRST);
                 ; 0002 008D     ADE7753_WRITE(1,MODE,reg,0x00,0x00);
                 ; 0002 008E     delay_ms(500);
                 ; 0002 008F     reg = ADE7753_READ(1,MODE);
                 ; 0002 0090     delay_ms(500);
                 ; 0002 0091     reg = ADE7753_READ(1,MODE);
                 ; 0002 0092     reg |= (1<<DISHPF) | (1<<WAVSEL0) | (1<<WAVSEL1);
                 ; 0002 0093     ADE7753_WRITE(1,MODE,reg,0x00,0x00);
                 ; 0002 0094     delay_ms(500);
                 ; 0002 0095     ADE7753_WRITE(1,SAGLVL,0X2a,0X00,0X00);
                 ; 0002 0096     ADE7753_WRITE(1,SAGCYC,0XFF,0X00,0X00);
                 ; 0002 0097 }
                 
                 	.DSEG
                 _data_temp:
000160           	.BYTE 0x4
                 _data_buff:
000164           	.BYTE 0xA0
                 _loop_timer:
000204           	.BYTE 0x1
                 _Uc_Last_Select:
000205           	.BYTE 0x1
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
000952 9610      	adiw r26,0
000953 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000954 ec8d     +LDI R24 , LOW ( 0xACD )
000955 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000956 9701     +SBIW R24 , 1
000957 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
000958 95a8      	wdr
000959 9711      	sbiw r26,1
00095a f7c9      	brne __delay_ms0
                 __delay_ms1:
00095b 9508      	ret
                 
                 __ADDD12:
00095c 0fea      	ADD  R30,R26
00095d 1ffb      	ADC  R31,R27
00095e 1f68      	ADC  R22,R24
00095f 1f79      	ADC  R23,R25
000960 9508      	RET
                 
                 __LSLD12:
000961 23ee      	TST  R30
000962 2e0e      	MOV  R0,R30
000963 01fd      	MOVW R30,R26
000964 01bc      	MOVW R22,R24
000965 f031      	BREQ __LSLD12R
                 __LSLD12L:
000966 0fee      	LSL  R30
000967 1fff      	ROL  R31
000968 1f66      	ROL  R22
000969 1f77      	ROL  R23
00096a 940a      	DEC  R0
00096b f7d1      	BRNE __LSLD12L
                 __LSLD12R:
00096c 9508      	RET
                 
                 __LSRD12:
00096d 23ee      	TST  R30
00096e 2e0e      	MOV  R0,R30
00096f 01fd      	MOVW R30,R26
000970 01bc      	MOVW R22,R24
000971 f031      	BREQ __LSRD12R
                 __LSRD12L:
000972 9576      	LSR  R23
000973 9567      	ROR  R22
000974 95f7      	ROR  R31
000975 95e7      	ROR  R30
000976 940a      	DEC  R0
000977 f7d1      	BRNE __LSRD12L
                 __LSRD12R:
000978 9508      	RET
                 
                 __LSLW2:
000979 0fee      	LSL  R30
00097a 1fff      	ROL  R31
00097b 0fee      	LSL  R30
00097c 1fff      	ROL  R31
00097d 9508      	RET
                 
                 __CWD1:
00097e 2f6f      	MOV  R22,R31
00097f 0f66      	ADD  R22,R22
000980 0b66      	SBC  R22,R22
000981 2f76      	MOV  R23,R22
000982 9508      	RET
                 
                 __DIVW21U:
000983 2400      	CLR  R0
000984 2411      	CLR  R1
000985 e190      	LDI  R25,16
                 __DIVW21U1:
000986 0faa      	LSL  R26
000987 1fbb      	ROL  R27
000988 1c00      	ROL  R0
000989 1c11      	ROL  R1
00098a 1a0e      	SUB  R0,R30
00098b 0a1f      	SBC  R1,R31
00098c f418      	BRCC __DIVW21U2
00098d 0e0e      	ADD  R0,R30
00098e 1e1f      	ADC  R1,R31
00098f c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000990 60a1      	SBR  R26,1
                 __DIVW21U3:
000991 959a      	DEC  R25
000992 f799      	BRNE __DIVW21U1
000993 01fd      	MOVW R30,R26
000994 01d0      	MOVW R26,R0
000995 9508      	RET
                 
                 __DIVD21U:
000996 933f      	PUSH R19
000997 934f      	PUSH R20
000998 935f      	PUSH R21
000999 2400      	CLR  R0
00099a 2411      	CLR  R1
00099b 2744      	CLR  R20
00099c 2755      	CLR  R21
00099d e230      	LDI  R19,32
                 __DIVD21U1:
00099e 0faa      	LSL  R26
00099f 1fbb      	ROL  R27
0009a0 1f88      	ROL  R24
0009a1 1f99      	ROL  R25
0009a2 1c00      	ROL  R0
0009a3 1c11      	ROL  R1
0009a4 1f44      	ROL  R20
0009a5 1f55      	ROL  R21
0009a6 1a0e      	SUB  R0,R30
0009a7 0a1f      	SBC  R1,R31
0009a8 0b46      	SBC  R20,R22
0009a9 0b57      	SBC  R21,R23
0009aa f428      	BRCC __DIVD21U2
0009ab 0e0e      	ADD  R0,R30
0009ac 1e1f      	ADC  R1,R31
0009ad 1f46      	ADC  R20,R22
0009ae 1f57      	ADC  R21,R23
0009af c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0009b0 60a1      	SBR  R26,1
                 __DIVD21U3:
0009b1 953a      	DEC  R19
0009b2 f759      	BRNE __DIVD21U1
0009b3 01fd      	MOVW R30,R26
0009b4 01bc      	MOVW R22,R24
0009b5 01d0      	MOVW R26,R0
0009b6 01ca      	MOVW R24,R20
0009b7 915f      	POP  R21
0009b8 914f      	POP  R20
0009b9 913f      	POP  R19
0009ba 9508      	RET
                 
                 __MODW21U:
0009bb dfc7      	RCALL __DIVW21U
0009bc 01fd      	MOVW R30,R26
0009bd 9508      	RET
                 
                 __GETD1P:
0009be 91ed      	LD   R30,X+
0009bf 91fd      	LD   R31,X+
0009c0 916d      	LD   R22,X+
0009c1 917c      	LD   R23,X
0009c2 9713      	SBIW R26,3
0009c3 9508      	RET
                 
                 __PUTDP1:
0009c4 93ed      	ST   X+,R30
0009c5 93fd      	ST   X+,R31
0009c6 936d      	ST   X+,R22
0009c7 937c      	ST   X,R23
0009c8 9508      	RET
                 
                 __PUTD1S0:
0009c9 83e8      	ST   Y,R30
0009ca 83f9      	STD  Y+1,R31
0009cb 836a      	STD  Y+2,R22
0009cc 837b      	STD  Y+3,R23
0009cd 9508      	RET
                 
                 __CLRD1S0:
0009ce 83e8      	ST   Y,R30
0009cf 83e9      	STD  Y+1,R30
0009d0 83ea      	STD  Y+2,R30
0009d1 83eb      	STD  Y+3,R30
0009d2 9508      	RET
                 
                 __CPD12:
0009d3 17ea      	CP   R30,R26
0009d4 07fb      	CPC  R31,R27
0009d5 0768      	CPC  R22,R24
0009d6 0779      	CPC  R23,R25
0009d7 9508      	RET
                 
                 __SAVELOCR6:
0009d8 935a      	ST   -Y,R21
                 __SAVELOCR5:
0009d9 934a      	ST   -Y,R20
                 __SAVELOCR4:
0009da 933a      	ST   -Y,R19
                 __SAVELOCR3:
0009db 932a      	ST   -Y,R18
                 __SAVELOCR2:
0009dc 931a      	ST   -Y,R17
0009dd 930a      	ST   -Y,R16
0009de 9508      	RET
                 
                 __LOADLOCR6:
0009df 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0009e0 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0009e1 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0009e2 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0009e3 8119      	LDD  R17,Y+1
0009e4 8108      	LD   R16,Y
0009e5 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8A register use summary:
r0 :  44 r1 :  11 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   6 r7 :   9 
r8 :  24 r9 :   2 r10:  17 r11:   6 r12:  13 r13: 120 r14:   0 r15:   2 
r16:  17 r17:  84 r18:  14 r19:  12 r20:  27 r21:  14 r22:  61 r23:  51 
r24:  66 r25:  41 r26: 413 r27: 145 r28:  61 r29:   1 r30: 693 r31: 253 
x  :  27 y  : 174 z  :   7 
Registers used: 30 out of 35 (85.7%)

ATmega8A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  77 add   :  74 
adiw  :  55 and   :   0 andi  :   5 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   6 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  30 
brlt  :   0 brmi  :   0 brne  :  73 brpl  :   0 brsh  :  33 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  38 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  74 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  47 
cpc   :  48 cpi   :  65 cpse  :   0 dec   :  12 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :  32 ld    :  39 ldd   :  50 ldi   : 453 lds   :  81 lpm   :   7 
lsl   :   8 lsr   :   1 mov   :  97 movw  : 115 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   3 out   :  39 
pop   :  41 push  :  41 rcall : 221 ret   :  23 reti  :   1 rjmp  : 140 
rol   :  15 ror   :   3 sbc   :   5 sbci  :   0 sbi   :  22 sbic  :   7 
sbis  :   0 sbiw  :  17 sbr   :   2 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  83 std   :  29 
sts   : 104 sub   :   2 subi  :  15 swap  :   0 tst   :   2 wdr   :   1 

Instructions used: 50 out of 114 (43.9%)

ATmega8A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0013cc   5052     16   5068    8192  61.9%
[.dseg] 0x000060 0x000206      0    166    166    1024  16.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
